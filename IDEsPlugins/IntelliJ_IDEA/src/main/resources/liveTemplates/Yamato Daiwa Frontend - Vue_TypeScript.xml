<templateSet group="Yamato Daiwa Frontend - Vue/TypeScript">
  <template name="ossll" value="//- Minimal example&#10;OverflowSafeSingleLineLabel {{ value }}&#10;&#10;//- Full example&#10;OverflowSafeSingleLineLabel(&#10;  rootElementTag=&quot;h1&quot;&#10;})&#10;//- --- END OF AUTOMATICALLY GENERATED CODE ----------------------------------------------------------------------------" description="`OverflowSafeSingleLineLabel` component" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="VUE_INSIDE_TAG" value="true" />
    </context>
  </template>
  <template name="badge-ydf-vue" value="Badge(&#10;  :keyLabel=&quot;$KEY$&quot; // TODO Remove if the badge is value-only&#10;  :valueLabel=&quot;$VALUE$&quot;&#10;  :theme=&quot;Badge.Themes.regular&quot;$END$ // TODO Remove if theme is only one, default or external&#10;  :areThemesCSS_ClassesCommon=&quot;true&quot;, // TODO Remove if false or has been set to `true` globally&#10;  :geometry=&quot;Badge.GeometricVariations.regular&quot; // TODO Remove if the geometric variation is only one or default&#10;  :geometricModifiers=&quot;[ Badge.GeometricModifiers.pillShape, Badge.GeometricModifiers.singleLine ]&quot; // TODO Remove if no geometric modifiers required&#10;  :decoration=&quot;Badge.DecorativeVariations.$DECORATIVE_VARIATION$&quot;&#10;  :decorativeModifiers=&quot;[ Badge__YDF.DecorativeModifiers.bordersDisguising, Badge__YDF.DecorativeModifiers.noBackground ]&quot; // TODO Remove if no decorative modifiers required&#10;): CalendarIcon__Date.Badge--YDF-Icon&#10;//- â†‘ TODO Remove if no icon required&#10;&#10;//- TODO [ Optimization ] initialize &quot;Badge&quot; variable in &quot;created&quot; lifecycle hook to make it non-reactive:&#10;//- &#10;&#10;  public created(): void {&#10;  &#10;    this.initializeNonReactiveClassFields();&#10;  &#10;    Badge.registerImplementationLocally(this);&#10;  &#10;  }&#10;  &#10;  &#10;  /* === Non-reactive class fields ================================================================================== */&#10;  protected Badge!: typeof Badge;&#10;  &#10;  private initializeNonReactiveClassFields(): void {&#10;    this.Badge = Badge;&#10;  }&#10;//- ==== END OF AUTOMATICALLY GENERATED CODE ===========================================================================" description="`Badge`, the YDF component (Vue)" toReformat="false" toShortenFQNames="true">
    <variable name="DECORATIVE_VARIATION" expression="enum(&quot;veryCatchyBright&quot;, &quot;catchyBright&quot;, &quot;modestlyCatchyBright&quot;, &quot;neutralBright&quot;, &quot;modestlyCalmingBright&quot;, &quot;calmingBright&quot;, &quot;achromaticBright&quot;, &quot;veryCatchyPastel&quot;, &quot;catchyPastel&quot;, &quot;modestlyCatchyPastel&quot;, &quot;neutralPastel&quot;, &quot;modestlyCalmingPastel&quot;, &quot;calmingPastel&quot;, &quot;achromaticPastel&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="KEY" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="VUE_INSIDE_TAG" value="true" />
    </context>
  </template>
  <template name="badge-lp-ydf-vue" value="BadgeLoadingPlaceholder(&#10;  :theme=&quot;Badge.Themes.regular&quot;$END$ // TODO Remove if theme is only one, default or external&#10;  :areThemesCSS_ClassesCommon=&quot;true&quot;, // TODO Remove if false or has been set to `true` globally&#10;  :geometry=&quot;Badge.GeometricVariations.regular&quot; // TODO Remove if the geometric variation is only one or default&#10;  :geometricModifiers=&quot;[ Badge.GeometricModifiers.pillShape ]&quot; // TODO Remove if no geometric modifiers required&#10;)&#10;&#10;//- TODO [ Optimization ] initialize &quot;Badge&quot; variable in &quot;created&quot; lifecycle hook to make it non-reactive:&#10;//- &#10;&#10;  public created(): void {&#10;  &#10;    this.initializeNonReactiveClassFields();&#10;  &#10;    Badge.registerImplementationLocally(this);&#10;  &#10;  }&#10;  &#10;  &#10;  /* === Non-reactive class fields ================================================================================== */&#10;  protected Badge!: typeof Badge;&#10;  &#10;  private initializeNonReactiveClassFields(): void {&#10;    this.Badge = Badge;&#10;  }&#10;//- ==== END OF AUTOMATICALLY GENERATED CODE ===========================================================================" description="`Badge` (loading placeholder), the YDF component (Vue)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="VUE_INSIDE_TAG" value="true" />
    </context>
  </template>
  <template name="ab-ydf-vue-p" value="AdmonitionBlock(&#10;  :title=&quot;'Title'&quot; // TODO Edit if the title is required otherwise remove&#10;  :hasDefaultSVG_Icon=&quot;true&quot; // TODO Remove if default icon is not required&#10;  :dismissible=&quot;true&quot; // TODO Remove if the dismissing is not required&#10;  :theme=&quot;AdmonitionBlock.Themes.regular&quot; // TODO Remove if theme is only one, default or common&#10;  :areThemesCSS_ClassesCommon=&quot;true&quot; // TODO Remove if false or has been set to `true` globally&#10;  :geometricVariation=&quot;AdmonitionBlock.GeometricVariations.$GEOMETRIC_VARIATION$&quot; // TODO Remove if the geometric variation is `regular` (default)&#10;  :decorativeVariation=&quot;AdmonitionBlock.DecorativeVariations.$DECORATIVE_VARIATION$&quot;&#10;)&#10;&#10;  $END$&#10;&#10;  //- TODO Edit if the custom icon is required otherwise remove&#10;  template(v-slot:CustomSVG_Icon): ExclamationMarkIcon__Squared.AdmonitionBlock--YDF-SVG_Icon&#10;&#10;  //- TODO Edit if the centered button is required otherwise remove&#10;  Button.AdmonitionBlock--YDF-CenteredButton(&#10;    label=&quot;Action 1&quot;&#10;  )&#10;&#10;  //- TODO Edit if the action bar is required otherwise remove&#10;  template(v-slot:ActionBarContent)&#10;    Button(label=&quot;Action 1&quot;)&#10;    Button(label=&quot;Action 2&quot;)" description="AdmonitionBlock (YDF Component, Vue, Pug syntax)" toReformat="false" toShortenFQNames="true">
    <variable name="DECORATIVE_VARIATION" expression="enum(&quot;notice&quot;, &quot;error&quot;, &quot;warning&quot;, &quot;success&quot;, &quot;guidance&quot;, &quot;question&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="GEOMETRIC_VARIATION" expression="enum(&quot;regular&quot;, &quot;stickyNoteLike&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JADE" value="true" />
      <option name="VUE_INSIDE_TAG" value="true" />
    </context>
  </template>
  <template name="ab-ydf-vue-h" value="&lt;AdmonitionBlock&#10;  :title=&quot;'Title'&quot; &lt;!-- TODO Edit if the title is required otherwise remove --&gt;&#10;  :hasDefaultSVG_Icon=&quot;true&quot; &lt;!-- TODO TODO Remove if default icon is not required --&gt;&#10;  :dismissible=&quot;true&quot; // &lt;!-- TODO Remove if the dismissing is not required --&gt;&#10;  :theme=&quot;AdmonitionBlock.Themes.regular&quot; &lt;!-- TODO Remove if theme is only one, default or common --&gt;&#10;  :areThemesCSS_ClassesCommon=&quot;true&quot; &lt;!-- TODO Remove if false or has been set to `true` globally --&gt;&#10;  :geometricVariation=&quot;AdmonitionBlock.GeometricVariations.$GEOMETRIC_VARIATION$&quot; &lt;!-- TODO Remove if the geometric variation is `regular` (default) --&gt;&#10;  :decorativeVariation=&quot;AdmonitionBlock.DecorativeVariations.$DECORATIVE_VARIATION$&quot;&#10;&gt;&#10;&#10;  $END$&#10;&#10;  &lt;!-- TODO Edit if the custom icon is required otherwise remove --&gt;&#10;  &lt;template v-slot:CustomSVG_Icon&gt;&#10;    &lt;ExclamationMarkIcon__Squared class=&quot;AdmonitionBlock--YDF-SVG_Icon&quot; /&gt;&#10;  &lt;/template&gt;&#10;&#10;  &lt;!-- TODO Edit if the centered button is required otherwise remove --&gt;&#10;  &lt;Button&#10;    label=&quot;Action 1&quot;&#10;    class=&quot;AdmonitionBlock--YDF-CenteredButton&quot; &#10;  /&gt;&#10;&#10;  &lt;!-- TODO Edit if the action bar is required otherwise remove --&gt;&#10;  &lt;template v-slot:ActionBarContent&gt;&#10;    &lt;Button label=&quot;Action 1&quot; /&gt;&#10;    &lt;Button label=&quot;Action 2&quot; /&gt;&#10;  &lt;/template&gt;&#10;&#10;&lt;/AdmonitionBlock&gt;" description="AdmonitionBlock (YDF Component, Vue, HTML syntax)" toReformat="false" toShortenFQNames="true">
    <variable name="DECORATIVE_VARIATION" expression="enum(&quot;notice&quot;, &quot;error&quot;, &quot;warning&quot;, &quot;success&quot;, &quot;guidance&quot;, &quot;question&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="GEOMETRIC_VARIATION" expression="enum(&quot;regular&quot;, &quot;stickyNoteLike&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="VUE_INSIDE_TAG" value="true" />
      <option name="VUE_TEMPLATE" value="true" />
    </context>
  </template>
  <template name="AdmonitionBlock--YDF-V-H" value="&lt;AdmonitionBlock&#10;  :title=&quot;'Title'&quot; &lt;!-- TODO Edit if the title is required otherwise remove --&gt;&#10;  :hasDefaultSVG_Icon=&quot;true&quot; &lt;!-- TODO TODO Remove if default icon is not required --&gt;&#10;  :dismissible=&quot;true&quot; // &lt;!-- TODO Remove if the dismissing is not required --&gt;&#10;  :theme=&quot;AdmonitionBlock.Themes.regular&quot; &lt;!-- TODO Remove if theme is only one, default or common --&gt;&#10;  :areThemesCSS_ClassesCommon=&quot;true&quot; &lt;!-- TODO Remove if false or has been set to `true` globally --&gt;&#10;  :geometricVariation=&quot;AdmonitionBlock.GeometricVariations.$GEOMETRIC_VARIATION$&quot; &lt;!-- TODO Remove if the geometric variation is `regular` (default) --&gt;&#10;  :decorativeVariation=&quot;AdmonitionBlock.DecorativeVariations.$DECORATIVE_VARIATION$&quot;&#10;&gt;&#10;&#10;  $END$&#10;&#10;  &lt;!-- TODO Edit if the custom icon is required otherwise remove --&gt;&#10;  &lt;template v-slot:CustomSVG_Icon&gt;&#10;    &lt;ExclamationMarkIcon__Squared class=&quot;AdmonitionBlock--YDF-SVG_Icon&quot; /&gt;&#10;  &lt;/template&gt;&#10;&#10;  &lt;!-- TODO Edit if the centered button is required otherwise remove --&gt;&#10;  &lt;Button&#10;    label=&quot;Action 1&quot;&#10;    class=&quot;AdmonitionBlock--YDF-CenteredButton&quot; &#10;  /&gt;&#10;&#10;  &lt;!-- TODO Edit if the action bar is required otherwise remove --&gt;&#10;  &lt;template v-slot:ActionBarContent&gt;&#10;    &lt;Button label=&quot;Action 1&quot; /&gt;&#10;    &lt;Button label=&quot;Action 2&quot; /&gt;&#10;  &lt;/template&gt;&#10;&#10;&lt;/AdmonitionBlock&gt;" description="AdmonitionBlock (YDF Component, Vue, HTML syntax)" toReformat="false" toShortenFQNames="true">
    <variable name="DECORATIVE_VARIATION" expression="enum(&quot;notice&quot;, &quot;error&quot;, &quot;warning&quot;, &quot;success&quot;, &quot;guidance&quot;, &quot;question&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="GEOMETRIC_VARIATION" expression="enum(&quot;regular&quot;, &quot;stickyNoteLike&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="VUE_INSIDE_TAG" value="true" />
      <option name="VUE_TEMPLATE" value="true" />
    </context>
  </template>
  <template name="AdmonitionBlock--YDF-V-P" value="AdmonitionBlock(&#10;  :title=&quot;'Title'&quot; // TODO Edit if the title is required otherwise remove&#10;  :hasDefaultSVG_Icon=&quot;true&quot; // TODO Remove if default icon is not required&#10;  :dismissible=&quot;true&quot; // TODO Remove if the dismissing is not required&#10;  :theme=&quot;AdmonitionBlock.Themes.regular&quot; // TODO Remove if theme is only one, default or common&#10;  :areThemesCSS_ClassesCommon=&quot;true&quot; // TODO Remove if false or has been set to `true` globally&#10;  :geometricVariation=&quot;AdmonitionBlock.GeometricVariations.$GEOMETRIC_VARIATION$&quot; // TODO Remove if the geometric variation is `regular` (default)&#10;  :decorativeVariation=&quot;AdmonitionBlock.DecorativeVariations.$DECORATIVE_VARIATION$&quot;&#10;)&#10;&#10;  $END$&#10;&#10;  //- TODO Edit if the custom icon is required otherwise remove&#10;  template(v-slot:CustomSVG_Icon): ExclamationMarkIcon__Squared.AdmonitionBlock--YDF-SVG_Icon&#10;&#10;  //- TODO Edit if the centered button is required otherwise remove&#10;  Button.AdmonitionBlock--YDF-CenteredButton(&#10;    label=&quot;Action 1&quot;&#10;  )&#10;&#10;  //- TODO Edit if the action bar is required otherwise remove&#10;  template(v-slot:ActionBarContent)&#10;    Button(label=&quot;Action 1&quot;)&#10;    Button(label=&quot;Action 2&quot;)" description="AdmonitionBlock (YDF Component, Vue, Pug syntax)" toReformat="false" toShortenFQNames="true">
    <variable name="DECORATIVE_VARIATION" expression="enum(&quot;notice&quot;, &quot;error&quot;, &quot;warning&quot;, &quot;success&quot;, &quot;guidance&quot;, &quot;question&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="GEOMETRIC_VARIATION" expression="enum(&quot;regular&quot;, &quot;stickyNoteLike&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JADE" value="true" />
    </context>
  </template>
</templateSet>