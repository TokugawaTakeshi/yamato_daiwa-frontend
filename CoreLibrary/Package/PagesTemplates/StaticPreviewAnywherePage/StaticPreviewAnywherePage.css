/*
 * @yamato-daiwa/frontend v2.0
 * (c) 2023 Yamato Daiwa Co., Ltd
 * Released under the MIT License.
 */
a,abbr,acronym,address,applet,article,aside,audio,b,big,blockquote,body,canvas,caption,center,cite,code,dd,del,details,dfn,div,dl,dt,em,embed,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,ins,kbd,label,legend,li,mark,menu,nav,object,ol,output,p,pre,q,ruby,s,samp,section,small,span,strike,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,tt,u,ul,var,video {
  border: 0;
  font-size: 100%;
  margin: 0;
  padding: 0;
  vertical-align: baseline;
}
article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section {
  display: block;
}
h1,h2,h3,h4,h5,h6 {
  font-weight: 400;
}
body {
  line-height: 1;
}
ol,ul {
  list-style: none;
}
a {
  color: #000;
  outline: none;
  text-decoration: none;
}
blockquote,q {
  quotes: none;
}
blockquote:after,blockquote:before,q:after,q:before {
  content: "";
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
th {
  font-weight: 400;
}
button:focus,input:focus,select:focus,textarea:focus {
  outline: none;
}
input {
  box-shadow: none;
}
hr {
  border-width: 0;
  margin: 0;
}
* {
  box-sizing: border-box;
}
body,html {
  height: 100%;
}
html {
  font-family: system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,Liberation Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;
  font-size: 14px;
  line-height: 1;
}
sub {
  vertical-align: sub;
}
sub,sup {
  font-size: 10px;
  margin-left: 1px;
}
sup {
  vertical-align: super;
}
.Badge--YDF {
  align-items: center;
  display: inline-flex;
}
.Badge--YDF-SVG_Icon {
  flex-shrink: 0;
}
.Badge--YDF__LoadingPlaceholder {
  display: inline-block;
}
.Badge--YDF__RegularGeometricVariation {
  border-radius: .2em;
  border-width: 1px;
}
.Badge--YDF__RegularGeometricVariation.Badge--YDF__PillShapeGeometricModifier {
  border-radius: 2em;
}
.Badge--YDF__RegularGeometricVariation .Badge--YDF-SVG_Icon {
  height: 1em;
  margin-left: .5em;
}
.Badge--YDF__RegularGeometricVariation .Badge--YDF-KeyLabel {
  font-size: 1em;
  padding-bottom: .3em;
  padding-top: .3em;
}
.Badge--YDF__RegularGeometricVariation .Badge--YDF-KeyLabel:first-child {
  margin-left: .8em;
}
.Badge--YDF__RegularGeometricVariation:not(.Badge--YDF__SingleLineGeometricModifier) .Badge--YDF-KeyLabel {
  -webkit-hyphens: auto;
          hyphens: auto;
  line-height: 1.2;
  margin-bottom: -.1em;
  margin-top: -.1em;
}
.Badge--YDF__RegularGeometricVariation .Badge--YDF-SVG_Icon+.Badge--YDF-KeyLabel {
  margin-left: .4em;
}
.Badge--YDF__RegularGeometricVariation .Badge--YDF-ValueLabel {
  padding-bottom: .3em;
  padding-top: .3em;
}
.Badge--YDF__RegularGeometricVariation .Badge--YDF-ValueLabel:first-child {
  margin-left: .8em;
}
.Badge--YDF__RegularGeometricVariation .Badge--YDF-ValueLabel:last-child {
  margin-right: .8em;
}
.Badge--YDF__RegularGeometricVariation.Badge--YDF__SingleLineGeometricModifier .Badge--YDF-ValueLabel {
  font-size: 1em;
}
.Badge--YDF__RegularGeometricVariation:not(.Badge--YDF__SingleLineGeometricModifier) .Badge--YDF-ValueLabel {
  font-size: 1em;
  -webkit-hyphens: auto;
          hyphens: auto;
  line-height: 1.2;
  margin-bottom: -.1em;
  margin-top: -.1em;
}
.Badge--YDF__RegularGeometricVariation .Badge--YDF-SVG_Icon+.Badge--YDF-ValueLabel {
  margin-left: .6em;
}
.Badge--YDF__RegularGeometricVariation .Badge--YDF-KeyLabel+.Badge--YDF-ValueLabel {
  margin-left: .4em;
}
.Badge--YDF__RegularGeometricVariation.Badge--YDF__LoadingPlaceholder {
  background: #e1e7eb;
  height: calc(2px + 1.6em);
  min-width: 80px;
  overflow: hidden;
}
.Badge--YDF__RegularGeometricVariation.Badge--YDF__LoadingPlaceholder:before {
  animation-duration: 1.5s;
  animation-fill-mode: forwards;
  animation-iteration-count: infinite;
  animation-name: LoadingPlaceholderAnimation;
  animation-timing-function: ease;
  background: linear-gradient(90deg, transparent 0, #e7ecef 30%, #eaeef1 50%, #e7ecef 70%, transparent);
  content: "";
  display: block;
  height: 100%;
  transform: translateX(-100%);
}
.Badge--YDF__SmallGeometricVariation {
  border-radius: .2em;
  border-width: 1px;
}
.Badge--YDF__SmallGeometricVariation.Badge--YDF__PillShapeGeometricModifier {
  border-radius: 1.2em;
}
.Badge--YDF__SmallGeometricVariation .Badge--YDF-SVG_Icon {
  height: .5em;
  margin-left: .2em;
}
.Badge--YDF__SmallGeometricVariation .Badge--YDF-KeyLabel {
  font-size: .6em;
  padding-bottom: .1em;
  padding-top: .1em;
}
.Badge--YDF__SmallGeometricVariation .Badge--YDF-KeyLabel:first-child {
  margin-left: .8em;
}
.Badge--YDF__SmallGeometricVariation:not(.Badge--YDF__SingleLineGeometricModifier) .Badge--YDF-KeyLabel {
  -webkit-hyphens: auto;
          hyphens: auto;
  line-height: 1.166666666666667;
  margin-bottom: -.05em;
  margin-top: -.05em;
}
.Badge--YDF__SmallGeometricVariation .Badge--YDF-SVG_Icon+.Badge--YDF-KeyLabel {
  margin-left: .4em;
}
.Badge--YDF__SmallGeometricVariation .Badge--YDF-ValueLabel {
  padding-bottom: .1em;
  padding-top: .1em;
}
.Badge--YDF__SmallGeometricVariation .Badge--YDF-ValueLabel:first-child {
  margin-left: .4em;
}
.Badge--YDF__SmallGeometricVariation .Badge--YDF-ValueLabel:last-child {
  margin-right: .4em;
}
.Badge--YDF__SmallGeometricVariation.Badge--YDF__SingleLineGeometricModifier .Badge--YDF-ValueLabel {
  font-size: .6em;
}
.Badge--YDF__SmallGeometricVariation:not(.Badge--YDF__SingleLineGeometricModifier) .Badge--YDF-ValueLabel {
  font-size: .6em;
  -webkit-hyphens: auto;
          hyphens: auto;
  line-height: 1.333333333333333;
  margin-bottom: -.1em;
  margin-top: -.1em;
}
.Badge--YDF__SmallGeometricVariation .Badge--YDF-SVG_Icon+.Badge--YDF-ValueLabel {
  margin-left: .6em;
}
.Badge--YDF__SmallGeometricVariation .Badge--YDF-KeyLabel+.Badge--YDF-ValueLabel {
  margin-left: .4em;
}
.Badge--YDF__SmallGeometricVariation.Badge--YDF__LoadingPlaceholder {
  background: #e1e7eb;
  height: calc(2px + .8em);
  min-width: 10px;
  overflow: hidden;
}
.Badge--YDF__SmallGeometricVariation.Badge--YDF__LoadingPlaceholder:before {
  animation-duration: 1.5s;
  animation-fill-mode: forwards;
  animation-iteration-count: infinite;
  animation-name: LoadingPlaceholderAnimation;
  animation-timing-function: ease;
  background: linear-gradient(90deg, transparent 0, #e7ecef 30%, #eaeef1 50%, #e7ecef 70%, transparent);
  content: "";
  display: block;
  height: 100%;
  transform: translateX(-100%);
}
@keyframes LoadingPlaceholderAnimation {
  0% {
    transform: translateX(-100%);
  }
  to {
    transform: translateX(100%);
  }
}
.Badge--YDF__VeryCatchyBrightDecorativeVariation {
  background-color: #c00;
  border-color: #c00;
  border-style: solid;
}
.Badge--YDF__VeryCatchyBrightDecorativeVariation .Badge--YDF-SVG_Icon {
  fill: #fff;
}
.Badge--YDF__VeryCatchyBrightDecorativeVariation .Badge--YDF-KeyLabel {
  color: #fff;
}
.Badge--YDF__VeryCatchyBrightDecorativeVariation .Badge--YDF-ValueLabel {
  color: #fff;
  font-weight: 700;
}
.Badge--YDF__CatchyBrightDecorativeVariation {
  background-color: #c50;
  border-color: #c50;
  border-style: solid;
}
.Badge--YDF__CatchyBrightDecorativeVariation .Badge--YDF-SVG_Icon {
  fill: #fff;
}
.Badge--YDF__CatchyBrightDecorativeVariation .Badge--YDF-KeyLabel {
  color: #fff;
}
.Badge--YDF__CatchyBrightDecorativeVariation .Badge--YDF-ValueLabel {
  color: #fff;
  font-weight: 700;
}
.Badge--YDF__ModestlyCatchyBrightDecorativeVariation {
  background-color: #c90;
  border-color: #c90;
  border-style: solid;
}
.Badge--YDF__ModestlyCatchyBrightDecorativeVariation .Badge--YDF-SVG_Icon {
  fill: #fff;
}
.Badge--YDF__ModestlyCatchyBrightDecorativeVariation .Badge--YDF-KeyLabel {
  color: #fff;
}
.Badge--YDF__ModestlyCatchyBrightDecorativeVariation .Badge--YDF-ValueLabel {
  color: #fff;
  font-weight: 700;
}
.Badge--YDF__NeutralBrightDecorativeVariation {
  background-color: #09c;
  border-color: #09c;
  border-style: solid;
}
.Badge--YDF__NeutralBrightDecorativeVariation .Badge--YDF-SVG_Icon {
  fill: #fff;
}
.Badge--YDF__NeutralBrightDecorativeVariation .Badge--YDF-KeyLabel {
  color: #fff;
}
.Badge--YDF__NeutralBrightDecorativeVariation .Badge--YDF-ValueLabel {
  color: #fff;
  font-weight: 700;
}
.Badge--YDF__ModestlyCalmingBrightDecorativeVariation {
  background-color: #07c;
  border-color: #07c;
  border-style: solid;
}
.Badge--YDF__ModestlyCalmingBrightDecorativeVariation .Badge--YDF-SVG_Icon {
  fill: #fff;
}
.Badge--YDF__ModestlyCalmingBrightDecorativeVariation .Badge--YDF-KeyLabel {
  color: #fff;
}
.Badge--YDF__ModestlyCalmingBrightDecorativeVariation .Badge--YDF-ValueLabel {
  color: #fff;
  font-weight: 700;
}
.Badge--YDF__CalmingBrightDecorativeVariation {
  background-color: #0c8;
  border-color: #0c8;
  border-style: solid;
}
.Badge--YDF__CalmingBrightDecorativeVariation .Badge--YDF-SVG_Icon {
  fill: #fff;
}
.Badge--YDF__CalmingBrightDecorativeVariation .Badge--YDF-KeyLabel {
  color: #fff;
}
.Badge--YDF__CalmingBrightDecorativeVariation .Badge--YDF-ValueLabel {
  color: #fff;
  font-weight: 700;
}
.Badge--YDF__AchromaticBrightDecorativeVariation {
  background-color: #505050;
  border-color: #505050;
  border-style: solid;
}
.Badge--YDF__AchromaticBrightDecorativeVariation .Badge--YDF-SVG_Icon {
  fill: #fff;
}
.Badge--YDF__AchromaticBrightDecorativeVariation .Badge--YDF-KeyLabel {
  color: #fff;
}
.Badge--YDF__AchromaticBrightDecorativeVariation .Badge--YDF-ValueLabel {
  color: #fff;
  font-weight: 700;
}
.Badge--YDF__VeryCatchyPastelDecorativeVariation {
  background-color: #ffe0e0;
  border-color: #c00;
  border-style: solid;
}
.Badge--YDF__VeryCatchyPastelDecorativeVariation .Badge--YDF-SVG_Icon {
  fill: #c00;
}
.Badge--YDF__VeryCatchyPastelDecorativeVariation .Badge--YDF-KeyLabel {
  color: #c00;
}
.Badge--YDF__VeryCatchyPastelDecorativeVariation .Badge--YDF-ValueLabel {
  color: #c00;
  font-weight: 700;
}
.Badge--YDF__CatchyPastelDecorativeVariation {
  background-color: #ffede0;
  border-color: #c50;
  border-style: solid;
}
.Badge--YDF__CatchyPastelDecorativeVariation .Badge--YDF-SVG_Icon {
  fill: #c50;
}
.Badge--YDF__CatchyPastelDecorativeVariation .Badge--YDF-KeyLabel {
  color: #c50;
}
.Badge--YDF__CatchyPastelDecorativeVariation .Badge--YDF-ValueLabel {
  color: #c50;
  font-weight: 700;
}
.Badge--YDF__ModestlyCatchyPastelDecorativeVariation {
  background-color: #fff7e0;
  border-color: #c90;
  border-style: solid;
}
.Badge--YDF__ModestlyCatchyPastelDecorativeVariation .Badge--YDF-SVG_Icon {
  fill: #c90;
}
.Badge--YDF__ModestlyCatchyPastelDecorativeVariation .Badge--YDF-KeyLabel {
  color: #c90;
}
.Badge--YDF__ModestlyCatchyPastelDecorativeVariation .Badge--YDF-ValueLabel {
  color: #c90;
  font-weight: 700;
}
.Badge--YDF__NeutralPastelDecorativeVariation {
  background-color: #e0f7ff;
  border-color: #09c;
  border-style: solid;
}
.Badge--YDF__NeutralPastelDecorativeVariation .Badge--YDF-SVG_Icon {
  fill: #09c;
}
.Badge--YDF__NeutralPastelDecorativeVariation .Badge--YDF-KeyLabel {
  color: #09c;
}
.Badge--YDF__NeutralPastelDecorativeVariation .Badge--YDF-ValueLabel {
  color: #09c;
  font-weight: 700;
}
.Badge--YDF__ModestlyCalmingPastelDecorativeVariation {
  background-color: #e0f2ff;
  border-color: #07c;
  border-style: solid;
}
.Badge--YDF__ModestlyCalmingPastelDecorativeVariation .Badge--YDF-SVG_Icon {
  fill: #07c;
}
.Badge--YDF__ModestlyCalmingPastelDecorativeVariation .Badge--YDF-KeyLabel {
  color: #07c;
}
.Badge--YDF__ModestlyCalmingPastelDecorativeVariation .Badge--YDF-ValueLabel {
  color: #07c;
  font-weight: 700;
}
.Badge--YDF__CalmingPastelDecorativeVariation {
  background-color: #e0fff5;
  border-color: #0c8;
  border-style: solid;
}
.Badge--YDF__CalmingPastelDecorativeVariation .Badge--YDF-SVG_Icon {
  fill: #0c8;
}
.Badge--YDF__CalmingPastelDecorativeVariation .Badge--YDF-KeyLabel {
  color: #0c8;
}
.Badge--YDF__CalmingPastelDecorativeVariation .Badge--YDF-ValueLabel {
  color: #0c8;
  font-weight: 700;
}
.Badge--YDF__AchromaticPastelDecorativeVariation {
  background-color: #f0f0f0;
  border-color: #505050;
  border-style: solid;
}
.Badge--YDF__AchromaticPastelDecorativeVariation .Badge--YDF-SVG_Icon {
  fill: #505050;
}
.Badge--YDF__AchromaticPastelDecorativeVariation .Badge--YDF-KeyLabel {
  color: #505050;
}
.Badge--YDF__AchromaticPastelDecorativeVariation .Badge--YDF-ValueLabel {
  color: #505050;
  font-weight: 700;
}
.Badge--YDF__SingleLineGeometricModifier .Badge--YDF-KeyLabel {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
:not(.Badge--YDF__SingleLineGeometricModifier) .Badge--YDF-KeyLabel {
  word-break: break-all;
}
.Badge--YDF__SingleLineGeometricModifier .Badge--YDF-ValueLabel {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
:not(.Badge--YDF__SingleLineGeometricModifier) .Badge--YDF-ValueLabel {
  word-break: break-all;
}
.Badge--YDF__BordersDisguisingDecorativeModifier {
  border-color: transparent;
}
.Badge--YDF__NoBackgroundDecorativeModifier {
  background: none;
}
.Link--YDF {
  cursor: pointer;
  line-height: inherit;
}
.Link--YDF__AlwaysSingleLine {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.Link--YDF__LineBreakable {
  word-break: break-all;
}
.Link--YDF {
  color: #003eff;
  text-decoration-color: #003eff;
  text-decoration-line: underline;
  text-decoration-thickness: 1px;
  text-underline-offset: 3px;
}
.Link--YDF:hover {
  color: #007fff;
  text-decoration-color: rgba(0,127,255,.75);
}
.Link--YDF:focus-visible {
  outline-color: #007fff;
  outline-offset: 3px;
  outline-style: solid;
  outline-width: 2px;
}
.Link--YDF:active,.Link--YDF[aria-pressed=true] {
  color: rgba(0,62,255,.75);
  text-decoration-color: rgba(0,62,255,.75);
  text-decoration-style: solid;
  text-decoration-thickness: 1px;
}
.StaticPreviewAnywherePage--YDF {
  padding: 12px 10px 24px;
}
.StaticPreviewAnywherePage--YDF-TopHeading {
  color: #fd746c;
  font-size: 32px;
  -webkit-hyphens: auto;
          hyphens: auto;
  line-height: 1.125;
  word-break: break-all;
}
.StaticPreviewAnywherePage--YDF-TopHeading:after,.StaticPreviewAnywherePage--YDF-TopHeading:before {
  content: "";
  display: block;
}
.StaticPreviewAnywherePage--YDF-TopHeading:before {
  margin-top: -2px;
}
.StaticPreviewAnywherePage--YDF-TopHeading:after {
  margin-bottom: -2px;
}
.StaticPreviewAnywherePage--YDF-Navigation {
  margin-top: 12px;
}
.StaticPreviewAnywherePage--YDF-SectionHeading {
  color: #fd746c;
  font-size: 28px;
  font-weight: 700;
  -webkit-hyphens: auto;
          hyphens: auto;
  line-height: 1.142857142857143;
  word-break: break-all;
}
.StaticPreviewAnywherePage--YDF-SectionHeading:after,.StaticPreviewAnywherePage--YDF-SectionHeading:before {
  content: "";
  display: block;
}
.StaticPreviewAnywherePage--YDF-SectionHeading:before {
  margin-top: -2px;
}
.StaticPreviewAnywherePage--YDF-SectionHeading:after {
  margin-bottom: -2px;
}
.StaticPreviewAnywherePage--YDF-SubsectionHeading {
  color: #ff9068;
  font-size: 22px;
  font-weight: 700;
  -webkit-hyphens: auto;
          hyphens: auto;
  line-height: 1.181818181818182;
  word-break: break-all;
}
.StaticPreviewAnywherePage--YDF-SubsectionHeading:after,.StaticPreviewAnywherePage--YDF-SubsectionHeading:before {
  content: "";
  display: block;
}
.StaticPreviewAnywherePage--YDF-SubsectionHeading:before {
  margin-top: -2px;
}
.StaticPreviewAnywherePage--YDF-SubsectionHeading:after {
  margin-bottom: -2px;
}
.StaticPreviewAnywherePage--YDF-PagesSubsubgroupHeading {
  color: #b0b0b0;
  font-size: 18px;
  font-weight: 700;
  -webkit-hyphens: auto;
          hyphens: auto;
  line-height: 1.111111111111111;
  word-break: break-all;
}
.StaticPreviewAnywherePage--YDF-PagesSubsubgroupHeading:after,.StaticPreviewAnywherePage--YDF-PagesSubsubgroupHeading:before {
  content: "";
  display: block;
}
.StaticPreviewAnywherePage--YDF-PagesSubsubgroupHeading:before {
  margin-top: -1px;
}
.StaticPreviewAnywherePage--YDF-PagesSubsubgroupHeading:after {
  margin-bottom: -1px;
}
.StaticPreviewAnywherePage--YDF-SectionHeading+.StaticPreviewAnywherePage--YDF-CardsFlow {
  margin-top: 8px;
}
.StaticPreviewAnywherePage--YDF-CardsFlow+.StaticPreviewAnywherePage--YDF-SectionHeading {
  margin-top: 16px;
}
.StaticPreviewAnywherePage--YDF-SubsectionHeading+.StaticPreviewAnywherePage--YDF-CardsFlow {
  margin-top: 8px;
}
.StaticPreviewAnywherePage--YDF-CardsFlow+.StaticPreviewAnywherePage--YDF-SubsectionHeading {
  margin-top: 16px;
}
.StaticPreviewAnywherePage--YDF-Card {
  box-shadow: 0 0 4px 1px rgba(0,0,0,.25);
  padding: 6px;
}
.StaticPreviewAnywherePage--YDF-Card+.StaticPreviewAnywherePage--YDF-Card {
  margin-top: 8px;
}
@media (min-width:500px) {
  .StaticPreviewAnywherePage--YDF-Card {
    align-items: center;
    display: flex;
  }
}
@media (max-width:499px) {
  .StaticPreviewAnywherePage--YDF-Card {
    align-items: center;
    -moz-column-gap: 6px;
         column-gap: 6px;
    display: grid;
    grid-template-columns: auto minmax(0, 1fr);
    grid-template-rows: auto 1fr;
  }
}
.StaticPreviewAnywherePage--YDF-Card-Title {
  font-size: 16px;
  font-weight: 700;
}
@media (min-width:500px) {
  .StaticPreviewAnywherePage--YDF-Card-Title {
    margin-left: 12px;
  }
}
.StaticPreviewAnywherePage--YDF-Card-Badge+.StaticPreviewAnywherePage--YDF-Card-Link {
  margin-left: 6px;
}
.StaticPreviewAnywherePage--YDF-Card ul li+li {
  margin-top: 4px;
}
@media (min-width:500px) {
  .StaticPreviewAnywherePage--YDF-Card table {
    border-collapse: separate;
  }
}
@media (max-width:499px) {
  .StaticPreviewAnywherePage--YDF-Card table {
    display: block;
    grid-column: span 2;
    margin-top: 6px;
  }
  .StaticPreviewAnywherePage--YDF-Card table tbody,.StaticPreviewAnywherePage--YDF-Card table tr {
    display: block;
  }
  .StaticPreviewAnywherePage--YDF-Card table tbody+tr,.StaticPreviewAnywherePage--YDF-Card table tr+tr {
    margin-top: 6px;
  }
}
.StaticPreviewAnywherePage--YDF-Card table th {
  font-weight: 700;
}
@media (min-width:500px) {
  .StaticPreviewAnywherePage--YDF-Card table th {
    text-align: right;
  }
}
@media (max-width:499px) {
  .StaticPreviewAnywherePage--YDF-Card table th {
    display: block;
  }
  .StaticPreviewAnywherePage--YDF-Card table td {
    display: block;
    margin-left: 6px;
  }
  .StaticPreviewAnywherePage--YDF-Card table td+td {
    margin-top: 4px;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
