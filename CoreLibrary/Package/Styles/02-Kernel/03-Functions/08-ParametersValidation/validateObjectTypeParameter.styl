validateObjectTypeParameter(namedParameters)

  mixinOrFunctionName = namedParameters.mixinOrFunctionName

  if !isNonEmptyString(mixinOrFunctionName) {
    error(
      "Please specify the property 'mixinOfFunctionName' at first and only object-type parameter of function " +\
      "'validateObjectTypeParameter' with non-empty string for clear logging where exactly error could occur."
    )
  }


  targetParameterNumber = namedParameters.targetParameterNumber

  if !isNaturalNumber(targetParameterNumber)
    error(
      "Please specify the property 'targetParameterNumber' at first and only object-type parameter of function " +\
      "'validateObjectTypeParameter' with natural number for clear logging what number parameter is invalid."
    )


  schema = namedParameters.schema

  if !isObject(schema)
    error(
      "Please specify the property 'schema' at first and only object-type parameter of function " +\
      "'validateObjectTypeParameter' with object describing the scema of valid target parameter to display it to " +\
      "user if invalid value will be passed."
    )


  // [ Theory ] Explicit null will not be substituted by Stylus default parameters functionality
  targetParameter = nullToEmptyObject(namedParameters.targetParameter)

  if (!isObject(targetParameter)) {
    error(buildString(
      "The parameter number ${targetParameterNumber} of function/mixin '${mixinOrFunctionName}' must be of object type.\n" +\
      "Actual value: ${actualValue}\n" +\
      "Actual value's type: ${actualValueType}\n" +\
      "Please check this parameter's schema:\n${schema}",
      {
        targetParameterNumber: targetParameterNumber,
        mixinOrFunctionName: mixinOrFunctionName,
        actualValue: targetParameter,
        actualValueType: typeof(targetParameter),
        schema: formatObject(schema)
      }
    ))
  }


  followingParametersWhichMustNotBe = namedParameters.followingParametersWhichMustNotBe

  if isNotNull(followingParametersWhichMustNotBe) {
    error(buildString(
      "The function/mixin '${mixinOrFunctionName}' must NOT have more than ${lastParameterNumber} parameters.\n" +\
      "Please check this parameter's schema:\n${schema}",
      {
        mixinOrFunctionName: mixinOrFunctionName,
        lastParameterNumber: targetParameterNumber,
        schema: formatObject(schema)
      }
    ))
  }


  generateErrorMessage(templateParameters)

    return buildString(
      "Invalid parameter at:" +\
      "\n  ●  Function/mixin: ${mixinOrFunctionName}" +\
      "\n  ●  Parameter number: ${targetParameterNumber}" +\
      "\n  ●  Parameter's property: ${parameterPropertyPath}" +\
      "\n${messageSpecificPart}" +\
      "\nPlease check the specification of this property: \n${propertyFormattedSpecification}",
      {
        mixinOrFunctionName: mixinOrFunctionName,
        targetParameterNumber: targetParameterNumber,
        parameterPropertyPath: templateParameters.parameterPropertyPath
        messageSpecificPart: templateParameters.messageSpecificPart,
        propertyFormattedSpecification: formatObject(templateParameters.propertySpecification)
      }
    )


  // [ Stylus theory ] If just prepare the string-type variable here like
  // targetParameterCurrentPropertyDotSeparatedPath = ""
  // it's value will reset to "" on each invocation of "validateSpecificDepthLevelOfTargetObjectTypeParameter"
  targetParameterCurrentPropertyDotSeparatedPathValueHolder = { value: "" }

  // [ Warning ] Skipping of curly brackets will cause 'unexpected "else"' error (possible Stylus bug)
  validateSpecificDepthLevelOfTargetObjectTypeParameter(objectOfCurrentLevel, levelSchema) {

    for propertyName, propertySpecification in levelSchema {

      targetParameterCurrentPropertyDotSeparatedPathValueHolder.value =\
          isEmptyString(targetParameterCurrentPropertyDotSeparatedPathValueHolder.value) ?\
          propertyName : targetParameterCurrentPropertyDotSeparatedPathValueHolder.value + "." + propertyName

      propertyValue = objectOfCurrentLevel[propertyName]

      if (isNull(propertyValue)) {

        if (propertySpecification.required) {
          error(generateErrorMessage({
            messageSpecificPart: "This property is required while actually has been omited or explicitly set to null."
            parameterPropertyPath: targetParameterCurrentPropertyDotSeparatedPathValueHolder.value,
            propertySpecification: propertySpecification
          }))
        }


        if (isNotNull(propertySpecification.requiredIf)) {

          // [ Stylus theory ] Functions in objects could be called if and only if destructured
          predicate = propertySpecification.requiredIf.predicate

          if (isTrue(predicate(objectOfCurrentLevel, targetParameter))) {
            error(generateErrorMessage({
              messageSpecificPart: buildString(
                "This property is required when ${requirementConditionDescription} and this condition has been satisfied " +\
                "while this proeprty has been omited or explicitly set to null.",
                { requirementConditionDescription:  propertySpecification.requiredIf.conditionDescription }
              ),
              parameterPropertyPath: targetParameterCurrentPropertyDotSeparatedPathValueHolder.value,
              propertySpecification: propertySpecification
            }))
          }
        }


        if (isNotNull(propertySpecification.defaultValue)) {
          targetParameter[propertyName] = propertySpecification.defaultValue
        }

        // [ Stylus theory ] Even if add "return" here, the execution will continue after "if-else" block
      } else {

        if (isNotNull(propertySpecification.incompatibleWith)) {
          for incompatiblePropertyDotSeparatedPath in propertySpecification.incompatibleWith {
            if (isNotNull(getObjectValueByDotSeparatedPathSafely(targetParameter, incompatiblePropertyDotSeparatedPath))) {
              error(generateErrorMessage({
                messageSpecificPart: buildString(
                  "This property is incompatible with property '${incompatiblePropertyDotSeparatedPath}'.",
                  { incompatiblePropertyDotSeparatedPath: incompatiblePropertyDotSeparatedPath }
                ),
                parameterPropertyPath: targetParameterCurrentPropertyDotSeparatedPathValueHolder.value,
                propertySpecification: propertySpecification
              }))
            }
          }
        }


        if (!isNonEmptyString(propertySpecification.type)) {
          error(buildString(
            "No valid type has been specified for the property ${propertyName} - it must be the non-empty string, " +\
            "the element of 'DataTypes--YDF' enumeration, while actual value is ${actualValue}.",
            {
              propertyName: propertyName,
              actualValue: propertySpecification.type
            }
          ))
        }


        // --- String --------------------------------------------------------------------------------------------------
        if (propertySpecification.type == DataTypes--YDF.string) {

          if (isTrue(propertySpecification.considerIdentifierAsString)) {
            propertyValue = "" + propertyValue
          }

          if (!isString(propertyValue)) {
            error(generateErrorMessage({
              messageSpecificPart: buildString(
                "This property must be the string while actually has type '${propertyActualType}' and value '${propertyValue}'.",
                {
                  propertyActualType: typeof(propertyValue),
                  propertyValue: propertyValue
                }
              ),
              parameterPropertyPath: targetParameterCurrentPropertyDotSeparatedPathValueHolder.value,
              propertySpecification: propertySpecification
            }))
          }

          if (
            isNotNull(propertySpecification.minimalCharactersCount) &&\
            length(propertyValue) < propertySpecification.minimalCharactersCount
          ) {
            error(generateErrorMessage({
              messageSpecificPart: buildString(
                "This string-type property has ${actualCharactersCount} characters while at least " +\
                "${minimalCharactersCount} required.",
                {
                  actualCharactersCount: length(propertyValue),
                  minimalCharactersCount: propertySpecification.minimalCharactersCount
                }
              ),
              parameterPropertyPath: targetParameterCurrentPropertyDotSeparatedPathValueHolder.value,
              propertySpecification: propertySpecification
            }))
          }

          if (
            isNotNull(propertySpecification.maximalCharactersCount) &&\
            length(propertyValue) > propertySpecification.maximalCharactersCount
          ) {
            error(generateErrorMessage({
              messageSpecificPart: buildString(
                "This string-type property has ${actualCharactersCount} characters while ${maximalCharactersCount} " +\
                "allowed as maximum.",
                {
                  actualCharactersCount: length(propertyValue),
                  maximalCharactersCount: propertySpecification.maximalCharactersCount
                }
              ),
              parameterPropertyPath: targetParameterCurrentPropertyDotSeparatedPathValueHolder.value,
              propertySpecification: propertySpecification
            }))
          }

          if (\
            isNotNull(propertySpecification.allowedAlternatives) &&\
            !hasPrimitivesArraySpecifiedElement(propertySpecification.allowedAlternatives, propertyValue)
          ) {
            error(generateErrorMessage({
              messageSpecificPart: buildString(
                "This string-type property has value '${actualValue}' while below alternatives only allowed:\n" +\
                "${formattedAllowedAlternatives}",
                {
                  actualValue: propertyValue,
                  formattedAllowedAlternatives: join(", ", propertySpecification.allowedAlternatives)
                }
              ),
              parameterPropertyPath: targetParameterCurrentPropertyDotSeparatedPathValueHolder.value,
              propertySpecification: propertySpecification
            }))
          }

        } else if (
          propertySpecification.type[0] == DataTypes--YDF.dimensionalQuantity ||\
          propertySpecification.type[0] == DataTypes--YDF.dimensionlessQuantity
        ) {

          if (
            propertySpecification.type[0] == DataTypes--YDF.dimensionalQuantity &&\
            propertySpecification.type[1] == DataTypes--YDF.dimensionlessQuantity
          ) {

            // --- Dimensional or dimensionless amount -----------------------------------------------------------------
            if (!isDimensionalOrDimensionlessQuantity(propertyValue)) {
              error(generateErrorMessage({
                messageSpecificPart: buildString(
                  "This property must be either dimensional or dimensionless amount while actually has type " +\
                  "'${propertyActualType}' and value '${propertyValue}'.",
                  {
                    propertyActualType: typeof(propertyValue),
                    propertyValue: propertyValue
                  }
                ),
                parameterPropertyPath: targetParameterCurrentPropertyDotSeparatedPathValueHolder.value,
                propertySpecification: propertySpecification
              }))
            }

          } else if (propertySpecification.type == DataTypes--YDF.dimensionalQuantity) {

            // --- Dimensional amount ----------------------------------------------------------------------------------

            // [ Stylus theory ] Direct usage if below expression in "if" statement will cause the Stylus bug
            // expected ")", got "{"
            hasValueDimensionalAmountType = isDimensionalQuantity(propertyValue, "MUST_CONSIDER_DIMENSIONLESS_ZERO_AS_DIMENSIONAL_QUANTITY")

            if (!hasValueDimensionalAmountType) {

              if (typeof(propertyValue) == "unit") {

                error(generateErrorMessage({
                  messageSpecificPart: "This property must have the units while actually is dimensionless.",
                  parameterPropertyPath: targetParameterCurrentPropertyDotSeparatedPathValueHolder.value,
                  propertySpecification: propertySpecification
                }))

              } else {

                error(generateErrorMessage({
                  messageSpecificPart: buildString(
                    "This property must be the dimensional amount while actually has type '${propertyActualType}' and value '${propertyValue}'.",
                    {
                      propertyActualType: typeof(propertyValue),
                      propertyValue: propertyValue
                    }
                  ),
                  parameterPropertyPath: targetParameterCurrentPropertyDotSeparatedPathValueHolder.value,
                  propertySpecification: propertySpecification
                }))

              }
            }

          } else if (propertySpecification.type == DataTypes--YDF.dimensionlessQuantity) {

            // --- Dimensionless amount --------------------------------------------------------------------------------
            if (!isDimensionlessQuantity(propertyValue)) {

              if (typeof(propertyValue) == "unit") {

                error(generateErrorMessage({
                  messageSpecificPart: "This property must not have the units while actually is dimensional.",
                  parameterPropertyPath: targetParameterCurrentPropertyDotSeparatedPathValueHolder.value,
                  propertySpecification: propertySpecification
                }))

              } else {

                error(generateErrorMessage({
                  messageSpecificPart: buildString(
                    "This property must be the dimensionless amount while actually has type '${propertyActualType}' and value '${propertyValue}'.",
                    {
                      propertyActualType: typeof(propertyValue),
                      propertyValue: propertyValue
                    }
                  ),
                  parameterPropertyPath: targetParameterCurrentPropertyDotSeparatedPathValueHolder.value,
                  propertySpecification: propertySpecification
                }))

              }
            }
          }


          if (
            isDimensionlessQuantity(propertySpecification.minimalValue) &&\
            propertyValue < propertySpecification.minimalValue
          ) {
            error(generateErrorMessage({
              messageSpecificPart: buildString(
                "This amount has value ${actualValue} while minimal allowed value is ${minimalValue}.",
                {
                  actualValue: propertyValue,
                  minimalValue: propertySpecification.minimalValue
                }
              ),
              parameterPropertyPath: targetParameterCurrentPropertyDotSeparatedPathValueHolder.value,
              propertySpecification: propertySpecification
            }))
          }

          if (
            isDimensionlessQuantity(propertySpecification.maximalValue) &&\
            propertyValue > propertySpecification.maximalValue
          ) {
            error(generateErrorMessage({
              messageSpecificPart: buildString(
                "This amount has value '${actualValue}' while maximal allowed value is ${maximalValue}.",
                {
                  actualValue: propertyValue,
                  maximalValue: propertySpecification.maximalValue
                }
              ),
              parameterPropertyPath: targetParameterCurrentPropertyDotSeparatedPathValueHolder.value,
              propertySpecification: propertySpecification
            }))
          }

        } else if (propertySpecification.type == DataTypes--YDF.boolean) {

          // --- Boolean -----------------------------------------------------------------------------------------------

          if (!isBoolean(propertyValue)) {
            error(generateErrorMessage({
              messageSpecificPart: buildString(
                "This property must be the boolean while actually has type '${propertyActualType}' and value '${propertyValue}'.",
                {
                  propertyActualType: typeof(propertyValue),
                  propertyValue: propertyValue
                }
              ),
              parameterPropertyPath: targetParameterCurrentPropertyDotSeparatedPathValueHolder.value,
              propertySpecification: propertySpecification
            }))
          }
        } else if (propertySpecification.type == DataTypes--YDF.colorDefinition) {

          // --- Color definition --------------------------------------------------------------------------------------
          if (typeof(propertyValue) != "rgba" && typeof(propertyValue) != "hsla") {
            error(generateErrorMessage({
              messageSpecificPart: buildString(
                "This property must be the color definition while actually has type '${propertyActualType}' and value '${propertyValue}'.",
                {
                  propertyActualType: typeof(propertyValue),
                  propertyValue: propertyValue
                }
              ),
              parameterPropertyPath: targetParameterCurrentPropertyDotSeparatedPathValueHolder.value,
              propertySpecification: propertySpecification
            }))
          }
        } else if (propertySpecification.type == DataTypes--YDF.object) {

          if (!isObject(propertyValue)) {
            error(buildString(
              "The property '${propertyName}' in parameters object of mixin/function '${mixinOrFunctionName}' must be the " +\
              "object while aclually it has type '${propertyRealType}' and value: ${propertyValue}",
              {
                propertyName: propertyName,
                mixinOrFunctionName: mixinOrFunctionName,
                propertyRealType: typeof(propertyValue),
                propertyValue: propertyValue
              }
            ))
          }

          validateSpecificDepthLevelOfTargetObjectTypeParameter(
            objectOfCurrentLevel: propertyValue,
            levelSchema: propertySpecification.properties
          )
        } else {

          error(generateErrorMessage({
            messageSpecificPart: buildString(
              "The type '${propertyActualType}' is unknown.",
              { propertyActualType: typeof(propertyValue) }
            ),
            parameterPropertyPath: targetParameterCurrentPropertyDotSeparatedPathValueHolder.value,
            propertySpecification: propertySpecification
          }))
        }
      }

      targetParameterCurrentPropertyDotSeparatedPathValueHolder.value = replace(".\w+$", "", targetParameterCurrentPropertyDotSeparatedPathValueHolder.value)
    }
  }


  validateSpecificDepthLevelOfTargetObjectTypeParameter(objectOfCurrentLevel: targetParameter, levelSchema: schema)
