computeExtraSpaceCausedByLineHeightAtTopOrBottom(compoundParameter, restParameters__MUST_NOT_BE...)

  validateObjectTypeParameter({
    mixinOrFunctionName: "applyTextGeometryWithoutExtraSpaceCausedByLineHeight",
    targetParameterNumber: 1,
    targetParameter: compoundParameter,
    schema: {

      fontSize: {
        type: DataTypes--YDF.dimensionalQuantity,
        required: true
      },

      lineHeight: {
        type: DataTypes--YDF.dimensionalQuantity DataTypes--YDF.dimensionlessQuantity,
        required: false
      },

      lineSpacing: {
        type: DataTypes--YDF.dimensionalQuantity DataTypes--YDF.dimensionlessQuantity,
        requiredIf: {
          predicate: @(compoundParameter) { return isNull(compoundParameter.lineHeight) },
          descriptionForLogging: "The 'lineHeight' is not specified"
        },
        incompatibleWith: "lineHeight"
      }

    },
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })

  fontSize = compoundParameter.fontSize
  lineSpacing = compoundParameter.lineSpacing
  lineHeight = compoundParameter.lineHeight


  if isNull(lineHeight)

    if removeUnitFromAmount(lineSpacing) == 0

      // === [ Branch A1 ] 0 line spacing
      return 0

    else if isDimensionlessQuantity(lineSpacing)

      // === [ Branch A2 ] Dimensionless line spacing
      return fontSize * lineSpacing / 2

    else if unit(fontSize) == unit(lineSpacing)

      // === [ Branch A3 ] Font size and line spacing of same unit
      return lineSpacing / 2

    else

      // === [ Branch A4 ] Font size and line spacing of different units
      return lineSpacing / 2

  else

    if removeUnitFromAmount(lineHeight) == 0

      // === [ Branch B1 ] 0 line height: basically it could not be but must be processed correctly
      return 0

    else if isDimensionlessQuantity(lineHeight)

      // === [ Branch B2 ] Dimensionless line height
      return ((fontSize * lineHeight) - fontSize) / 2


      if mustApplyDimensionalLineHeightIfPossible

        lineHeight = fontSize * lineHeight

    else if unit(fontSize) == unit(lineHeight)

      // === [ Branch B3 ] Font size and line height of same unit
      return (lineHeight - fontSize) / 2


    else

      // === [ Branch B4 ] Font size and line height of different units
      return buildCalcExpression(
        "(${ lineHeight } - ${ fontSize }) / 2" , { fontSize: fontSize, lineHeight: lineHeight }
      )
