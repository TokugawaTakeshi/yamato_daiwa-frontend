getLineSpacingByFontSizeAndLineHeight(compoundParameter, restParameters__MUST_NOT_BE...)

  validateObjectTypeParameter({
    mixinOrFunctionName: "getLineSpacingByFontSizeAndLineHeight",
    targetParameterNumber: 1,
    targetParameter: compoundParameter,
    schema: {
      fontSize: {
        type: DataTypes.dimensionalQuantity,
        required: true
      },
      lineHeight: {
        type: DataTypes.dimensionalQuantity DataTypes.dimensionlessQuantity,
        required: true
      },
      mustOutputDimensionalQuantityIfPossible: {
        type: DataTypes.boolean,
        required: true
      }
    },
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })

  fontSize = compoundParameter.fontSize
  lineHeight = compoundParameter.lineHeight
  mustOutputDimensionalQuantityIfPossible = compoundParameter.mustOutputDimensionalQuantityIfPossible

  isSpecifiedLineHeightTheDimensionalAmount = isDimensionalQuantity(
    lineHeight, "MUST_CONSIDER_DIMENSIONLESS_ZERO_AS_DIMENSIONAL_QUANTITY"
  )


  if isSpecifiedLineHeightTheDimensionalAmount

    // [ Approach ] According the above condition, `0` is being considered as dimensional amount for this case

    if lineHeight == 0

      if mustOutputDimensionalQuantityIfPossible

        appendUnit(0, unit(fontSize))

      else

        return 0


    else if unit(lineHeight) == unit(fontSize)

      if mustOutputDimensionalQuantityIfPossible

        return lineHeight - fontSize

      else

        return removeUnitFromAmount((lineHeight - fontSize)/fontSize)

    else

      return buildCalcExpression(
        "${ lineHeight } - ${ fontSize }",
        { lineHeight: lineHeight, fontSize: fontSize }
      )

  else if mustOutputDimensionalQuantityIfPossible

    return fontSize*lineHeight - fontSize

  else

    return lineHeight - 1
