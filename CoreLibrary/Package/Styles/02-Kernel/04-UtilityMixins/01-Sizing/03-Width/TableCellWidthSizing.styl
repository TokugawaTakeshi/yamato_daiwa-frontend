TableCellWidthSizing(compoundParameter, restParameters__MUST_NOT_BE...)

  validateObjectTypeParameter({
    mixinOrFunctionName: "TableCellWidthSizing",
    targetParameterNumber: 1,
    targetParameter: compoundParameter,
    schema: {

      fixedTotalWidth: {
        type: DataTypes--YDF.dimensionalQuantity
      },
      totalMinimalWidth: {
        type: DataTypes--YDF.dimensionalQuantity,
        incompatibleWith: "fixedTotalWidth"
      },
      totalMaximalWidth: {
        type: DataTypes--YDF.dimensionalQuantity,
        incompatibleWith: "fixedTotalWidth"
      },

      fixedContentWidth: {
        type: DataTypes--YDF.dimensionalQuantity,
        incompatibleWith: "fixedTotalWidth" "totalMinimalWidth" "totalMaximalWidth"
      },
      contentMinimalWidth: {
        type: DataTypes--YDF.dimensionalQuantity,
        incompatibleWith: "fixedTotalWidth" "totalMinimalWidth" "totalMaximalWidth" "fixedContentWidth"
      },
      contentMaximalWidth: {
        type: DataTypes--YDF.dimensionalQuantity,
        incompatibleWith: "fixedTotalWidth" "totalMinimalWidth" "totalMaximalWidth" "fixedContentWidth"
      },

      leftOrRightSymmetricBordersWidths: {
        type: DataTypes--YDF.dimensionalQuantity
      },
      leftBorderWidth: {
        type: DataTypes--YDF.dimensionalQuantity,
        incompatibleWith: "leftOrRightSymmetricBordersWidths"
      },
      rightBorderWidth: {
        type: DataTypes--YDF.dimensionalQuantity,
        incompatibleWith: "leftOrRightSymmetricBordersWidths"
      },

      leftOrRightSymmetricPaddings: {
        type: DataTypes--YDF.dimensionalQuantity
      },
      leftPadding: {
        type: DataTypes--YDF.dimensionalQuantity,
         incompatibleWith: "leftOrRightSymmetricPaddings"
      },
      rightPadding: {
        type: DataTypes--YDF.dimensionalQuantity,
         incompatibleWith: "leftOrRightSymmetricPaddings"
      },

      truncateOnOverflow: {
        type: DataTypes--YDF.boolean
      },
      displayEllipsisOnOverflow: {
        type: DataTypes--YDF.boolean
      }
    },
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })


  fixedTotalWidth = compoundParameter.fixedTotalWidth
  totalMinimalWidth = compoundParameter.totalMinimalWidth
  totalMaximalWidth = compoundParameter.totalMaximalWidth

  fixedContentWidth = compoundParameter.fixedContentWidth
  contentMinimalWidth = compoundParameter.contentMinimalWidth
  contentMaximalWidth = compoundParameter.contentMaximalWidth

  leftBorderWidth = substituteNull(compoundParameter.leftBorderWidth, compoundParameter.leftOrRightSymmetricBordersWidths)
  rightBorderWidth = substituteNull(compoundParameter.rightBorderWidth, compoundParameter.leftOrRightSymmetricBordersWidths)

  leftPadding = substituteNull(compoundParameter.leftPadding, compoundParameter.leftOrRightSymmetricPaddings)
  rightPadding = substituteNull(compoundParameter.rightPadding, compoundParameter.leftOrRightSymmetricPaddings)

  truncateOnOverflow = compoundParameter.truncateOnOverflow
  displayEllipsisOnOverflow = compoundParameter.displayEllipsisOnOverflow


  if isNotNull(fixedTotalWidth)

    width fixedTotalWidth

  else if isNotNull(fixedContentWidth)

    width: buildCalcExpression(
      "${fixedContentWidth} + ${leftBorderWidth} + ${rightBorderWidth} + ${leftPadding} + ${rightPadding}",
      {
        fixedContentWidth: fixedContentWidth,
        leftBorderWidth: leftBorderWidth,
        rightBorderWidth: rightBorderWidth,
        leftPadding: leftPadding,
        rightPadding: rightPadding
      }
    )


  if isNotNull(totalMinimalWidth)

    min-width totalMinimalWidth

  else if isNotNull(contentMinimalWidth)

    min-width: buildCalcExpression(
      "${contentMinimalWidth} + ${leftBorderWidth} + ${rightBorderWidth} + ${leftPadding} + ${rightPadding}",
      {
        contentMinimalWidth: contentMinimalWidth,
        leftBorderWidth: leftBorderWidth,
        rightBorderWidth: rightBorderWidth,
        leftPadding: leftPadding,
        rightPadding: rightPadding
      }
    )


  if isNotNull(totalMaximalWidth)

    max-width totalMaximalWidth

  else if isNotNull(contentMaximalWidth)

    max-width: buildCalcExpression(
      "${contentMaximalWidth} + ${leftBorderWidth} + ${rightBorderWidth} + ${leftPadding} + ${rightPadding}",
      {
        contentMaximalWidth: contentMaximalWidth,
        leftBorderWidth: leftBorderWidth,
        rightBorderWidth: rightBorderWidth,
        leftPadding: leftPadding,
        rightPadding: rightPadding
      }
    )


  applyIfNotNull({
    border-left-width: leftBorderWidth,
    border-right-width: rightBorderWidth,
    padding-left: leftPadding,
    padding-right: rightPadding
  })


  if truncateOnOverflow

    SingleLineElementOverflowTolerance({ displayEllipsis: displayEllipsisOnOverflow })
