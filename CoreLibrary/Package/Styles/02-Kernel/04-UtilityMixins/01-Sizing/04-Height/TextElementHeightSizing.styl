TextElementHeightSizing(properties, restParameters__MUST_NOT_BE...)

  validateObjectTypeParameter({
    mixinOrFunctionName: "TextElementHeightSizing",
    targetParameterNumber: 1,
    targetParameter: properties,
    schema: deeplyCloneAndOverrideObject(
      TextElementHeightSizingSpecificationSchema--YDF,
      {
        isExplicitBorderNoneDeclarationRequired: {
          type: DataTypes--YDF.boolean,
          defaultValue: false
        },
        mustSkipBordersApplying: {
          type: DataTypes--YDF.boolean,
          defaultValue: false
        }
      }
    ),
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })

  sizingType = properties.type
  fixedHeight = properties.fixedHeight


  // ━━━ Font ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  fontSize = properties.fontSize
  fixedLinesCount = properties.fixedLinesCount


  font-size fontSize


  // ━━━ Line height / line spacing ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  lineHeight = isNull(properties.lineHeight) ?\
      getLineHeightByFontSizeAndLineSpacing({
        fontSize: fontSize,
        lineSpacing: properties.lineSpacing,
        mustMakeLineHeightEqualToFontSizeWhenLineSpacingIs0:
            properties.mustMakeLineHeightEqualToFontSizeWhenLineSpacingIs0,
        mustOutputDimensionalQuantityIfPossible: properties.mustApplyDimensionalLineHeightIfPossible
      }) :
      properties.lineHeight


  line-height lineHeight


  // ━━━ Paddings ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  topBasicPadding = getFirstNonNullArrayElement(
    arrayConstructor__POLYFILL(
      getObjectValueByDotSeparatedPathSafely(properties.paddings, "all"),
      getObjectValueByDotSeparatedPathSafely(properties.paddings, "verticalSymmetric"),
      getObjectValueByDotSeparatedPathSafely(properties.paddings, "top")
    )
  )

  bottomBasicPadding = getFirstNonNullArrayElement(
    arrayConstructor__POLYFILL(
      getObjectValueByDotSeparatedPathSafely(properties.paddings, "all"),
      getObjectValueByDotSeparatedPathSafely(properties.paddings, "verticalSymmetric"),
      getObjectValueByDotSeparatedPathSafely(properties.paddings, "bottom")
    )
  )

  isExplicitPaddingZeroDeclarationRequired = properties.isExplicitPaddingZeroDeclarationRequired
  paddingsVerticalUpwardShifting = getObjectValueByDotSeparatedPathSafely(properties.paddings, "upwardShifting")

  extraSpaceCausedByLineHeightAtTopOrBottom = null

  if properties.mustReduceVerticalPaddingsByExtraSpaceCausedByLineHeight

    extraSpaceCausedByLineHeightAtTopOrBottom = computeExtraSpaceCausedByLineHeightAtTopOrBottom({
      fontSize: fontSize,
      lineHeight: properties.lineHeight,
      lineSpacing: properties.lineSpacing
    })


  if isNull(topBasicPadding) || removeUnitFromAmount(topBasicPadding) == 0

    if isExplicitPaddingZeroDeclarationRequired

      padding-top 0

  else

    correctedTopPaddings = buildCalcExpressionFromFragments({
      topBasicPadding: nullToZero(topBasicPadding),
      paddingsVerticalUpwardShifting: @() {
        if (isNotNull(paddingsVerticalUpwardShifting)) {
          return " - " + paddingsVerticalUpwardShifting
        }
      }
      mustReduceVerticalPaddingsByExtraSpaceCausedByLineHeight: @() {
        if (isNotNull(extraSpaceCausedByLineHeightAtTopOrBottom)) {
          return " - " + extraSpaceCausedByLineHeightAtTopOrBottom
        }
      }
    })

    padding-top correctedTopPaddings


  if isNull(topBasicPadding) || removeUnitFromAmount(bottomBasicPadding) == 0

    if isExplicitPaddingZeroDeclarationRequired

      padding-bottom 0

  else

    correctedBottomPaddings = buildCalcExpressionFromFragments({
      topBasicPadding: nullToZero(bottomBasicPadding),
      paddingsVerticalUpwardShifting: @() {
        if (isNotNull(paddingsVerticalUpwardShifting)) {
          return " + " + paddingsVerticalUpwardShifting
        }
      }
      mustReduceVerticalPaddingsByExtraSpaceCausedByLineHeight: @() {
        if (isNotNull(extraSpaceCausedByLineHeightAtTopOrBottom)) {
          return " - " + extraSpaceCausedByLineHeightAtTopOrBottom
        }
      }
    })

    padding-bottom correctedBottomPaddings


  // ━━━ Borders ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  if !properties.mustSkipBordersApplying

    topBorder = getFirstNonNullArrayElement(
      arrayConstructor__POLYFILL(
        getObjectValueByDotSeparatedPathSafely(properties.borders.thickness, "all"),
        getObjectValueByDotSeparatedPathSafely(properties.borders.thickness, "verticalSymmetric"),
        getObjectValueByDotSeparatedPathSafely(properties.borders.thickness, "top")
      )
    )

    bottomBorder = getFirstNonNullArrayElement(
      arrayConstructor__POLYFILL(
        getObjectValueByDotSeparatedPathSafely(properties.borders.thickness, "all"),
        getObjectValueByDotSeparatedPathSafely(properties.borders.thickness, "verticalSymmetric"),
        getObjectValueByDotSeparatedPathSafely(properties.borders.thickness, "bottom")
      )
    )

    isExplicitBorderNoneDeclarationRequired = properties.isExplicitBorderNoneDeclarationRequired

    if isNull(topBorder) || removeUnitFromAmount(topBorder) == 0

      if isExplicitBorderNoneDeclarationRequired

        border-top-width 0

    else

      border-top-width topBorder


    if isNull(bottomBorder) || removeUnitFromAmount(bottomBorder) == 0

      if isExplicitBorderNoneDeclarationRequired

        border-bottom-width 0

    else

      border-bottom-width bottomBorder


  // ━━━ Height ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  if sizingType == TextElementHeightSizingTypes--YDF.natural && properties.mustFixateHeight

    height: computeTotalHeightByTextElementHeightSizingSpecification(properties)

  else if sizingType == TextElementHeightSizingTypes--YDF.fixed

    height: fixedHeight


specifyTextElementHeightSizing(textElementHeightSizingSpecification, restParameters__MUST_NOT_BE...)

  validateObjectTypeParameter({
    mixinOrFunctionName: "specifyTextElementHeightSizing",
    targetParameterNumber: 1,
    targetParameter: textElementHeightSizingSpecification,
    schema: TextElementHeightSizingSpecificationSchema--YDF,
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })

  return {

    type: textElementHeightSizingSpecification.type,
    fixedHeight: textElementHeightSizingSpecification.fixedHeight,

    topOrBottomSymmetricBordersWidths: textElementHeightSizingSpecification.topOrBottomSymmetricBordersWidths,
    topBorderWidth: textElementHeightSizingSpecification.topBorderWidth,
    bottomBorderWidth: textElementHeightSizingSpecification.bottomBorderWidth,
    isExplicitBorderNoneDeclarationRequired: textElementHeightSizingSpecification.isExplicitBorderNoneDeclarationRequired,

    topOrBottomSymmetricPaddings: textElementHeightSizingSpecification.topOrBottomSymmetricPaddings,
    topPadding: textElementHeightSizingSpecification.topPadding,
    bottomPadding: textElementHeightSizingSpecification.bottomPadding,
    paddingsOffset: textElementHeightSizingSpecification.paddingsOffset,
    isExplicitPaddingZeroDeclarationRequired: textElementHeightSizingSpecification.isExplicitPaddingZeroDeclarationRequired,

    fontSize: textElementHeightSizingSpecification.fontSize,
    lineSpacing: textElementHeightSizingSpecification.lineSpacing,
    lineHeight: textElementHeightSizingSpecification.lineHeight,
    mustMakeLineHeightEqualToFontSizeWhenLineSpacingIs0: textElementHeightSizingSpecification.mustMakeLineHeightEqualToFontSizeWhenLineSpacingIs0,
    mustApplyDimensionalLineHeightIfPossible: textElementHeightSizingSpecification.mustApplyDimensionalLineHeightIfPossible,
    fixedLinesCount: textElementHeightSizingSpecification.fixedLinesCount,

    mustFixateHeight: textElementHeightSizingSpecification.mustFixateHeight

  }
