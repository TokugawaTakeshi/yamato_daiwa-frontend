PositionalRelationship(compoundParameter, restParameters__MUST_NOT_BE...)

  validateObjectTypeParameter({
    mixinOrFunctionName: "PositionalRelationship",
    targetParameterNumber: 1,
    targetParameter: compoundParameter,
    schema: {
      definitions: {
        type: DataTypes--YDF.string,
        required: true
      },
      contextSelector: {
        type: DataTypes--YDF.string,
        required: false
      },
      referenceElementSelector: {
        type: DataTypes--YDF.string,
        defaultValue: selector()
      }
    },
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })


  definitions = compoundParameter.definitions
  referenceElementSelector = compoundParameter.referenceElementSelector
  contextSelector = compoundParameter.contextSelector


  iterateAssociativeArray(definitions, @(targetElementSelector, definition) {

    if (isNotNull(definition.retireFromIt) && (isNotNull(definition.retireFromIt.x) || isNotNull(definition.retireFromIt.y))) {

      // [ Example ]
      // For:
      //    targetElementSelector: "h3"
      //    contextSelector: "EmailFormatting"
      //    referenceElementSelector: "p"
      // we need:
      //    .EmailFormatting h3 + p
      elementFromWhichToRetireSelector = isNull(contextSelector) ?\
          targetElementSelector : contextSelector + " " + targetElementSelector

      /{elementFromWhichToRetireSelector} + {referenceElementSelector} {
        if (definition.retireFromIt.usePaddingsInsteadOfMargins) {
          applyIfNotNull({
            padding-left: definition.retireFromIt.x,
            padding-top: definition.retireFromIt.y
          })
        } else {
          applyIfNotNull({
            margin-left: definition.retireFromIt.x,
            margin-top: definition.retireFromIt.y
          })
        }
      }
    }

    if (isNotNull(definition.pushItFromSelf) && (isNotNull(definition.pushItFromSelf.x) || isNotNull(definition.pushItFromSelf.y))) {

      // [ Example ]
      //    targetElementSelector: "h3"
      //    contextSelector: "EmailFormatting"
      //    referenceElementSelector: "p"
      // we need:
      //    .EmailFormatting p + 3
      elementFromWhichToRetireSelector = isNull(contextSelector) ?\
          referenceElementSelector : contextSelector + " " + referenceElementSelector

      /{elementFromWhichToRetireSelector} + {targetElementSelector} {
        if (definition.pushItFromSelf.usePaddingsInsteadOfMargins) {
          applyIfNotNull({
            padding-left: definition.pushItFromSelf.x,
            padding-top: definition.pushItFromSelf.y
          })
        } else {
          applyIfNotNull({
            margin-left: definition.pushItFromSelf.x,
            margin-top: definition.pushItFromSelf.y
          })
        }
      }
    }
  })
