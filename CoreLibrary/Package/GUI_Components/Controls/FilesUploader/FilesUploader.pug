include FilesUploader.class.pug


mixin FilesUploader--YDF(properties, statesSimulations)

  -

    const COMPONENT_ID = FilesUploader__YDF.generateComponentID();

    const {

      label,
      accessibilityGuidance,
      externalLabelHTML_ID,
      guidance,

      value,

      disabled,
      readonly,

      required,
      mustDisplayAppropriateBadgeIfInputIsRequired,
      mustDisplayAppropriateBadgeIfInputIsOptional,
      mustAddInvisibleBadgeForHeightEqualizingWhenNoBadge,
      minimalFilesCount,
      maximalFilesCount,
      supportedFilesNamesExtensions__leadingDotsAreOptional,

      noFilePickingButton,
      noDragAndDropArea,
      noDragAndDropAreaOnTouchScreens,

      inputElementHTML_ID = `${ COMPONENT_ID }-INPUT`,
      labelElementHTML_ID = `${ COMPONENT_ID }-LABEL`,

      theme,
      areThemesCSS_ClassesCommon ,
      geometricVariation,
      decorativeVariation

    } = processObjectTypeParameterOfPugMixin({
      rawParameter: properties,
      parameterNumber: 1,
      parameterName: "properties",
      parameterPropertiesSpecification: FilesUploader__YDF.propertiesSpecification,
      mixinName: FilesUploader__YDF.CSS_NAMESPACE
    });

    const {
      filesProcessingStatuses,
      singleImagePreview,
      multipleImagesPreview,
      invalidInputHighlightingIfAnyValidationErrorsMessages,
      validValueHighlightingIfNoValidationErrorsMessages,
      validationErrorsMessages,
      asynchronousValidationsStatuses
    } = processObjectTypeParameterOfPugMixin({
      rawParameter: statesSimulations,
      parameterNumber: 2,
      parameterName: "statesSimulations",
      parameterPropertiesSpecification: FilesUploader__YDF.statesSimulationsSpecification,
      mixinName: FilesUploader__YDF.CSS_NAMESPACE
    });

    const rootElementModifierCSS_Classes = [

      ...disabled ? [ `${ FilesUploader__YDF.CSS_NAMESPACE }__DisabledState` ] : [],

      ...invalidInputHighlightingIfAnyValidationErrorsMessages && validationErrorsMessages.length > 0 ?
          [ `${ FilesUploader__YDF.CSS_NAMESPACE }__InvalidValueState` ] : [],
      ...validValueHighlightingIfNoValidationErrorsMessages && validationErrorsMessages.length === 0 ?
          [ `${ FilesUploader__YDF.CSS_NAMESPACE }__ValueState` ] : [],

      ...ComponentsAuxiliaries.addThemeCSS_ClassToArrayIfMust({
        theme,
        allThemes: FilesUploader__YDF.Themes,
        CSS_Namespace: FilesUploader__YDF.CSS_NAMESPACE,
        areThemesCSS_ClassesCommon
      }),

      ...ComponentsAuxiliaries.addGeometricVariationCSS_ClassToArrayIfMust({
        geometricVariation,
        allGeometricVariations: FilesUploader__YDF.GeometricVariations,
        CSS_Namespace: FilesUploader__YDF.CSS_NAMESPACE
      }),

      ...ComponentsAuxiliaries.addDecorativeVariationCSS_ClassToArrayIfMust({
        decorativeVariation,
        allDecorativeVariations: FilesUploader__YDF.DecorativeVariations,
        CSS_Namespace: FilesUploader__YDF.CSS_NAMESPACE
      })

    ];


    /** @type { ?string } */
    let singleImagePreviewURI;

    if (isString(value)) {
      singleImagePreviewURI = value;
    } else if (isString(singleImagePreview)) {
      singleImagePreviewURI = singleImagePreview;
    } else if (singleImagePreview === true) {
      singleImagePreviewURI = DummyImagesURIs.highAndNarrow;
    }

    const supportedFilesNamesExtensionsWihtoutLeadingDots = supportedFilesNamesExtensions__leadingDotsAreOptional.map(
      fileNameExtension => removeSpecificCharacterFromCertainPosition({
        targetString: fileNameExtension,
        targetCharacter: ".",
        fromFirstPosition: true
      })
    )

    const acceptAttributeValueForInputTag = supportedFilesNamesExtensionsWihtoutLeadingDots.length > 0 ?
        `.${ supportedFilesNamesExtensionsWihtoutLeadingDots.join(", .") }` : "*";


  +CompoundControlShell--YDF(
    {

      label,
      guidance,

      required,
      mustDisplayAppropriateBadgeIfInputIsRequired,
      mustDisplayAppropriateBadgeIfInputIsOptional,
      mustAddInvisibleBadgeForHeightEqualizingWhenNoBadge,

      coreElementHTML_ID: inputElementHTML_ID,
      labelElementHTML_ID,

      theme: FilesUploader__YDF.selfAndChildrenComponentsThemesCorrespondence.compoundControlShell[theme],
      areThemesCSS_ClassesCommon,
      geometricVariation: FilesUploader__YDF.selfAndChildrenComponentsGeometricVariationsCorrespondence.
          compoundControlShell[geometricVariation],
      decorativeVariation: FilesUploader__YDF.selfAndChildrenComponentsDecorativeVariationsCorrespondence.
          compoundControlShell[decorativeVariation]

    },
    {
      invalidInputHighlightingIfAnyValidationErrorsMessages,
      validValueHighlightingIfNoValidationErrorsMessages,
      validationErrorsMessages,
      asynchronousValidationsStatuses
    }
  ).FilesUploader--YDF&attributes(attributes)(
    class=rootElementModifierCSS_Classes
    data-initial_value=value
  )

    if !noFilePickingButton

      -
        const filePickingButtonLabel = FilesUploader__YDF.localization.buttons.filePicking.
            buildLabel({ areMultipleFileAllowed: maximalFilesCount !== 1 })

      +Button--YDF({
        theme: FilesUploader__YDF.selfAndChildrenComponentsThemesCorrespondence.button[theme],
        geometricVariation: FilesUploader__YDF.selfAndChildrenComponentsGeometricVariationsCorrespondence.
            button[geometricVariation],
        decorativeVariation: FilesUploader__YDF.selfAndChildrenComponentsDecorativeVariationsCorrespondence.
            button[decorativeVariation],
      }).FilesUploader--YDF-FilePickingButton
        +FileAdding--YDF_Icon.Button--YDF-SVG_Icon
        span.Button--YDF-Label= filePickingButtonLabel


    if !noDragAndDropArea

      .FilesUploader--YDF-DragAndDropArea(
        tabindex="0",
        class=(noDragAndDropAreaOnTouchScreens ? "FilesUploader--YDF-DragAndDropArea__HiddenOnTouchScreens" : null)
      )
        +FileAdding--YDF_Icon.FilesUploader--YDF-DragAndDropArea-Icon
        p.FilesUploader--YDF-DragAndDropArea-Guidance=FilesUploader__YDF.localization.uploadSingleFileByDragAndDropGuidance

    if singleImagePreviewURI

      .FilesUploader--YDF-SingleImagePreviewer

        img.FilesUploader--YDF-SingleImagePreviewer-Image(
          src=singleImagePreviewURI
          alt=FilesUploader__YDF.localization.singleImagePreviewer.image.alternatingText
        )

      if !(required && maximalFilesCount === 1)
        +Button--YDF.FilesUploader--YDF-FileDeletingButton(
          aria-label=FilesUploader__YDF.localization.singleImagePreviewer.deletingButton.accessibilityGuidance
        )
          +TrashCan__Filled--YDF_Icon.Button--YDF-SVG_Icon
          span.Button--YDF-Label= FilesUploader__YDF.localization.singleImagePreviewer.deletingButton.label

    if multipleImagesPreview

      ul.FilesUploader--YDF-ImagesPreviewFlow(
        aria-label="Images preview"
      )

        each imageURI in Array.from(Object.values(DummyImagesURIs)).concat(Array.from(Object.values(DummyImagesURIs)))

          li.FilesUploader--YDF-PreviewCard

            .FilesUploader--YDF-PreviewCard-SizingAndDefaultBackgroundProvidingWrapper
              img.FilesUploader--YDF-PreviewCard-Image(
                src=imageURI
                alt="Image preview"
              )

            +Button--YDF({ label: "Delete" }).FilesUploader--YDF-PreviewCard-Button


    input.FilesUploader--YDF-HiddenInputElement(
      type="file"
      accept=acceptAttributeValueForInputTag
      multiple=(maximalFilesCount !== 1)
      required=required
      aria-label=accessibilityGuidance
      aria-labelledby=externalLabelHTML_ID
      id=inputElementHTML_ID
    )
