@require "Themes/Regular/GeometricVariations/CompoundControlShell-RegularTheme-RegularGeometry.styl"

@require "Themes/Regular/GeometricVariations/CompoundControlShell-RegularTheme-SmallGeometry.styl"
@require "Themes/Regular/DecorativeVariations/CompoundControlShell-RegularTheme-RegularDecoration.styl"


CompoundControlShell--YDF = {

  defaultProperties: {

    themes: {
      regular: {

        componentIndependentCSS_Class: "RegularTheme--YDF",

        geometricVariations: {
          regular: CompoundControlShell-RegularTheme-RegularGeometry--YDF,
          small: CompoundControlShell-RegularTheme-SmallGeometry--YDF
        },

        decorativeVariations: {
          regular: CompoundControlShell-RegularTheme-RegularDecoration--YDF
        }

      }
    }

  },

  defaultOptions: {
    themeIndependentStylesOnly: false,
    areThemesCSS_ClassesCommon: false,
    loadingPlaceholder: true,
    themeIndependentGeometricVariations: true
  }

}


provideCompoundControlShellYDF_Component(
  preset = CompoundControlShell--YDF.defaultProperties,
  overridings = {},
  options = CompoundControlShell--YDF.defaultOptions,
  restParameters__MUST_NOT_BE...
)

  properties = deeplyCloneAndOverrideObject(preset, overridings)

  validateObjectTypeParameter({
    mixinOrFunctionName: "provideCompoundControlShellYDF_Component",
    targetParameterNumber: 3,
    targetParameter: options,
    schema: {
      themeIndependentStylesOnly: {
        type: DataTypes--YDF.boolean,
        defaultValue: CompoundControlShell--YDF.defaultOptions.themeIndependentStylesOnly
      },
      areThemesCSS_ClassesCommon: {
        type: DataTypes--YDF.boolean,
        defaultValue: CompoundControlShell--YDF.defaultOptions.externalThemes
      },
      loadingPlaceholder: {
        type: DataTypes--YDF.boolean,
        defaultValue: CompoundControlShell--YDF.defaultOptions.loadingPlaceholder
      },
      themeIndependentGeometricVariations: {
        type: DataTypes--YDF.boolean,
        defaultValue: CompoundControlShell--YDF.defaultOptions.themeIndependentGeometricVariations
      }
    },
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })


  // ━━━ Methods ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  applyBasicRules()

    .CompoundControlShell--YDF-Header

      display flex
      align-items center


    .CompoundControlShell--YDF-Badge

      flex-shrink 0


    .CompoundControlShell--YDF-Badge__Invisible

      visibility hidden


  // ─── Geometry ──────────────────────────────────────────────────────────────────────────────────────────────────────
  applyGeometricVariation(themeName, variationName, variation)

    VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING = buildString(
      "CompoundControlShell.${ themeName }Theme.${ variationName }Geometry",
      { themeName: themeName, variationName: variationName }
    )

    CONTEXT_SELECTOR = selector() == "&" ? null : selector()


    +provideDefaultSelectorWhenRootAndApply(".Badge--YDF")

      applyMixinStoredInObjectIfItIsNotNull(variation.rootElement.customDeclarations)


    .CompoundControlShell--YDF-Label

      applyTextGeometryWithoutExtraSpaceCausedByLineHeight(
        merge(
          extractAndValidateObjectProperties({
            targetObject: variation,
            targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
            extracts: {
              fontSize: { dotSeparatedPath: "label.text.size", required: true },
              lineSpacing: { dotSeparatedPath: "label.text.lineSpacing", required: false },
              lineHeight: { dotSeparatedPath: "label.text.lineHeight", mustBeInsteadOf: "label.text.lineSpacing" }
            }
          }),
          { mustAllowWordsBreakingAnywhere: true }
        )
      )

      applyMixinStoredInObjectIfItIsNotNull(variation.label.customDeclarations)


    .CompoundControlShell--YDF-Badge

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          bordersSizing: {
            dotSeparatedPath: "badge.borders",
            applier: @(bordersSizngSpecification) { BordersSizing(bordersSizngSpecification) }
          },
          paddings: {
            dotSeparatedPath: "badge.paddings",
            applier: @(paddingsSpecification) { Paddings(paddingsSpecification) }
          },
          margin-left: {
            dotSeparatedPath: "badge.spacing.left",
            required: true
          }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.badge.customDeclarations)


    .CompoundControlShell--YDF-Guidance

      applyTextGeometryWithoutExtraSpaceCausedByLineHeight(
        merge(
          extractAndValidateObjectProperties({
            targetObject: variation,
            targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
            extracts: {
              fontSize: { dotSeparatedPath: "guidance.text.size", required: true },
              lineSpacing: { dotSeparatedPath: "guidance.text.lineSpacing", required: false },
              lineHeight: { dotSeparatedPath: "guidance.text.lineHeight", mustBeInsteadOf: "guidance.text.lineSpacing" }
            }
          }),
          { mustAllowWordsBreakingAnywhere: true }
        )
      )

      applyMixinStoredInObjectIfItIsNotNull(variation.guidance.customDeclarations)


      /

        retireFrom({
          targetElementSelector: ".CompoundControlShell--YDF-Header",
          contextSelector: CONTEXT_SELECTOR,
          referenceElementSelector: ".CompoundControlShell--YDF-Guidance",
          y: extractAndValidateObjectProperties({
            targetObject: variation,
            targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
            extracts: {
              spacingAfterHeading: { dotSeparatedPath: "guidance.spacing.afterHeader", required: true },
            }
          }).spacingAfterHeading
        })


    .CompoundControlShell--YDF-MainSlotCustomizableWrapper

      /

        retireFrom({
          definitions:\
              (".CompoundControlShell--YDF-Header:not(:has(.CompoundControlShell--YDF-Badge))" {
                y: extractAndValidateObjectProperties({
                  targetObject: variation,
                  targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
                  extracts: {
                    spacingAfterHeading: { dotSeparatedPath: "mainSlot.spacing.afterHeaderWithoutBadge", required: true },
                  }
                }).spacingAfterHeading
              })\
              (".CompoundControlShell--YDF-Header:has(.CompoundControlShell--YDF-Badge)" {
                y: extractAndValidateObjectProperties({
                  targetObject: variation,
                  targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
                  extracts: {
                    spacingAfterHeading: { dotSeparatedPath: "mainSlot.spacing.afterHeaderWithBadge", required: true },
                  }
                }).spacingAfterHeading
              })\
              (".CompoundControlShell--YDF-Guidance" {
                y: extractAndValidateObjectProperties({
                  targetObject: variation,
                  targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
                  extracts: {
                    spacingAfterHeading: { dotSeparatedPath: "mainSlot.spacing.afterGuidance", required: true },
                  }
                }).spacingAfterHeading
              }),
          referenceElementSelector: ".CompoundControlShell--YDF-MainSlotCustomizableWrapper",
          contextSelector: CONTEXT_SELECTOR
        })


    .CompoundControlShell--YDF-ValidationErrorsMessagesList

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          margin-top: { dotSeparatedPath: "errorsList.spacing.afterMainSlot", required: true }
        }
      })


    .CompoundControlShell--YDF-ValidationErrorMessage

      applyTextGeometryWithoutExtraSpaceCausedByLineHeight(
        merge(
          extractAndValidateObjectProperties({
            targetObject: variation,
            targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
            extracts: {
              fontSize: { dotSeparatedPath: "errorsList.item.text.size", required: true },
              lineSpacing: { dotSeparatedPath: "errorsList.item.text.lineSpacing", required: false },
              lineHeight: { dotSeparatedPath: "errorsList.item.text.lineHeight", mustBeInsteadOf: "errorsList.item.text.lineSpacing" }
            }
          }),
          { mustAllowWordsBreakingAnywhere: true }
        )
      )

      retireFromElementWithSameSelector({
        contextSelector: CONTEXT_SELECTOR,
        referenceElementSelector: ".CompoundControlShell--YDF-ValidationErrorMessage"
        y: extractAndValidateObjectProperties({
          targetObject: variation,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          extracts: {
            spacingBetweenSelfInstances: { dotSeparatedPath: "errorsList.item.spacing.betweenSelfInstances", required: true },
          }
        }).spacingBetweenSelfInstances
      })


  // ─── Decoration ────────────────────────────────────────────────────────────────────────────────────────────────────
  applyDecorativeVariation(themeName, variationName, variation)

    VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING = buildString(
      "CompoundControlShell.${ themeName }Theme.${ variationName }Decoration",
      {
        themeName: themeName,
        variationName: variationName
      }
    )

    .CompoundControlShell--YDF-Label

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          font-weight: { dotSeparatedPath: "label.text.weight", required: false },
          color: { dotSeparatedPath: "label.text.color", required: false }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.label.customDeclarations)


    .CompoundControlShell--YDF-Badge__Required

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          border-style: { dotSeparatedPath: "badge.required.borders.style", required: true },
          border-color: { dotSeparatedPath: "badge.required.borders.color", required: true },
          background-color: { dotSeparatedPath: "badge.required.background.color", required: true },
          font-weight: { dotSeparatedPath: "badge.required.text.fontWeight", required: false },
          color: { dotSeparatedPath: "badge.required.text.color", required: true }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.badge.required.customDeclarations)


    .CompoundControlShell--YDF-Badge__Optional

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          border-style: { dotSeparatedPath: "badge.optional.borders.style", required: true },
          border-color: { dotSeparatedPath: "badge.optional.borders.color", required: true },
          background-color: { dotSeparatedPath: "badge.optional.background.color", required: true },
          font-weight: { dotSeparatedPath: "badge.optional.text.fontWeight", required: false },
          color: { dotSeparatedPath: "badge.optional.text.color", required: true }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.badge.optional.customDeclarations)


    .CompoundControlShell--YDF-Guidance

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          font-weight: { dotSeparatedPath: "guidance.text.weight", required: false },
          color: { dotSeparatedPath: "guidance.text.color", required: false }
        }
      })


    .CompoundControlShell--YDF-Guidance-AccentedFragment

      font-weight bold
      color: YDF_ColorPalette.red.slightlyDark


    .CompoundControlShell--YDF-Guidance-Link

      color: JQueryUI_BaseTheme.clickableElements.activeState.borderColor
      text-decoration-color: rgba(JQueryUI_BaseTheme.clickableElements.activeState.borderColor, 0.5)
      text-underline-offset 2px
      text-decoration-line underline


      &:hover

        color: JQueryUI_BaseTheme.clickableElements.activeState.background
        text-decoration-color: rgba(JQueryUI_BaseTheme.clickableElements.activeState.background, 0.75)


      &:focus

        color: JQueryUI_BaseTheme.clickableElements.activeState.background
        text-decoration: rgba(JQueryUI_BaseTheme.clickableElements.activeState.background, 0.75)
        box-shadow: 0 0 0 2px JQueryUI_BaseTheme.clickableElements.focusState.shadowColor


      &:active

        color: JQueryUI_BaseTheme.warning.fontColor
        text-decoration-color: rgba(JQueryUI_BaseTheme.clickableElements.activeState.background, 0.75)


    .CompoundControlShell--YDF-ValidationErrorMessage

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          font-weight: { dotSeparatedPath: "errorMessage.text.weight", required: false },
          color: { dotSeparatedPath: "errorMessage.text.color", required: false }
        }
      })


    .CompoundControlShell--YDF-AsynchronousValidationsStatusesList

      margin-top 0.8rem


    .CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item

      display flex
      align-items center
      column-gap 8px

      retireFromElementWithSameSelector({ y: 8px })


      &-LoadingIndicator

        LoadingIndicator--YDF-setCustomColor(
          LoadingIndicator--YDF.Types.variableWidthArcSpinner,
          YDF_ColorPalette.deepSkyBlue.slightlyDark
        )

        flex-shrink 0


      &-Icon

        width 24px
        height 24px

        flex-shrink 0


        ../.CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item__InProgressState &

          fill: YDF_ColorPalette.deepSkyBlue.slightlyDark


        ../.CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item__SucceededAndValidState &

          fill: YDF_ColorPalette.mint.slightlyDark


        ../.CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item__MalfunctionState &

          fill: YDF_ColorPalette.red.slightlyDark


      &-Text

        font-size 14px
        font-weight bold


        ../.CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item__InProgressState &

          color: YDF_ColorPalette.deepSkyBlue.slightlyDark


        ../.CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item__SucceededAndValidState &

          color: YDF_ColorPalette.mint.slightlyDark


        ../.CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item__MalfunctionState &

          color: YDF_ColorPalette.red.slightlyDark


  // ━━━ Applying ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  applyBasicRules()

  if !options.themeIndependentStylesOnly

    applyComponentThemes({
      CSS_Namespace: "CompoundControlShell--YDF",
      themes: properties.themes,
      applyGeometricVariation: applyGeometricVariation,
      applyDecorativeVariation: applyDecorativeVariation
    })
