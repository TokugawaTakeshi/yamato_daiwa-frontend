-

  class Button__YDF {

    /**
     * @type { string }
     * @public
     * @readonly
     */
    static CSS_NAMESPACE = "Button--YDF";

    /**
     * @type {
     *   Readonly<{
     *     regular: string;
     *     submit: string;
     *     inputButton: string;
     *     inputSubmit: string;
     *     inputReset: string;
     *   }>
     * }
     * @readonly
     */
    static HTML_Types = {
      regular: "BUTTON",
      submit: "SUBMIT",
      inputButton: "INPUT_BUTTON",
      inputSubmit: "INPUT_SUBMIT",
      inputReset: "INPUT_RESET"
    };


    /* ━━━ Theming ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */

    /**
     * @type { { [themeName: string]: string } }
     * @public
     * @description If you want to define new themes, do it only via `defineThemes` static method.
     */
    static Themes = { regular: "REGULAR" };

    /**
     * @param { Array<string> } themesNames
     * @return { typeof Badge__YDF }
     * @public
     */
    static defineThemes(themesNames) {
      return ComponentsAuxiliaries.defineThemes(themesNames, Button__YDF);
    }

    /**
     * @type { boolean } [ areThemesCSS_ClassesCommon = ComponentsAuxiliaries.areComponentsThemesCommon ]
     * @private
     * */
    static areThemesCSS_ClassesCommon = ComponentsAuxiliaries.areComponentsThemesCommon;

    /**
     * @returns { typeof Badge__YDF }
     * @public
     * */
    static considerThemesAsCommon() {
      Button__YDF.areThemesCSS_ClassesCommon = true;
      return Button__YDF;
    }


    /* ─── Geometry ───────────────────────────────────────────────────────────────────────────────────────────────── */

    /**
     * @type { { [geometricVariationName: string]: string } }
     * @public
     * @description If you want to define new geometric variations, do it only via `defineGeometricVariations` static method.
     */
    static GeometricVariations = {
      regular: "REGULAR",
      small: "SMALL",
      linkLike: "LINK_LIKE"
    };

    /**
     * @param { Array<string> } geometricVariationsNames
     * @return { typeof Badge__YDF }
     */
    static defineGeometricVariations(geometricVariationsNames) {
      return ComponentsAuxiliaries.defineGeometricVariations(geometricVariationsNames, Button__YDF);
    }

    /**
     * @type {
     *   Readonly<{
     *     pillShape: string;
     *     squareShape: string;
     *     squareShapeUnlessOverflowed: string;
     *     singleLine: string;
     *     noLeftBorderAndRoundings: string;
     *     noRightBorderAndRoundings: string;
     *     noRoundings: string;
     *   }>
     * }
     * @readonly
     */
    static GeometricModifiers = {
      pillShape: "PILL_SHAPE",
      squareShape: "SQUARE_SHAPE",
      squareShapeUnlessOverflowed: "SQUARE_SHAPE_UNLESS_OVERFLOWED",
      singleLine: "SINGLE_LINE",
      noLeftBorderAndRoundings: "NO_LEFT_BORDER_AND_ROUNDINGS",
      noRightBorderAndRoundings: "NO_RIGHT_BORDER_AND_ROUNDINGS",
      noTopBorderAndRoundings: "NO_TOP_BORDER_AND_ROUNDINGS",
      noBottomBorderAndRoundings: "NO_BOTTOM_BORDER_AND_ROUNDINGS",
      noRoundings: "NO_ROUNDINGS",
      horizontallyShrinkable: "HORIZONTALLY_SHRINKABLE"
    };


    /* ─── Decoration ─────────────────────────────────────────────────────────────────────────────────────────────── */

    /**
     * @type { { [decorativeVariationsName: string]: string } }
     * @public
     * @description If you want to define new decorative variations, do it only via `defineDecorativeVariations` static method.
     */
    static DecorativeVariations = {
      regular: "REGULAR",
      accented: "ACCENTED",
      danger: "DANGER",
      linkLike: "LINK_LIKE"
    };

    /**
     * @param { Array<string> } decorativeVariationsNames
     * @return { typeof Badge__YDF }
     */
    static defineDecorativeVariations(decorativeVariationsNames) {
      return ComponentsAuxiliaries.defineDecorativeVariations(decorativeVariationsNames, Button__YDF);
    }

    /**
     * @type {
     *   Readonly<{
     *     bordersDisguising: string;
     *     noBackground: string;
     *   }>
     * }
     * @readonly
     */
    static DecorativeModifiers = {
      bordersDisguising: "BORDERS_DISGUISING",
      noBackground: "NO_BACKGROUND",
      noBackgroundInDefaultState: "NO_BACKGROUND_IN_DEFAULT_STATE"
    };


    /* ━━━ Properties specification ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */

    /**
     * @type { RawObjectDataProcessor.PropertiesSpecification }
     * @public
     * @readonly
     * */
    static propertiesSpecification = {

      HTML_Type: {
        type: String,
        defaultValue: Button__YDF.HTML_Types.regular,
        allowedAlternatives: Object.entries(Button__YDF.HTML_Types).
            map(([key, value]) => ({ key: `Button__YDF.HTML_Types.${ key }`, value }))
      },

      label: {
        type: RawObjectDataProcessor.ValuesTypesIDs.oneOf,
        requiredIf: {
          predicate: properties =>
              properties.HTML_Type === Button__YDF.HTML_Types.inputButton ||
              properties.HTML_Type === Button__YDF.HTML_Types.inputSubmit ||
              properties.HTML_Type === Button__YDF.HTML_Types.inputReset,
          descriptionForLogging:
              "`HTML_Type` property specified with `Button__YDF.HTML_Types.inputButton`, " +
                "`Button__YDF.HTML_Types.inputSubmit` or `Button__YDF.HTML_Types.inputReset`"
        },
        alternatives: [
          {
            type: String,
            minimalCharactersCount: 1
          },
          {
            type: Number,
            numbersSet: RawObjectDataProcessor.NumbersSets.anyRealNumber
          }
        ]
      },

      accessibilityGuidance: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      URI: {
        type: String,
        required: false,
        /* [ Theory ] It could be the "#" */
        minimalCharactersCount: 1
      },

      mustOpenLinkInNewTab: {
        type: Boolean,
        defaultValue: false
      },

      mustRequestNotFollowLinkForCrawlingToSearchEngine: {
        type: Boolean,
        defaultValue: false
      },

      disabled: {
        type: Boolean,
        defaultValue: false
      },

      toggled: {
        type: Boolean,
        defaultValue: false
      },

      theme: {
        type: String,
        defaultValue: Button__YDF.Themes.regular,
        allowedAlternatives: Object.
            entries(Button__YDF.Themes).
            map(([ key, value ]) => ({ key: `Button__YDF.Themes.${ key }`, value }))
      },

      areThemesCSS_ClassesCommon: {
        type: Boolean,
        defaultValue: ComponentsAuxiliaries.areComponentsThemesCommon
      },

      geometricVariation: {
        type: String,
        defaultValue: Button__YDF.GeometricVariations.regular,
        allowedAlternatives: Object.
            entries(Button__YDF.GeometricVariations).
            map(([ key, value ]) => ({ key: `Button__YDF.GeometricVariations.${ key }`, value }))
      },

      geometricModifiers: {
        type: Array,
        defaultValue: [],
        element: {
          type: String,
          allowedAlternatives: Object.values(Button__YDF.GeometricModifiers)
        }
      },

      decorativeVariation: {
        type: String,
        defaultValue: Button__YDF.DecorativeVariations.regular,
        allowedAlternatives: Object.
            entries(Button__YDF.DecorativeVariations).
            map(([ key, value ]) => ({ key: `Button__YDF.DecorativeVariations.${ key }`, value }))
      },

      decorativeModifiers: {
        type: Array,
        defaultValue: [],
        element: {
          type: String,
          allowedAlternatives: Object.values(Button__YDF.DecorativeModifiers)
        }
      }

    };

  }
