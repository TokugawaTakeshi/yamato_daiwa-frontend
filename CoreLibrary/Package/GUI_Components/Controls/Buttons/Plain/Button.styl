@require "Themes/Regular/GeometricVariations/Button-RegularTheme-RegularGeometry.styl"
@require "Themes/Regular/GeometricVariations/Button-RegularTheme-SmallGeometry.styl"
@require "Themes/Regular/GeometricVariations/Button-RegularTheme-LinkLikeGeometry.styl"

@require "Themes/Regular/DecorativeVariations/Button-RegularTheme-RegularDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Button-RegularTheme-DangerDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Button-RegularTheme-AccentedDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Button-RegularTheme-LinkLikeDecoration.styl"


Button--YDF = {

  CSS_NAMESPACE: "Button--YDF",

  defaultProperties: {

    themes: {
      regular: {

        componentIndependentCSS_Class: "RegularTheme--YDF",

        geometricVariations: {
          regular: Button-RegularTheme-RegularGeometry--YDF,
          small: Button-RegularTheme-SmallGeometry--YDF,
          linkLike: Button-RegularTheme-LinkLikeGeometry--YDF
        },

        decorativeVariations: {
          regular: Button-RegularTheme-RegularDecoration--YDF,
          accented: Button-RegularTheme-AccentedDecoration--YDF,
          danger: Button-RegularTheme-DangerDecoration--YDF,
          linkLike: Button-RegularTheme-LinkLikeDecoration--YDF
        }

      }
    }

  },

  defaultOptions: {
    themeIndependentStylesOnly: false,
    areThemesCSS_ClassesCommon: false,
    loadingPlaceholder: true,
    themeIndependentGeometricVariations: true,
    geometricModifiers: {
      pillShape: true,
      squareShape: true,
      squareShapeUnlessOverflowed: true,
      singleLine: true,
      noLeftBorderAndRoundings: true,
      noRightBorderAndRoundings: true,
      noTopBorderAndRoundings: true,
      noBottomBorderAndRoundings: true,
      noRoundings: true,
      horizontallyShrinkable: true
    },
    decorativeModifiers: {
      bordersDisguising: true,
      noBackground: true
    }
  }

}


provideButtonYDF_Component(
  preset = Button--YDF.defaultProperties,
  overridings = {},
  options = Button--YDF.defaultOptions,
  restParameters__MUST_NOT_BE...
)

  properties = deeplyCloneAndOverrideObject(preset, overridings)

  validateObjectTypeParameter({
    mixinOrFunctionName: "provideButtonYDF_Component",
    targetParameterNumber: 3,
    targetParameter: options,
    schema: {
      themeIndependentStylesOnly: {
        type: DataTypes--YDF.boolean,
        defaultValue: Button--YDF.defaultOptions.themeIndependentStylesOnly
      },
      areThemesCSS_ClassesCommon: {
        type: DataTypes--YDF.boolean,
        defaultValue: Button--YDF.defaultOptions.externalThemes
      },
      loadingPlaceholder: {
        type: DataTypes--YDF.boolean,
        defaultValue: Button--YDF.defaultOptions.loadingPlaceholder
      },
      themeIndependentGeometricVariations: {
        type: DataTypes--YDF.boolean,
        defaultValue: Button--YDF.defaultOptions.themeIndependentGeometricVariations
      },
      geometricModifiers: {
        type: DataTypes--YDF.object,
        properties: {
          pillShape: {
            type: DataTypes--YDF.boolean,
            defaultValue: Button--YDF.defaultOptions.geometricModifiers.pillShape
          },
          squareShape: {
            type: DataTypes--YDF.boolean,
            defaultValue: Button--YDF.defaultOptions.geometricModifiers.squareShape
          },
          squareShapeUnlessOverflowed: {
            type: DataTypes--YDF.boolean,
            defaultValue: Button--YDF.defaultOptions.geometricModifiers.squareShape
          },
          singleLine: {
            type: DataTypes--YDF.boolean,
            defaultValue: Button--YDF.defaultOptions.geometricModifiers.singleLine
          },
          noLeftBorderAndRoundings: {
            type: DataTypes--YDF.boolean,
            defaultValue: Button--YDF.defaultOptions.geometricModifiers.noLeftBorderAndRoundings
          },
          noRightBorderAndRoundings: {
            type: DataTypes--YDF.boolean,
            defaultValue: Button--YDF.defaultOptions.geometricModifiers.noRightBorderAndRoundings
          },
          noTopBorderAndRoundings: {
            type: DataTypes--YDF.boolean,
            defaultValue: Button--YDF.defaultOptions.geometricModifiers.noTopBorderAndRoundings
          },
          noBottomBorderAndRoundings: {
            type: DataTypes--YDF.boolean,
            defaultValue: Button--YDF.defaultOptions.geometricModifiers.noBottomBorderAndRoundings
          },
          horizontallyShrinkable: {
            type: DataTypes--YDF.boolean,
            defaultValue: Button--YDF.defaultOptions.geometricModifiers.horizontallyShrinkable
          }
        },
        defaultValue: Button--YDF.defaultOptions.geometricModifiers
      },
      decorativeModifiers: {
        type: DataTypes--YDF.object,
        properties: {
          bordersDisguising: {
            type: DataTypes--YDF.boolean,
            defaultValue: Button--YDF.defaultOptions.decorativeModifiers.bordersDisguising
          },
          noBackground: {
            type: DataTypes--YDF.boolean,
            defaultValue: Button--YDF.defaultOptions.decorativeModifiers.noBackground
          }
        },
        defaultValue: Button--YDF.defaultOptions.decorativeModifiers
      }
    },
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })


  // ━━━ Methods ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  applyBasicRules()

    .Button--YDF

      ButtonLikeElementsPrimer()

      cursor pointer


      &:focus-visible

        outline none


      &:disabled

        cursor not-allowed


    button.Button--YDF,
    a.Button--YDF

      display inline-flex
      justify-content center
      align-items center


    if !options.geometricModifiers.singleLine

      input

        word-break break-all


    a

      &.Button--YDF__DisabledState

        pointer-events none


    .Button--YDF-Label

      /a &

        text-align center


      if !options.geometricModifiers.singleLine

        word-break break-all


    input

      white-space normal


    .Button--YDF-SVG_Icon

      flex-shrink 0


    if options.loadingPlaceholder

      .Button--YDF__LoadingPlaceholder

        display inline-block


  // ─── Geometry ──────────────────────────────────────────────────────────────────────────────────────────────────────
  applyGeometricVariation(themeName, variationName, variation)

    VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING = buildString(
      "Button.${ themeName }Theme.${ variationName }Geometry",
      { themeName: themeName, variationName: variationName }
    )

    CONTEXT_SELECTOR = selector() == "&" ? null : selector()

    cachedValidReusables = extractAndValidateObjectProperties({
      targetObject: variation,
      targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
      extracts: {
        textSize: {
          dotSeparatedPath: "label.text.size",
          required: true
        },
        lineSpacing: {
          dotSeparatedPath: "label.text.lineSpacing",
          mustBeInsteadOf: "label.text.lineHeight"
        },
        lineHeight: {
          dotSeparatedPath: "label.text.lineHeight",
          required: false
        },
        topSpacing: {
          dotSeparatedPath: "label.spacing.top",
          required: false,
          incompatibleWith: "label.spacing.verticalSymmetric"
        },
        bottomSpacing: {
          dotSeparatedPath: "label.spacing.bottom",
          required: false,
          incompatibleWith: "label.spacing.verticalSymmetric"
        },
        verticalSymmetricSpacingAsTopSpacing: {
          newName: "topSpacing",
          dotSeparatedPath: "label.spacing.verticalSymmetric",
          required: false
        },
        verticalSymmetricSpacingAsBottomSpacing: {
          newName: "bottomSpacing",
          dotSeparatedPath: "label.spacing.verticalSymmetric",
          required: false
        },
        labelUpwardShifting: {
          dotSeparatedPath: "label.spacing.upwardShifting",
          required: false
        },
        horizontalSymmetricLabelSpacingWhenItIsLone: {
          dotSeparatedPath: "label.spacing.horizontalSymmetricWhenLone",
          required: true
        },
        leftSpacingWhenLabelGoingFirst: {
          dotSeparatedPath: "label.spacing.leftWhenGoingFirst",
          required: true
        },
        rightSpacingWhenLabelGoingLast: {
          dotSeparatedPath: "label.spacing.rightWhenGoingLast",
          required: false
        },
        bordersSizing: {
          dotSeparatedPath: "rootElement.borders",
          required: false
        }
      }
    })

    HEIGHT = computeTotalHeightByTextElementHeightSizingSpecification({
      type: TextElementHeightSizingTypes--YDF.natural,
      borders: cachedValidReusables.bordersSizing,
      paddings: {
        top: cachedValidReusables.topSpacing,
        bottom: cachedValidReusables.bottomSpacing,
        upwardShifting: cachedValidReusables.upwardShifting
      },
      fontSize: cachedValidReusables.textSize,
      lineHeight: 1
    })


    +provideDefaultSelectorWhenRootAndApply("." + Button--YDF.CSS_NAMESPACE)

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          min-width: { dotSeparatedPath: "rootElement.minimalWidth", required: false }
        }
      })

      BordersSizing(cachedValidReusables.bordersSizing)

      applyMixinStoredInObjectIfItIsNotNull(variation.rootElement.customDeclarations)


    /input{getCurrentSelectorSubstitutingRoot("." + Button--YDF.CSS_NAMESPACE)}

      //* [ Approach ] The vertical padding will be defined by `TextElementHeightSizing` herewith it will be
      //*   the corrected value respecting the extra space caused the line height
      Paddings({ horizontalSymmetric: cachedValidReusables.horizontalSymmetricLabelSpacingWhenItIsLone })

      //* [ Approach ] For both single line and multi line modes the settings will be same because the text overflow
      //*   already has been set in the common declarations.
      TextElementHeightSizing({
        type: TextElementHeightSizingTypes--YDF.natural,
        fontSize: cachedValidReusables.textSize,
        lineHeight: cachedValidReusables.lineHeight,
        lineSpacing: cachedValidReusables.lineSpacing,
        borders: cachedValidReusables.bordersSizing,
        mustSkipBordersApplying: true,
        paddings: {
          top: cachedValidReusables.topSpacing,
          bottom: cachedValidReusables.topSpacing,
          upwardShifting: cachedValidReusables.labelUpwardShifting
        },
        mustReduceVerticalPaddingsByExtraSpaceCausedByLineHeight: true
      })


    if options.geometricModifiers.pillShape

      &.Button--YDF__PillShapeGeometricModifier

        TEXT_SIZE_TO_BORDER_RADIUS_RATIO = extractAndValidateObjectProperties({
          targetObject: variation,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          extracts: {
            textSizeToBorderRadiusRatio: {
              dotSeparatedPath: "rootElement.modifiers.pillShape.textSizeToBorderRadiusRatio", required: true
            }
          }
        }).textSizeToBorderRadiusRatio

        border-radius cachedValidReusables.textSize * TEXT_SIZE_TO_BORDER_RADIUS_RATIO


    if options.geometricModifiers.squareShape

      &.Button--YDF__SquareShapeUnlessOverflowedGeometricModifier,
      &.Button--YDF__SquareShapeGeometricModifier

        min-width HEIGHT


      &.Button--YDF__SquareShapeGeometricModifier

        max-width HEIGHT


    .Button--YDF-Label

      MultilineValueLabelStyles()

        applyTextGeometryWithoutExtraSpaceCausedByLineHeight({
          fontSize: cachedValidReusables.textSize,
          lineSpacing: cachedValidReusables.lineSpacing,
          lineHeight: cachedValidReusables.lineHeight,
          paddingsWhichMustBeDecreasedInsteadOfAddingOfNegativeMargins: {
            top: cachedValidReusables.topSpacing,
            bottom: cachedValidReusables.topSpacing,
            upwardShifting: cachedValidReusables.labelUpwardShifting
          },
          mustAllowWordsBreakingAnywhere: !options.geometricModifiers.singleLine
        })

      if !options.geometricModifiers.singleLine

        MultilineValueLabelStyles()


      applyMixinStoredInObjectIfItIsNotNull(variation.label.customDeclarations)


      &:first-child:last-child

        margin-left: cachedValidReusables.horizontalSymmetricLabelSpacingWhenItIsLone
        margin-right: cachedValidReusables.horizontalSymmetricLabelSpacingWhenItIsLone


      &:first-child:not(:last-child)

        margin-left: cachedValidReusables.leftSpacingWhenLabelGoingFirst


      &:not(:first-child):last-child

        margin-right: cachedValidReusables.rightSpacingWhenLabelGoingLast


      if options.geometricModifiers.singleLine

        /{CONTEXT_SELECTOR}.Button--YDF__SingleLineGeometricModifier .Button--YDF-Label

          font-size: cachedValidReusables.textSize

          Paddings({
            top: cachedValidReusables.topSpacing,
            bottom: cachedValidReusables.topSpacing
          })


        /{CONTEXT_SELECTOR}:not(.Button--YDF__SingleLineGeometricModifier) .Button--YDF-Label

          MultilineValueLabelStyles()


    .Button--YDF-SVG_Icon

      iconHeight = extractAndValidateObjectProperties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        extracts: {
          iconHeight: {
            dotSeparatedPath: "SVG_Icon.default.height",
            required: true
          }
        }
      }).iconHeight

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          width: {
            dotSeparatedPath: "SVG_Icon.default.width",
            required: false
          }
        }
      })

      height: iconHeight


      if isNotNull(variation.SVG_Icon.default.spacing.leftWhenGoingFirst)

        &:first-child:not(:last-child)

          margin-left: variation.SVG_Icon.default.spacing.leftWhenGoingFirst


      if isNotNull(variation.SVG_Icon.default.spacing.rightWhenGoingLast)

        &:last-child:not(:first-child)

          margin-right: variation.SVG_Icon.default.spacing.rightWhenGoingLast


      &:first-child:last-child

        //* [ Initial equation ] labelFontSize + labelTopSpacing = iconHeight + iconTopSpacing
        //* [ Formula ] iconPopMargin = labelFontSize + labelTopSpacing - iconHeight
        //* The `labelUpwardShifting` could be eliminated because it presents in bots sides of initial equation. */
        topMargin = buildCalcExpressionFromFragments({
          textSize: cachedValidReusables.textSize,
          basicTopSpacing: @() {
            if (isNotNull(cachedValidReusables.topSpacing)) {
              return " + " + cachedValidReusables.topSpacing
            }
          },
          iconHeight: @() { return " - " + iconHeight }
        })

        bottomMargin = buildCalcExpressionFromFragments({
          textSize: cachedValidReusables.textSize,
          basicBottomSpacing: @() {
            if (isNotNull(cachedValidReusables.bottomSpacing)) {
              return " + " + cachedValidReusables.bottomSpacing
            }
          },
          iconHeight: @() { return " - " + iconHeight }
        })

        validateAndAssignStoredInObjectCSS_Properties({
          targetObject: variation,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          assigments: {
            margin-left: {
              dotSeparatedPath: "SVG_Icon.default.spacing.horizontalSymmetricWhenLone",
              required: false
            },
            margin-right: {
              dotSeparatedPath: "SVG_Icon.default.spacing.horizontalSymmetricWhenLone",
              required: false
            }
          }
        })

        margin-top: topMargin
        margin-bottom: bottomMargin


        if isNotNull(variation.SVG_Icon.default.spacing.horizontalSymmetricWhenLone)

          margin-left: variation.SVG_Icon.default.spacing.horizontalSymmetricWhenLone
          margin-right: variation.SVG_Icon.default.spacing.horizontalSymmetricWhenLone


      /

        PositionalRelationship({
          definitions: (
            ".Button--YDF-Label" {
              retireFromIt: { x: variation.SVG_Icon.default.spacing.afterLabel },
              pushItFromSelf: { x: variation.SVG_Icon.default.spacing.beforeLabel }
            }
          ),
          contextSelector: CONTEXT_SELECTOR,
          referenceElementSelector: ".Button--YDF-SVG_Icon"
        })


      applyMixinStoredInObjectIfItIsNotNull(variation.SVG_Icon.customDeclarations)


      specialIcons = substituteNull(variation.SVG_Icon.specials, {})

      for iconSpecificCSS_Class, dimensions in specialIcons

        &.{iconSpecificCSS_Class}

          validateAndAssignStoredInObjectCSS_Properties({
            targetObject: dimensions,
            targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING + ".variation.SVG_Icon.specials." + iconSpecificCSS_Class ,
            assigments: {
              width: {
                dotSeparatedPath: "width",
                required: false
              },
              height: {
                dotSeparatedPath: "height",
                requiredIf: {
                  predicate: @(variation) { return isNull(getObjectValueByDotSeparatedPathSafely(dimensions, "width")) },
                  conditionDescription: "'width' is null"
                }
              }
            }
          })

  //* [ Approach ] Being the modifiers, must be applied after theme-dependent styles. */
  applyThemeIndependentGeometricModifiers()

    if options.geometricModifiers.noLeftBorderAndRoundings

      .Button--YDF__NoLeftBorderAndRoundingsGeometricModifier

        border-left none
        BorderLeftFilletsRadius(0)


    if options.geometricModifiers.noRightBorderAndRoundings

      .Button--YDF__NoRightBorderAndRoundingsGeometricModifier

        border-right none
        BorderRightFilletsRadius(0)


    if options.geometricModifiers.noTopBorderAndRoundings

      .Button--YDF__NoTopBorderAndRoundingsGeometricModifier

        border-top none
        BorderTopFilletsRadius(0)


    if options.geometricModifiers.noBottomBorderAndRoundings

      .Button--YDF__NoBottomBorderAndRoundingsGeometricModifier

        border-bottom none
        BorderBottomFilletsRadius(0)


    if options.geometricModifiers.squareShape

      input.Button--YDF__SquareShapeGeometricModifier,
      input.Button--YDF__SquareShapeUnlessOverflowedGeometricModifier

        SingleLineTextElementOverflowSafety({ displayEllipsis: false })
        padding 0


      .Button--YDF__SquareShapeGeometricModifier .Button--YDF-Label,
      .Button--YDF__SquareShapeUnlessOverflowedGeometricModifier .Button--YDF-Label

        SingleLineTextElementOverflowSafety({ displayEllipsis: false })
        margin-right 0 !important
        margin-left 0 !important


    if options.geometricModifiers.singleLine

      input

        &.Button--YDF__SingleLineGeometricModifier

          SingleLineTextElementOverflowSafety({ displayEllipsis: true })


        &:not(.Button--YDF__SingleLineGeometricModifier)

          word-break break-all


      .Button--YDF-Label

        /.Button--YDF__SingleLineGeometricModifier &

          SingleLineTextElementOverflowSafety({ displayEllipsis: true })


        /:not(.Button--YDF__SingleLineGeometricModifier) &

          word-break break-all


    if options.geometricModifiers.noRoundings

      .Button--YDF__NoRoundingsGeometricModifier

        border-radius 0


    if options.geometricModifiers.horizontallyShrinkable

      .Button--YDF__HorizontallyShrinkableGeometricModifier

        min-width 0


        .Button--YDF-Label,
        .Button--YDF-SVG_Icon

          margin-left 0 !important
          margin-right 0 !important


  // ─── Decoration ────────────────────────────────────────────────────────────────────────────────────────────────────
  applyDecorativeVariation(themeName, variationName, variation)

    VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING = buildString(
      "Button.${ themeName }Theme.${ variationName }Decoration",
      {
        themeName: themeName,
        variationName: variationName
      }
    )

    StateDependentStyles(state)

      Declarations()

        validateAndAssignStoredInObjectCSS_Properties({
          targetObject: variation[state].rootElement,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          assigments: {
            color: { dotSeparatedPath: "text.color", required: false },
            underline: { dotSeparatedPath: "text.underline", required: false, applier: applyObjectTypeUnderlineDefinition },
            background-color: { dotSeparatedPath: "background.color", required: false },
            background-image: { dotSeparatedPath: "background.image", required: false },
            border-style: { dotSeparatedPath: "borders.style", required: false },
            border-color: { dotSeparatedPath: "borders.color", required: false },
            outline: { dotSeparatedPath: "outline", required: false, applier: applyOutlineObjectTypeDefinition },
            box-shadow: { dotSeparatedPath: "shadow", required: false, applier: applyObjectTypeBoxShadowDefinition }
          }
        })

        applyMixinStoredInObjectIfItIsNotNull(variation[state].rootElement.customDeclarations)


        ROOT_ELEMENT_REFERENCE__NULL_IF_NOT_REQUIRED = selector() == "." + Button--YDF.CSS_NAMESPACE ? "/" : null

        { ROOT_ELEMENT_REFERENCE__NULL_IF_NOT_REQUIRED }.Button--YDF-SVG_Icon

          validateAndAssignStoredInObjectCSS_Properties({
            targetObject: variation[state].SVG_Icon,
            targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
            assigments: {
              fill: { dotSeparatedPath: "color", required: false }
            }
          })

          applyMixinStoredInObjectIfItIsNotNull(variation[state].SVG_Icon.customDeclarations)


      +provideDefaultSelectorWhenRootAndApply("." + Button--YDF.CSS_NAMESPACE)

        if (state == "defaultState")

          Declarations(state)

        else if (state == "hoverState")

          &:hover

            Declarations(state)

        else if (state == "focusVisibleState")

          &:focus-visible

            Declarations(state)

        else if (state == "activeState")

          &:active,
          &[aria-pressed="true"]

            Declarations(state)

        else if (state == "disabledState")

          &:disabled,
          &.Button--YDF__DisabledState

            Declarations(state)


    for state in variation

      StateDependentStyles(state)


  //* [ Approach ] Being the modifiers, must be applied after theme-dependent styles. */
  applyThemeIndependentDecorativeModifiers()

    if options.decorativeModifiers.bordersDisguising

      .Button--YDF__BordersDisguisingDecorativeModifier

        border-color transparent


    if options.decorativeModifiers.noBackground

      .Button--YDF__NoBackgroundDecorativeModifier

        background none


  // ━━━ Applying ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  applyBasicRules()

  if !options.themeIndependentStylesOnly

    applyComponentThemes({
      CSS_Namespace: "Button--YDF",
      themes: properties.themes,
      areThemesCSS_ClassesCommon: options.externalThemes,
      themeIndependentGeometricVariations: options.themeIndependentGeometricVariations,
      applyGeometricVariation: applyGeometricVariation,
      applyDecorativeVariation: applyDecorativeVariation
    })

  applyThemeIndependentGeometricModifiers()
  applyThemeIndependentDecorativeModifiers()
