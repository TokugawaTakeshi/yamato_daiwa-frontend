include Button.class.pug


mixin Button--YDF(properties)

  -

    const {

      /** @var { Array<Button__YDF.HTML_Types> } [ HTML_Type = Button__YDF.HTML_Types.regular ] */
      HTML_Type,

      /** @var { string | number | undefined } label */
      label,

      /** @var { string | undefined } accessibilityGuidance */
      accessibilityGuidance,

      /** @var { string | undefined } URI */
      URI,

      /** @var { boolean } [ mustOpenLinkInNewTab = false ] */
      mustOpenLinkInNewTab,

      /** @var { boolean } [ mustRequestNotFollowLinkForCrawlingToSearchEngine = false ] */
      mustRequestNotFollowLinkForCrawlingToSearchEngine,

      /** @var { boolean } [ disabled = false ] */
      disabled,

      /** @var { boolean } [ toggled = false ] */
      toggled,

      /** @var { string } [ theme = Button__YDF.Themes.regular ] */
      theme,

      /** @var { boolean } [ areThemesCSS_ClassesCommon = Button__YDF.areThemesCSS_ClassesCommon ] */
      areThemesCSS_ClassesCommon,

      /** @var { string } [ geometricVariation = Button__YDF.GeometricVariations.regular ] */
      geometricVariation,

      /** @var { Array<Button__YDF.GeometricModifiers> } [ geometricModifiers = [] ] */
      geometricModifiers,

      /** @var { string } [ decorativeVariation = Button__YDF.DecorativeVariations.regular ] */
      decorativeVariation,

      /** @var { Array<Button__YDF.DecorativeModifiers> } [ decorativeModifiers = [] ] */
      decorativeModifiers

    } = processObjectTypeParameterOfPugMixin({
      rawParameter: properties,
      parameterNumber: 1,
      parameterName: "properties",
      parameterPropertiesSpecification: Button__YDF.propertiesSpecification,
      mixinName: Button__YDF.CSS_NAMESPACE
    });

    /** @type boolean */
    let isButtonTheTagNameOfRootElement = false;

    /** @type boolean */
    let isInputTheTagNameOfRootElement = false;

    /** @type boolean */
    let isAnchorTheTagNameOfRootElement = false;

    /** @type string */
    let typeAttributeValueOfButtonOrInputElement;


    if (URI) {

      isAnchorTheTagNameOfRootElement = true;

    } else {

      switch (HTML_Type) {

        case Button__YDF.HTML_Types.regular: {

          isButtonTheTagNameOfRootElement = true;
          typeAttributeValueOfButtonOrInputElement = "button"

          break;
        }

        case Button__YDF.HTML_Types.submit: {

          isButtonTheTagNameOfRootElement = true;
          typeAttributeValueOfButtonOrInputElement = "submit"

          break;
        }

        case Button__YDF.HTML_Types.inputButton: {

          isInputTheTagNameOfRootElement = true;
          typeAttributeValueOfButtonOrInputElement = "button";

          break;

        }

        case Button__YDF.HTML_Types.inputSubmit: {

          isInputTheTagNameOfRootElement = true;
          typeAttributeValueOfButtonOrInputElement = "submit";

          break;

        }

        case Button__YDF.HTML_Types.inputReset: {

          isInputTheTagNameOfRootElement = true;
          typeAttributeValueOfButtonOrInputElement = "reset";

        }

      }

    }

    /** @type { Array<string> } */
    const commonCSS_Classes = [

      Button__YDF.CSS_NAMESPACE,

      ...isAnchorTheTagNameOfRootElement && disabled ? [ `${ Button__YDF.CSS_NAMESPACE }__DisabledState` ] : [],

      ...ComponentsAuxiliaries.addThemeCSS_ClassToArrayIfMust({
        theme,
        allThemes: Button__YDF.Themes,
        CSS_Namespace: Button__YDF.CSS_NAMESPACE,
        areThemesCSS_ClassesCommon
      }),

      ...ComponentsAuxiliaries.addGeometricVariationCSS_ClassToArrayIfMust({
        geometricVariation,
        allGeometricVariations: Button__YDF.GeometricVariations,
        CSS_Namespace: Button__YDF.CSS_NAMESPACE
      }),

      ...ComponentsAuxiliaries.generateDemandedGeometricModifiersCSS_Classes(Button__YDF.CSS_NAMESPACE, geometricModifiers),

      ...ComponentsAuxiliaries.addDecorativeVariationCSS_ClassToArrayIfMust({
        decorativeVariation,
        allDecorativeVariations: Button__YDF.DecorativeVariations,
        CSS_Namespace: Button__YDF.CSS_NAMESPACE
      }),

      ...ComponentsAuxiliaries.generateDemandedDecorativeModifiersCSS_Classes(Button__YDF.CSS_NAMESPACE, decorativeModifiers)

    ];


  if isButtonTheTagNameOfRootElement

    button&attributes(attributes)(
      type= typeAttributeValueOfButtonOrInputElement
      disabled= disabled
      aria-label= accessibilityGuidance
      aria-pressed=(toggled && "true")
      class= commonCSS_Classes
    )

      if block

        block

      else if label

        span.Button--YDF-Label= label

  else if isAnchorTheTagNameOfRootElement

    -

      /** @var { string | undefined } */
      let targetAttributeValue;

      /** @var { string | undefined } */
      let relAttributeValue;

      /** @type { Array<string> } */
      let relationshipsBetweenLinkedResourceAndCurrentDocument = [];

      /** @see https://stackoverflow.com/q/57628890/4818123 */
      /** @see https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-target-blank.md */
      if (mustOpenLinkInNewTab) {
        relationshipsBetweenLinkedResourceAndCurrentDocument.push("noopener", "noreferrer");
        targetAttributeValue = "_blank";
      }

      /** @see https://backlinko.com/nofollow-link */
      /** @see https://www.botify.com/learn/basics/what-is-a-nofollow-tag */
      if (mustRequestNotFollowLinkForCrawlingToSearchEngine) {
        relationshipsBetweenLinkedResourceAndCurrentDocument.push("nofollow");
      }

      if (relationshipsBetweenLinkedResourceAndCurrentDocument.length > 0) {
        relAttributeValue = relationshipsBetweenLinkedResourceAndCurrentDocument.join(" ");
      }

    a&attributes(attributes)(
      href=(disabled ? null : URI)
      target=targetAttributeValue
      rel=relAttributeValue
      tabindex = disabled && -1
      aria-label= accessibilityGuidance
      aria-disabled= disabled ? "true" : undefined
      aria-pressed=(toggled && "true")
      class= [ ...commonCSS_Classes, disabled ? [ `${ Button__YDF.CSS_NAMESPACE }__DisabledState` ] : [] ]
    )

      if block

        block

      else if label

        span.Button--YDF-Label= label

  else if isInputTheTagNameOfRootElement

    input&attributes(attributes)(
      type= typeAttributeValueOfButtonOrInputElement
      value= label
      disabled= disabled
      aria-pressed=(toggled && "true")
      class= commonCSS_Classes
    )


mixin Button--YDF-LoadingPlaceholder(properties)

  -

    const {

      /** @var { string } [ theme = Button__YDF.Themes.regular ] */
      theme,

      /** @var { boolean } [ areThemesCSS_ClassesCommon = Button__YDF.areThemesCSS_ClassesCommon ] */
      areThemesCSS_ClassesCommon,

      /** @var { string } [ geometricVariation = Button__YDF.GeometricVariations.regular ] */
      geometricVariation,

      /** @var { Array<Button__YDF.GeometricModifiers> } [ geometricModifiers = [] ] */
      geometricModifiers

    } = processObjectTypeParameterOfPugMixin({
      rawParameter: properties,
      parameterNumber: 1,
      parameterName: "properties",
      parameterPropertiesSpecification: {
        theme: Button__YDF.propertiesSpecification.theme,
        areThemesCSS_ClassesCommon: Button__YDF.propertiesSpecification.areThemesCSS_ClassesCommon,
        geometricVariation: Button__YDF.propertiesSpecification.geometricVariation,
        geometricModifiers: Button__YDF.propertiesSpecification.geometricModifiers
      },
      mixinName: `${ Button__YDF.CSS_NAMESPACE }-LoadingPlaceholder`
    });

    /** @type { Array<string> } */
    const rootElementModifierCSS_Classes = [

      ...ComponentsAuxiliaries.addThemeCSS_ClassToArrayIfMust({
        theme,
        allThemes: Button__YDF.Themes,
        CSS_Namespace: Button__YDF.CSS_NAMESPACE,
        areThemesCSS_ClassesCommon
      }),

      ...ComponentsAuxiliaries.addGeometricVariationCSS_ClassToArrayIfMust({
        geometricVariation,
        allGeometricVariations: Button__YDF.GeometricVariations,
        CSS_Namespace: Button__YDF.CSS_NAMESPACE
      }),

      ...ComponentsAuxiliaries.generateDemandedGeometricModifiersCSS_Classes(Button__YDF.CSS_NAMESPACE, geometricModifiers)

    ];


  span.Button--YDF.Button--YDF__LoadingPlaceholder(
    class= rootElementModifierCSS_Classes
  )&attributes(attributes)
