include NumberBox.class.pug


//- [ Reference ] https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/spinbutton_role
//- [ Reference ] https://www.w3.org/WAI/ARIA/apg/patterns/spinbutton/
//- [ Reference ] https://technology.blog.gov.uk/2020/02/24/why-the-gov-uk-design-system-team-changed-the-input-type-for-numbers/
//- [ Reference ] https://mui.com/base-ui/react-number-input/?srsltid=AfmBOooWipxvbIVUgd6ZjoNc7yPpFZBdzuvoRgfkvKXqGXmiM5ofLGww
mixin NumberBox--YDF(properties, statesSimulations)

  -

    const COMPONENT_ID = NumberBox__YDF.generateComponentID();

    const {

      /** @var { string | undefined } */
      label,

      /** @var { string | undefined } */
      accessibilityGuidance,

      /** @var { string | undefined } */
      externalLabelHTML_ID,

      /** @var { string | undefined } */
      guidance,

      /** @var { string | undefined } */
      placeholder,

      /** @var { number | string } [ initialValue = 0 ] Could be something like "{{ foo }}" in the MVC case. */
      initialValue,

      /** @var { boolean } [ disabled = false ] */
      disabled,

      /** @var { boolean } [ readonly = false ] */
      readonly,

      /** @var { boolean } [ readonly = false ] */
      required,

      /** @var { boolean } [ mustDisplayAppropriateBadgeIfInputIsRequired = false ] */
      mustDisplayAppropriateBadgeIfInputIsRequired,

      /** @var { boolean } [ mustDisplayAppropriateBadgeIfInputIsOptional = false ] */
      mustDisplayAppropriateBadgeIfInputIsOptional,

      /** @var { boolean } [ mustAddInvisibleBadgeForHeightEqualizingWhenNoBadge = false ] */
      mustAddInvisibleBadgeForHeightEqualizingWhenNoBadge,

      /** @var { number } [ step = 1 ] */
      step,

      /** @var { number } [ minimalValue = -Number.MIN_SAFE_INTEGER ] */
      minimalValue,

      /** @var { number } [ maximalValue = -Number.MAX_SAFE_INTEGER ] */
      maximalValue,

      /** @var { string | undefined } */
      nativeInputElementHTML_ID,

      /** @var { string | undefined } */
      labelElementHTML_ID,

      /** @var { string } [ theme = NumberBox__YDF.Themes.regular ] */
      theme,

      /** @var { boolean } [ areThemesCSS_ClassesCommon = NumberBox__YDF.areThemesCSS_ClassesCommon ] */
      areThemesCSS_ClassesCommon,

      /** @var { string } [ geometricVariation = NumberBox__YDF.GeometricVariations.regular ] */
      geometricVariation,

      /** @var { NumberBox__YDF.Orientations } [ geometricVariation = NumberBox__YDF.Orientations.horizontal ] */
      orientation,

      /** @var { string } [ decorativeVariation = NumberBox__YDF.DecorativeVariations.regular ] */
      decorativeVariation

    } = processObjectTypeParameterOfPugMixin({
      rawParameter: properties,
      parameterNumber: 1,
      parameterName: "properties",
      parameterPropertiesSpecification: NumberBox__YDF.propertiesSpecification,
      mixinName: NumberBox__YDF.CSS_NAMESPACE
    });

    const {

      /** @var { boolean } [ invalidInputHighlightingIfAnyValidationErrorsMessages = false ] */
      invalidInputHighlightingIfAnyValidationErrorsMessages,

      /** @var { boolean } [ validValueHighlightingIfNoValidationErrorsMessages = false ] */
      validValueHighlightingIfNoValidationErrorsMessages,

      /** @var { Array<string> | boolean } [ validationErrorsMessages = false ] */
      validationErrorsMessages,

      /** @var { Array<{ ID: string; message: string; }> | boolean } [ asynchronousValidationsStatuses = false ] */
      asynchronousValidationsStatuses

    } = processObjectTypeParameterOfPugMixin({
      rawParameter: statesSimulations,
      parameterNumber: 2,
      parameterName: "statesSimulations",
      parameterPropertiesSpecification: NumberBox__YDF.statesSimulationsSpecification,
      mixinName: NumberBox__YDF.CSS_NAMESPACE
    });

    /* [ Theory ] In negative value case, the minus sign must be respected. */
    /* @type { number } */
    const maximalCharactersCount = Math.max(
      (String(minimalValue)).length + (minimalValue < 0 ? 1 : 0), String(maximalValue).length
    );

    /* @type { Array<string> } */
    const rootElementModifierCSS_Classes = [

      ...disabled ? [ `${ NumberBox__YDF.CSS_NAMESPACE }__DisabledState` ] : [],
      ...invalidInputHighlightingIfAnyValidationErrorsMessages && validationErrorsMessages.length > 0 ?
          [ `${ NumberBox__YDF.CSS_NAMESPACE }__InvalidValueState` ] : [],
      ...validValueHighlightingIfNoValidationErrorsMessages && validationErrorsMessages.length === 0 ?
          [ `${ NumberBox__YDF.CSS_NAMESPACE }__ValueState` ] : [],

      ...ComponentsAuxiliaries.addThemeCSS_ClassToArrayIfMust({
        theme,
        allThemes: NumberBox__YDF.Themes,
        CSS_Namespace: NumberBox__YDF.CSS_NAMESPACE,
        areThemesCSS_ClassesCommon
      }),

      ...ComponentsAuxiliaries.addGeometricVariationCSS_ClassToArrayIfMust({
        geometricVariation,
        allGeometricVariations: NumberBox__YDF.GeometricVariations,
        CSS_Namespace: NumberBox__YDF.CSS_NAMESPACE
      }),

      ...orientation === NumberBox__YDF.Orientations.horizontal ?
          [ `${ NumberBox__YDF.CSS_NAMESPACE }__HorizontalOrientation` ] :
          [ `${ NumberBox__YDF.CSS_NAMESPACE }__VerticalOrientation` ],

      ...ComponentsAuxiliaries.addDecorativeVariationCSS_ClassToArrayIfMust({
        decorativeVariation,
        allDecorativeVariations: NumberBox__YDF.DecorativeVariations,
        CSS_Namespace: NumberBox__YDF.CSS_NAMESPACE
      })

    ];

  +CompoundControlShell--YDF(
    {

      label,
      guidance,

      required,
      mustDisplayAppropriateBadgeIfInputIsRequired,
      mustDisplayAppropriateBadgeIfInputIsOptional,
      mustAddInvisibleBadgeForHeightEqualizingWhenNoBadge,
      coreElementHTML_ID: nativeInputElementHTML_ID,
      labelElementHTML_ID: labelElementHTML_ID,

      mainSlotWrapperAdditionalCSS_Classes: [ "NumberBox--YDF-LinearFlow" ],

      theme: NumberBox__YDF.selfAndChildrenComponentsThemesCorrespondence.compoundControlShell[theme],
      areThemesCSS_ClassesCommon,
      geometricVariation: NumberBox__YDF.selfAndChildrenComponentsGeometricVariationsCorrespondence.
          compoundControlShell[geometricVariation],
      decorativeVariation: NumberBox__YDF.selfAndChildrenComponentsDecorativeVariationsCorrespondence.
          compoundControlShell[decorativeVariation]

    },
    {
      validationErrorsMessages,
      asynchronousValidationsStatuses
    }
  ).NumberBox--YDF&attributes(attributes)(class=rootElementModifierCSS_Classes)

    +Button--YDF({
      HTML_Type: Button__YDF.HTML_Types.regular,
      label: "▲",
      accessibilityGuidance: NumberBox__YDF.localization.buttons.incrementing.generateAccessibilityGuidance({ step }),
      disabled: disabled || readonly,
      theme: NumberBox__YDF.selfAndChildrenComponentsThemesCorrespondence.button[theme],
      geometricVariation: NumberBox__YDF.selfAndChildrenComponentsGeometricVariationsCorrespondence.button[geometricVariation],
      geometricModifiers: [ Button__YDF.GeometricModifiers.squareShape ],
      decorativeVariation: NumberBox__YDF.selfAndChildrenComponentsDecorativeVariationsCorrespondence.button[decorativeVariation]
    }).NumberBox--YDF-Button(
      aria-controls=nativeInputElementHTML_ID
      tabindex="-1"
      data-button-incrementing
    ) ▴

    input.NumberBox--YDF-NativeInput(
      type="number"
      autocomplete="off"
      spellcheck="false"
      value=initialValue
      min=minimalNumericValue
      max=maximalNumericValue
      data-step="1"
      placeholder=placeholder
      disabled=disabled
      readonly=readonly
      id=nativeInputElementHTML_ID
      aria-label=accessibilityGuidance
      aria-labelledby=externalLabelHTML_ID
      style={ width: `${ maximalCharactersCount }ch` }
    )

    +Button--YDF({
      HTML_Type: Button__YDF.HTML_Types.regular,
      accessibilityGuidance: NumberBox__YDF.localization.buttons.decrementing.generateAccessibilityGuidance({ step }),
      disabled: disabled || readonly,
      theme: NumberBox__YDF.selfAndChildrenComponentsThemesCorrespondence.button[theme],
      geometricVariation: NumberBox__YDF.selfAndChildrenComponentsGeometricVariationsCorrespondence.button[geometricVariation],
      geometricModifiers: [ Button__YDF.GeometricModifiers.noTopBorderAndRoundings ],
      decorativeVariation: NumberBox__YDF.selfAndChildrenComponentsDecorativeVariationsCorrespondence.button[decorativeVariation]
    }).NumberBox--YDF-Button(
      aria-controls=nativeInputElementHTML_ID
      tabindex="-1"
      data-button-decrementing
    )
