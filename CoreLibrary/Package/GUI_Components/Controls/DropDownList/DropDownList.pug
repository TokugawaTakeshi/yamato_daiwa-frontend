include DropDownList.class.pug


//- [ Reference ] https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-autocomplete-both/
mixin DropDownList--YDF(properties, statesSimulations)

  -

    const COMPONENT_ID = DropDownList__YDF.generateComponentID();

    const {

      label,
      inputElementAccessibilityGuidance,
      buttonElementAccessibilityGuidance = DropDownList__YDF.localization.button.accessibilityGuidance,
      listBoxElementAccessibilityGuidance = DropDownList__YDF.localization.listBox.accessibilityGuidance,
      externalLabelHTML_ID,
      guidance,
      placeholder,

      selectingOptions,
      initiallySelectedOptionKey,

      disabled,
      readonly,

      required,
      mustDisplayAppropriateBadgeIfInputIsRequired,
      mustDisplayAppropriateBadgeIfInputIsOptional,
      mustAddInvisibleBadgeForHeightEqualizingWhenNoBadge,

      inputElementHTML_ID = `${ COMPONENT_ID }-INPUT`,
      labelElementHTML_ID = `${ COMPONENT_ID }-LABEL`,
      buttonElementHTML_ID = `${ COMPONENT_ID }-BUTTON`,
      listBoxElementHTML_ID = `${ COMPONENT_ID }-LIST_BOX`,

      theme,
      areThemesCSS_ClassesCommon,
      geometricVariation,
      decorativeVariation

    } = processObjectTypeParameterOfPugMixin({
      rawParameter: properties,
      parameterNumber: 1,
      parameterName: "properties",
      parameterPropertiesSpecification: DropDownList__YDF.propertiesSpecification,
      mixinName: DropDownList__YDF.CSS_NAMESPACE
    });

    const {
      expanded,
      invalidInputHighlightingIfAnyValidationErrorsMessages,
      validValueHighlightingIfNoValidationErrorsMessages,
      validationErrorsMessages,
      asynchronousValidationsStatuses
    } = processObjectTypeParameterOfPugMixin({
      rawParameter: statesSimulations,
      parameterNumber: 2,
      parameterName: "statesSimulations",
      parameterPropertiesSpecification: DropDownList__YDF.statesSimulationsSpecification,
      mixinName: DropDownList__YDF.CSS_NAMESPACE
    });


    const rootElementModifierCSS_Classes = [

      expanded ?
          `${ DropDownList__YDF.CSS_NAMESPACE }__ExpandedState` :
          `${ DropDownList__YDF.CSS_NAMESPACE }__FoldedState`,

      ...disabled ? [ `${ DropDownList__YDF.CSS_NAMESPACE }__DisabledState` ] : [],

      ...invalidInputHighlightingIfAnyValidationErrorsMessages && validationErrorsMessages.length > 0 ?
          [ `${ DropDownList.CSS_NAMESPACE }__InvalidValueState` ] : [],
      ...validValueHighlightingIfNoValidationErrorsMessages && validationErrorsMessages.length === 0 ?
          [ `${ DropDownList.CSS_NAMESPACE }__ValidValueState` ] : [],

      ...ComponentsAuxiliaries.addThemeCSS_ClassToArrayIfMust({
        theme,
        allThemes: DropDownList__YDF.Themes,
        CSS_Namespace: DropDownList__YDF.CSS_NAMESPACE,
        areThemesCSS_ClassesCommon
      }),

      ...ComponentsAuxiliaries.addGeometricVariationCSS_ClassToArrayIfMust({
        geometricVariation,
        allGeometricVariations: DropDownList__YDF.GeometricVariations,
        CSS_Namespace: DropDownList__YDF.CSS_NAMESPACE
      }),

      ...ComponentsAuxiliaries.addDecorativeVariationCSS_ClassToArrayIfMust({
        decorativeVariation,
        allDecorativeVariations: DropDownList__YDF.DecorativeVariations,
        CSS_Namespace: DropDownList__YDF.CSS_NAMESPACE
      })

    ];

    let inputElementInitialValue = "";

    if (isNotUndefined(initiallySelectedOptionKey) && selectingOptions.length > 0) {
      inputElementInitialValue = selectingOptions.find(option => option.key === initiallySelectedOptionKey)?.label ?? "";
    }


  +CompoundControlShell--YDF(
    {

      label,
      guidance,

      required,
      mustDisplayAppropriateBadgeIfInputIsRequired,
      mustDisplayAppropriateBadgeIfInputIsOptional,
      mustAddInvisibleBadgeForHeightEqualizingWhenNoBadge,

      coreElementHTML_ID: inputElementHTML_ID,
      labelElementHTML_ID,

      mainSlotWrapperAdditionalCSS_Classes: [ "DropDownList--YDF-MainSlotComposition" ],

      theme: DropDownList__YDF.selfAndChildrenComponentsThemesCorrespondence.compoundControlShell[theme],
      areThemesCSS_ClassesCommon,
      geometricVariation: DropDownList__YDF.selfAndChildrenComponentsThemesCorrespondence.compoundControlShell[geometricVariation],
      decorativeVariation: DropDownList__YDF.selfAndChildrenComponentsThemesCorrespondence.compoundControlShell[decorativeVariation]

    },
    {
      invalidInputHighlightingIfAnyValidationErrorsMessages,
      validValueHighlightingIfNoValidationErrorsMessages,
      validationErrorsMessages,
      asynchronousValidationsStatuses
    }
  ).DropDownList--YDF&attributes(attributes)(class=rootElementModifierCSS_Classes)

    input.DropDownList--YDF-InputElement(
      role="combobox"
      type="text"
      value=inputElementInitialValue
      aria-autocomplete="both"
      aria-expanded=(expanded ? "true" : "false")
      aria-controls=listBoxElementHTML_ID
      id=inputElementHTML_ID
      aria-label=inputElementAccessibilityGuidance
      aria-labelledby=externalLabelHTML_ID
    )

    +Button--YDF({
      accessibilityGuidance: buttonElementAccessibilityGuidance,
      HTML_Type: Button__YDF.HTML_Types.regular,
      theme: Button__YDF.Themes.regular,
      geometricVariation: Button__YDF.GeometricVariations.regular,
      geometricModifiers: [
        Button__YDF.GeometricModifiers.squareShape,
        Button__YDF.GeometricModifiers.noLeftBorderAndRoundings
      ],
      decorativeVariation: Button__YDF.DecorativeVariations.regular
    }).DropDownList--YDF-Button(
      aria-expanded=(expanded ? "true" : "false")
      aria-controls=listBoxElementHTML_ID
      tabindex="-1"
    )
      +Triangle__Downward__Filled--YDF_Icon.Button--YDF-SVG_Icon(
        aria-hidden="true"
        focusable="false"
      )

    ul.DropDownList--YDF-ListBox(
      role="listbox"
      aria-label=listBoxElementAccessibilityGuidance
      id=listBoxElementHTML_ID
      hidden=(!expanded)
    )

      if isNonEmptyArray(selectingOptions)

        each option in selectingOptions

          li.DropDownList--YDF-ListBox-Option(
            role="option"
            data-key=option.key
          )= option.label

      else

        block


mixin DropDownList-SelectingOption--YDF(selectingOption)

  li.DropDownList--YDF-ListBox-Option(
    role="option"
    data-key=selectingOption.key
  )= selectingOption.label
