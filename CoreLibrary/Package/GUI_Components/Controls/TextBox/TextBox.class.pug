-

  class TextBox__YDF {

    /**
     * @type { string }
     * @public
     * @readonly
     */
    static CSS_NAMESPACE = "TextBox--YDF";

    /**
     * @type {
     *   Readonly<{
     *     regular: string;
     *     email: string;
     *     number: string;
     *     password: string;
     *     phoneNumber: string;
     *     URI: string;
     *     hidden: string;
     *   }>
     * }
     * @readonly
     */
    static HTML_Types = {
      regular: "text",
      email: "email",
      number: "number",
      password: "password",
      phoneNumber: "tel",
      URI: "url",
      hidden: "hidden"
    };


    /* ━━━ Theming ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */

    /**
     * @type { { [themeName: string]: string } }
     * @public
     * @description If you want to define new themes, do it only via `defineThemes` static method.
     */
    static Themes = { regular: "REGULAR" };

    /* [ Pitfall ] The classes of other components may not be declared yet thus initialization on demand required. */
    /** @type { { [ childComponentName: string ]: { [ownThemeValue: string]: string } } | null } */
    static _selfAndChildrenComponentsThemesCorrespondence = null;

    /** @type { { [ childComponentName: string ]: { [ownThemeValue: string]: string } } } */
    static get selfAndChildrenComponentsThemesCorrespondence() {
      return TextBox__YDF._selfAndChildrenComponentsThemesCorrespondence ?? (
        TextBox__YDF._selfAndChildrenComponentsThemesCorrespondence = {
          compoundControlShell: { [TextBox__YDF.Themes.regular]: CompoundControlShell__YDF.Themes.regular }
        }
      );
    }

    /**
     * @param {
     *   { [ ownThemeKey: string ]: { [ childrenComponentKey: string ]: string; } }
     * } ownAndCorrespondingCompoundControlShellThemesDefinition
     * @example
     * TextBox__YDF.defineThemes({
     *   redmond: {
     *     compoundControlShell: CompoundControlShell__YDF.Themes.redmond,
     *     button: Button__YDF.Themes.redmond
     *   },
     *   cupertino: {
     *     compoundControlShell: CompoundControlShell__YDF.Themes.cupertino,
     *     button: Button__YDF.Themes.cupertino
     *   }
     * });
     */
    static defineThemes(ownAndCorrespondingCompoundControlShellThemesDefinition) {
      return ComponentsAuxiliaries.defineThemesAndSetCorrespondenceWithOnesOfChildrenComponents(
        ownAndCorrespondingCompoundControlShellThemesDefinition, TextBox__YDF
      );
    }

    static areThemesCSS_ClassesCommon = ComponentsAuxiliaries.areComponentsThemesCommon;

    static considerThemesAsCommon() {
      TextBox__YDF.areThemesCSS_ClassesCommon = true;
      return TextBox__YDF;
    }


    /* ─── Geometry ───────────────────────────────────────────────────────────────────────────────────────────────── */
    static GeometricVariations = {
      regular: "REGULAR",
      small: "SMALL"
    };

    /* [ Pitfall ] The classes of other components may not be declared yet, initialization on demand required. */
    /** @type { { [ childComponentName: string ]: { [ownGeometricVariationValue: string]: string } } | null } */
    static _selfAndChildrenComponentsGeometricVariationsCorrespondence = null;

    /** @type { { [ childComponentName: string ]: { [ownGeometricVariationValue: string]: string } } } */
    static get selfAndChildrenComponentsGeometricVariationsCorrespondence() {
      return TextBox__YDF._selfAndChildrenComponentsGeometricVariationsCorrespondence ?? (
        TextBox__YDF._selfAndChildrenComponentsGeometricVariationsCorrespondence = {
          compoundControlShell: {
            [TextBox__YDF.GeometricVariations.regular]: CompoundControlShell__YDF.GeometricVariations.regular,
            [TextBox__YDF.GeometricVariations.small]: CompoundControlShell__YDF.GeometricVariations.small
          }
        }
      );
    }

    static defineGeometricVariations(ownAndCorrespondingCompoundControlShellGeometricVariationsDefinition) {
      return ComponentsAuxiliaries.defineGeometricVariationsAndSetCorrespondenceWithOnesOfChildrenComponents(
        ownAndCorrespondingCompoundControlShellGeometricVariationsDefinition, TextBox__YDF
      );
    }


    /* ─── Decoration ─────────────────────────────────────────────────────────────────────────────────────────────── */
    static DecorativeVariations = { regular: "REGULAR" };

    /* [ Pitfall ] The classes of other components may not be declared yet, initialization on demand required. */
    /** @type { { [ childComponentName: string ]: { [ownDecorativeVariationValue: string]: string } } | null } */
    static _selfAndChildrenComponentsDecorativeVariationsCorrespondence = null;

    /** @type { { [ childComponentName: string ]: { [ownDecorativeVariationValue: string]: string } } } */
    static get selfAndChildrenComponentsDecorativeVariationsCorrespondence() {
      return TextBox__YDF._selfAndChildrenComponentsDecorativeVariationsCorrespondence ?? (
        TextBox__YDF._selfAndChildrenComponentsDecorativeVariationsCorrespondence = {
          compoundControlShell: {
            [TextBox__YDF.DecorativeVariations.regular]: CompoundControlShell__YDF.DecorativeVariations.regular
          }
        }
      );
    }

    static defineDecorativeVariations(ownAndCorrespondingCompoundControlShellDecorativeVariationsDefinition) {
      return ComponentsAuxiliaries.defineDecorativeVariationsAndSetCorrespondenceWithOnesOfChildrenComponents(
        ownAndCorrespondingCompoundControlShellDecorativeVariationsDefinition, TextBox__YDF
      );
    }


    /* ━━━ Properties specification ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */
    static propertiesSpecification = {

      HTML_Type: {
        type: String,
        required: false,
        allowedAlternatives: Object.values(TextBox__YDF.HTML_Types)
      },

      label: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      accessibilityGuidance: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      externalLabelHTML_ID: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      guidance: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      placeholder: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      //- TODO See https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill
      autocomplete: {
        type: String,
        required: false
      },

      value: {
        preValidationModifications: rawValue => isNumber(rawValue) ? String(rawValue) : rawValue,
        type: String,
        required: false
      },

      multiline: {
        type: Boolean,
        required: false
      },

      disabled: {
        type: Boolean,
        required: false
      },

      readonly: {
        type: Boolean,
        required: false
      },

      required: {
        type: Boolean,
        required: false
      },

      mustDisplayAppropriateBadgeIfInputIsRequired: {
        type: Boolean,
        required: false
      },

      mustDisplayAppropriateBadgeIfInputIsOptional: {
        type: Boolean,
        required: false
      },

      mustAddInvisibleBadgeForHeightEqualizingWhenNoBadge: {
        type: Boolean,
        required: false
      },

      minimalCharactersCount: {
        type: Number,
        numbersSet: RawObjectDataProcessor.NumbersSets.nonNegativeInteger,
        required: false
      },

      maximalCharactersCount: {
        type: Number,
        numbersSet: RawObjectDataProcessor.NumbersSets.nonNegativeInteger,
        required: false,
        customValidators: {
          validationFunction: ({ currentPropertyValue: maximalCharactersCount, rawData__currentObjectDepth }) =>
              isUndefined(rawData__currentObjectDepth.minimalCharactersCount) ||
              (
                Number.isInteger(rawData__currentObjectDepth.minimalCharactersCount) &&
                maximalCharactersCount >= rawData__currentObjectDepth.minimalCharactersCount
              ),
          descriptionForLogging: "\"maximalCharactersCount\" could not be less than \"minimalCharactersCount\"."
        }
      },

      minimalNumericValue: {
        type: Number,
        numbersSet: RawObjectDataProcessor.NumbersSets.nonNegativeInteger,
        required: false
      },

      maximalNumericValue: {
        type: Number,
        numbersSet: RawObjectDataProcessor.NumbersSets.nonNegativeInteger,
        required: false,
        customValidators: {
          validationFunction: ({ currentPropertyValue: maximalNumericValue, rawData__currentObjectDepth }) =>
              isUndefined(rawData__currentObjectDepth.minimalNumericValue) ||
              (
                Number.isInteger(rawData__currentObjectDepth.minimalNumericValue) &&
                maximalNumericValue >= rawData__currentObjectDepth.minimalNumericValue
              ),
          descriptionForLogging: "\"maximalNumericValue\" could not be less than \"minimalNumericValue\"."
        }
      },

      inputOrTextAreaElementHTML_ID: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      labelElementHTML_ID: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      theme: {
        type: String,
        required: false,
        allowedAlternatives: Object.values(TextBox__YDF.Themes)
      },

      areThemesCSS_ClassesCommon: {
        type: Boolean,
        required: false
      },

      decorativeVariation: {
        type: String,
        required: false,
        allowedAlternatives: Object.values(TextBox__YDF.GeometricVariations)
      },

      decorativeModifiers: {
        type: String,
        required: false,
        allowedAlternatives: Object.values(TextBox__YDF.DecorativeVariations)
      }

    };


    /* ━━━ State simulations specification ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */
    static statesSimulationsSpecification = {

      invalidInputHighlightingIfAnyValidationErrorsMessages: ComponentsAuxiliaries.
          validatableControlGeneralStatesSimulationsSpecification.invalidInputHighlightingIfAnyValidationErrorsMessages,

      validValueHighlightingIfNoValidationErrorsMessages: ComponentsAuxiliaries.
          validatableControlGeneralStatesSimulationsSpecification.validValueHighlightingIfNoValidationErrorsMessages,

      validationErrorsMessages: ComponentsAuxiliaries.validatableControlGeneralStatesSimulationsSpecification.
          validationErrorsMessages,

      asynchronousValidationsStatuses: ComponentsAuxiliaries.validatableControlGeneralStatesSimulationsSpecification.
          asynchronousValidationsStatuses

    };


    /* ━━━ Routines ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */
    /* ─── ID generating ──────────────────────────────────────────────────────────────────────────────────────────── */
    static counterForID_Generating = 0;

    static generateComponentID() {
      TextBox__YDF.counterForID_Generating++;
      return `TEXT_BOX--YDF-${ TextBox__YDF.counterForID_Generating }`;
    }

  }
