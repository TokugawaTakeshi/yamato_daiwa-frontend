include DateTimePicker.class.pug


mixin DateTimePicker--YDF(properties, statesSimulations, initialValueFormatter)

  -

    const COMPONENT_ID = DateTimePicker__YDF.generateComponentID();

    const {

      label,
      accessibilityGuidance,
      externalLabelHTML_ID,
      guidance,

      mode,
      value,

      disabled,
      readonly,

      required,
      mustDisplayAppropriateBadgeIfInputIsRequired,
      mustDisplayAppropriateBadgeIfInputIsOptional,
      mustAddInvisibleBadgeForHeightEqualizingWhenNoBadge,

      coreElementHTML_ID,
      labelElementHTML_ID,

      theme,
      areThemesCSS_ClassesCommon,
      geometricVariation,
      geometricModifiers,
      decorativeVariation,
      decorativeModifiers

    } = processObjectTypeParameterOfPugMixin({
      rawParameter: properties,
      parameterNumber: 1,
      parameterName: "properties",
      parameterPropertiesSpecification: DateTimePicker__YDF.propertiesSpecification,
      mixinName: DateTimePicker__YDF.CSS_NAMESPACE
    });

    const {
      expanded,
      activeMatrix,
      invalidInputHighlightingIfAnyValidationErrorsMessages,
      validValueHighlightingIfNoValidationErrorsMessages,
      validationErrorsMessages,
      asynchronousValidationsStatuses
    } = processObjectTypeParameterOfPugMixin({
      rawParameter: statesSimulations,
      parameterNumber: 2,
      parameterName: "statesSimulations",
      parameterPropertiesSpecification: DateTimePicker__YDF.statesSimulationsSpecification,
      mixinName: DateTimePicker__YDF.CSS_NAMESPACE
    });

    const rootElementModifierCSS_Classes = [

      ...disabled ? [ `${ DateTimePicker__YDF.CSS_NAMESPACE }__DisabledState` ] : [],
      ...invalidInputHighlightingIfAnyValidationErrorsMessages && validationErrorsMessages.length > 0 ?
          [ `${ DateTimePicker.CSS_NAMESPACE }__InvalidValueState` ] : [],
      ...validValueHighlightingIfNoValidationErrorsMessages && validationErrorsMessages.length === 0 ?
          [ `${ DateTimePicker.CSS_NAMESPACE }__ValueState` ] : [],

      ...ComponentsAuxiliaries.addThemeCSS_ClassToArrayIfMust({
        theme,
        allThemes: DateTimePicker__YDF.Themes,
        CSS_Namespace: DateTimePicker__YDF.CSS_NAMESPACE,
        areThemesCSS_ClassesCommon
      }),

      ...ComponentsAuxiliaries.addGeometricVariationCSS_ClassToArrayIfMust({
        geometricVariation,
        allGeometricVariations: DateTimePicker__YDF.GeometricVariations,
        CSS_Namespace: DateTimePicker__YDF.CSS_NAMESPACE
      }),

      ...ComponentsAuxiliaries.addDecorativeVariationCSS_ClassToArrayIfMust({
        decorativeVariation,
        allDecorativeVariations: DateTimePicker__YDF.DecorativeVariations,
        CSS_Namespace: DateTimePicker__YDF.CSS_NAMESPACE
      })

    ];

    const initiallyDisplayingYear = new Date().getFullYear();
    const initiallyDisplayingMonthNumber__numerationFrom0 = new Date().getMonth();

    const initial6x7DaysMatrix = CalendarBuilder.generateDataFor6x7DaysMatrix({
      targetYear: initiallyDisplayingYear,
      targetMonthNumber__numerationFrom0: initiallyDisplayingMonthNumber__numerationFrom0,
      firstDayOfWeek__numerationFrom0ForSunday: 0
    });


  +CompoundControlShell--YDF(
    {

      label,
      guidance,

      required,
      mustDisplayAppropriateBadgeIfInputIsRequired,
      mustDisplayAppropriateBadgeIfInputIsOptional,
      mustAddInvisibleBadgeForHeightEqualizingWhenNoBadge,
      coreElementHTML_ID: coreElementHTML_ID,
      labelElementHTML_ID: labelElementHTML_ID,

      mainSlotWrapperAdditionalCSS_Classes: [ "DateTimePicker--YDF-DialogRelativePositioner" ],

      theme: DateTimePicker__YDF.selfAndChildrenComponentsThemesCorrespondence.compoundControlShell[theme],
      areThemesCSS_ClassesCommon,
      geometricVariation: DateTimePicker__YDF.selfAndChildrenComponentsThemesCorrespondence.
          compoundControlShell[geometricVariation],
      decorativeVariation: DateTimePicker__YDF.selfAndChildrenComponentsThemesCorrespondence.
          compoundControlShell[decorativeVariation]

    },
    {
      validationErrorsMessages,
      asynchronousValidationsStatuses
    }
  ).DateTimePicker--YDF&attributes(attributes)(class=rootElementModifierCSS_Classes)

    -
      const toggleAccessibilityGuidance = expanded ?
          DateTimePicker__YDF.localization.expandingToggle.collapsedState.accessibilityGuidance :
          DateTimePicker__YDF.localization.expandingToggle.expandedState.accessibilityGuidance;

    button.DateTimePicker--YDF-SelectedDateTimeDisplaying(
      type="button"
      aria-label=toggleAccessibilityGuidance
    )

      case mode

        when DateTimePicker__YDF.Modes.dateWithTime

          +Calendar__Time--YDF_Icon.DateTimePicker--YDF-SelectedDateTimeDisplaying-Icon

        default

          +Calendar__Date--YDF_Icon.DateTimePicker--YDF-SelectedDateTimeDisplaying-Icon

      span.DateTimePicker--YDF-SelectedDateTimeDisplaying-Label
        if isNotUndefined(value)
          if isNotUndefined(initialValueFormatter)
            | #{ initialValueFormatter(value) }
          else if mode === DateTimePicker__YDF.Modes.dateWithTime
            | #{ new Date(value).toLocaleString() }
          else if mode === DateTimePicker__YDF.Modes.dateOnly
            | #{ new Date(value).toLocaleDateString() }

    if expanded

      .DateTimePicker--YDF-Dialog(
        role="dialog"
        aria-modal="true"
      )

        .DateTimePicker--YDF-TopActionBar

          case activeMatrix

            when DateTimePicker__YDF.Matrices.days

              table.DateTimePicker--YDF-DayMatrixActions
                thead
                  tr
                    th(colspan="2") Month
                    th(colspan="2") Selection Panels
                tbody
                  tr
                    td
                      +Button--YDF({ geometricVariation: Button__YDF.GeometricVariations.small })
                        +Chevron__Leftward--YDF_Icon.Button--YDF-SVG_Icon
                        span.Button--YDF-Label Prev.
                    td
                      +Button--YDF({ geometricVariation: Button__YDF.GeometricVariations.small })
                        span.Button--YDF-Label Next
                        +Chevron__Rightward--YDF_Icon.Button--YDF-SVG_Icon
                    td: +Button--YDF({ label: "Month", geometricVariation: Button__YDF.GeometricVariations.small })
                    td: +Button--YDF({ label: "Year", geometricVariation: Button__YDF.GeometricVariations.small })

              //-
                +Button--YDF({ label: "Prev. Month", geometricVariation: Button__YDF.GeometricVariations.small })
                +Button--YDF({ label: "Next Month", geometricVariation: Button__YDF.GeometricVariations.small })
                +Button--YDF({ label: "Set Month", geometricVariation: Button__YDF.GeometricVariations.small })
                +Button--YDF({ label: "Set Year", geometricVariation: Button__YDF.GeometricVariations.small })

            when DateTimePicker__YDF.Matrices.months

              +Button--YDF({ label: "Prev. Year", geometricVariation: Button__YDF.GeometricVariations.small })
              +Button--YDF({ label: "Next Year", geometricVariation: Button__YDF.GeometricVariations.small })
              +Button--YDF({ label: "Set Year", geometricVariation: Button__YDF.GeometricVariations.small })

            when DateTimePicker__YDF.Matrices.years

              +Button--YDF({ label: "Prev. 25 Years", geometricVariation: Button__YDF.GeometricVariations.small })
              +Button--YDF({ label: "Next 25 Years", geometricVariation: Button__YDF.GeometricVariations.small })
              +Button--YDF({ label: "Set Month", geometricVariation: Button__YDF.GeometricVariations.small })


        .DateTimePicker--YDF-ContextGuidance

          case activeMatrix

            when DateTimePicker__YDF.Matrices.days

              | Please select the day


        case activeMatrix

          when DateTimePicker__YDF.Matrices.days

            table.DateTimePicker--YDF-DaysMatrix
              thead
                tr
                  th.DateTimePicker--YDF-DayTitleCell.DateTimePicker--YDF-DayTitleCell__Holiday(scope="col") SUN
                  th.DateTimePicker--YDF-DayTitleCell(scope="col") MON
                  th.DateTimePicker--YDF-DayTitleCell(scope="col") TUE
                  th.DateTimePicker--YDF-DayTitleCell(scope="col") WED
                  th.DateTimePicker--YDF-DayTitleCell(scope="col") THR
                  th.DateTimePicker--YDF-DayTitleCell(scope="col") FRI
                  th.DateTimePicker--YDF-DayTitleCell.DateTimePicker--YDF-DayTitleCell__Holiday(scope="col") SAT
              tbody

                -
                  let dayNumberInMonth = 0;
                  const disabledButtonNumber = getRandomInteger({ minimalValue: 1, maximalValue: 31 })
                  const selectedButtonNumber = getRandomInteger({ minimalValue: 1, maximalValue: 31 })

                each weekData in initial6x7DaysMatrix

                  tr
                    each dayData in weekData

                      td: button.DateTimePicker--YDF-SelectDayButton(
                        type="button"
                        disabled= dayNumberInMonth === disabledButtonNumber
                        class= dayNumberInMonth === selectedButtonNumber && "DateTimePicker-SelectDayButton__Selected"
                      )= dayData.dayOfMonth

          when DateTimePicker__YDF.Matrices.months

            .DateTimePicker--YDF-MonthsMatrix
              each emptyArrayElement, index in new Array(MONTHS_COUNT_IN_YEAR)
                button.DateTimePicker--YDF-MonthSelectingButton(
                  type="button"
                )= `${ index + 1 }月`


          when DateTimePicker__YDF.Matrices.years

            .DateTimePicker--YDF-YearsMatrix
              each emptyArrayElement in new Array(25)
                button.DateTimePicker--YDF-SelectYearButton(
                  type="button"
                ) 2222


          when DateTimePicker__YDF.Matrices.hours

            table.DateTimePicker--YDF-HoursMatrix

              thead
                tr
                  th.DateTimePicker--YDF-HoursMatrix-HeaderCell(colspan="2" scope="col") 午前
                  th.DateTimePicker--YDF-HoursMatrix-HeaderCell(colspan="2" scope="col") 午後

              tbody
                each emptyArrayElement, index in new Array(6)
                  tr
                    td: button.DateTimePicker--YDF-SelectHourButton(type="button")= index
                    td: button.DateTimePicker--YDF-SelectHourButton(type="button")= index + 6
                    td: button.DateTimePicker--YDF-SelectHourButton(type="button")= index
                    td: button.DateTimePicker--YDF-SelectHourButton(type="button")= index + 6

          when DateTimePicker__YDF.Matrices.minutes

            .DateTimePicker--YDF-MinutesMatrix
              each emptyArrayElement, index in new Array(60)
                button.DateTimePicker--YDF-SelectYearButton(
                  type="button"
                )= index
