@require "Themes/Regular/GeometricVariations/Snackbar-RegularTheme-RegularGeometry.styl"

@require "Themes/Regular/DecorativeVariations/Snackbar-RegularTheme-ErrorDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Snackbar-RegularTheme-WarningDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Snackbar-RegularTheme-GuidanceDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Snackbar-RegularTheme-SuccessDecoration.styl"


Snackbar--YDF = {

  CSS_NAMESPACE: "Snackbar--YDF",

  defaultProperties: {

    themes: {
      regular: {

        componentIndependentCSS_Class: "RegularTheme--YDF",

        geometricVariations: {
          regular: Snackbar-RegularTheme-RegularGeometry--YDF
        },

        decorativeVariations: {
          error: Snackbar-RegularTheme-ErrorDecoration--YDF,
          warning: Snackbar-RegularTheme-WarningDecoration--YDF,
          guidance: Snackbar-RegularTheme-GuidanceDecoration--YDF,
          success: Snackbar-RegularTheme-SuccessDecoration--YDF
        }

      }
    }

  },

  defaultOptions: {
    themeIndependentStylesOnly: false,
    areThemesCSS_ClassesCommon: false,
    themeIndependentGeometricVariations: true
  }

}


provideSnackbarYDF_Component(
  preset = Snackbar--YDF.defaultProperties,
  overrides = {},
  options = Snackbar--YDF.defaultOptions,
  restParameters__MUST_NOT_BE...
)

  properties = deeplyCloneAndOverrideObject(preset, overrides)

  validateObjectTypeParameter({
    mixinOrFunctionName: "provideSnackbarYDF_Component",
    targetParameterNumber: 3,
    targetParameter: options,
    schema: {
      themeIndependentStylesOnly: {
        type: DataTypes--YDF.boolean,
        defaultValue: Snackbar--YDF.defaultOptions.themeIndependentStylesOnly
      },
      areThemesCSS_ClassesCommon: {
        type: DataTypes--YDF.boolean,
        defaultValue: Snackbar--YDF.defaultOptions.areThemesCSS_ClassesCommon
      },
      themeIndependentGeometricVariations: {
        type: DataTypes--YDF.boolean,
        defaultValue: Snackbar--YDF.defaultOptions.themeIndependentGeometricVariations
      }
    },
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })


  //- ━━━ Methods ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  applyBasicRules()

    .Snackbar--YDF

      display flex
      align-items center

      position fixed
      z-index: YDF_Configuration.zIndexes.floatingNotifications


      &-SVG_Icon

        flex-shrink 0


      &-Message

        word-break break-all

        flex-grow 1


      &-DismissingButton

        ButtonLikeElementsPrimer()

        cursor pointer

        flex-shrink 0


        &-Icon

          display block    // [ Why? ] Te remove the extra space at bottom causes by line-height


      &-Transition

        &__DisplayingState

          opacity 1


        &__HiddenState

          opacity 0


        &__Appearing,
        &__Disappearing

          transition-property: x, y, left, right, bottom, top, opacity, transform


        &__Appearing

          transition-timing-function ease-out


        &__Disappearing

          transition-timing-function ease-in


  // ─── Geometry ──────────────────────────────────────────────────────────────────────────────────────────────────────
  applyGeometricVariation(themeName, variationName, variation)

    VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING = buildString(
      "Snackbar.${ themeName }Theme.${ variationName }Geometry",
      { themeName: themeName, variationName: variationName }
    )

    CONTEXT_SELECTOR = selector() == "&" ? null : selector()


    WideScreensConfiguration()
      @media (min-width: variation.rootElement.positioning.wideScreensMinimalWidth)
        {block}

    NarrowScreensConfiguration()
      @media (max-width: variation.rootElement.positioning.wideScreensMinimalWidth - 1)
        {block}


    +provideDefaultSelectorWhenRootAndApply("." + Snackbar--YDF.CSS_NAMESPACE)

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          borders: {
            dotSeparatedPath: "rootElement.borders",
            required: false,
            applier: BordersSizing
          }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.rootElement.customDeclarations)


    .Snackbar--YDF__TopLeftPosition,
    .Snackbar--YDF__BottomLeftPosition,
    .Snackbar--YDF__TopMiddlePosition,
    .Snackbar--YDF__BottomMiddlePosition,
    .Snackbar--YDF__TopRightPosition,
    .Snackbar--YDF__BottomRightPosition

      +NarrowScreensConfiguration()

        left 50%


        &.Snackbar--YDF-Transition__DisplayingState

          transform translateX(-50%)


        &.Snackbar--YDF-Transition__HiddenState

          left 50%


    .Snackbar--YDF__TopLeftPosition,
    .Snackbar--YDF__TopMiddlePosition,
    .Snackbar--YDF__TopRightPosition

      +WideScreensConfiguration()

        validateAndAssignStoredInObjectCSS_Properties({
          targetObject: variation,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          assigments: {
            top: {
              dotSeparatedPath: "rootElement.positioning.boundingRectangleForWideScreens.verticalOffset",
              required: true
            }
          }
        })


      +NarrowScreensConfiguration()

        validateAndAssignStoredInObjectCSS_Properties({
          targetObject: variation,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          assigments: {
            top: {
              dotSeparatedPath: "rootElement.positioning.verticalOffsetForNarrowScreens",
              required: true
            }
          }
        })


        &.Snackbar--YDF-Transition__HiddenState

          top 0
          transform translate(-50%, -100%)


    .Snackbar--YDF__BottomLeftPosition,
    .Snackbar--YDF__BottomMiddlePosition,
    .Snackbar--YDF__BottomRightPosition

      +WideScreensConfiguration()

        validateAndAssignStoredInObjectCSS_Properties({
          targetObject: variation,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          assigments: {
            bottom: {
              dotSeparatedPath: "rootElement.positioning.boundingRectangleForWideScreens.verticalOffset",
              required: true
            }
          }
        })


      +NarrowScreensConfiguration()

        validateAndAssignStoredInObjectCSS_Properties({
          targetObject: variation,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          assigments: {
            bottom: {
              dotSeparatedPath: "rootElement.positioning.verticalOffsetForNarrowScreens",
              required: true
            }
          }
        })


        &.Snackbar--YDF-Transition__HiddenState

          bottom 0
          transform translate(-50%, 100%)


    .Snackbar--YDF__TopLeftPosition,
    .Snackbar--YDF__BottomLeftPosition

      +WideScreensConfiguration()

        &.Snackbar--YDF-Transition__DisplayingState

          validateAndAssignStoredInObjectCSS_Properties({
            targetObject: variation,
            targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
            assigments: {
              left: {
                dotSeparatedPath: "rootElement.positioning.boundingRectangleForWideScreens.horizontalOffset",
                required: true
              }
            }
          })


        &.Snackbar--YDF-Transition__HiddenState

          left 0
          transform translateX(-100%)


    .Snackbar--YDF__TopMiddlePosition,
    .Snackbar--YDF__BottomMiddlePosition

      +WideScreensConfiguration()

        left 50%


        &.Snackbar--YDF-Transition__DisplayingState

          transform translateX(-50%)


    .Snackbar--YDF__TopRightPosition,
    .Snackbar--YDF__BottomRightPosition

      +WideScreensConfiguration()

        &.Snackbar--YDF-Transition__DisplayingState

          validateAndAssignStoredInObjectCSS_Properties({
            targetObject: variation,
            targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
            assigments: {
              right: {
                dotSeparatedPath: "rootElement.positioning.boundingRectangleForWideScreens.horizontalOffset",
                required: true
              }
            }
          })


        &.Snackbar--YDF-Transition__HiddenState

          right 0
          transform translateX(100%)


    .Snackbar--YDF__TopMiddlePosition

      +WideScreensConfiguration()

        &.Snackbar--YDF-Transition__HiddenState

          top 0
          transform translate(-50%, -100%)


    .Snackbar--YDF__BottomMiddlePosition

      +WideScreensConfiguration()

        &.Snackbar--YDF-Transition__HiddenState

          bottom 0
          transform translate(-50%, 100%)


    .Snackbar--YDF-SVG_Icon

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          width: { dotSeparatedPath: "SVG_Icon.width", required: false },
          height: {
            dotSeparatedPath: "SVG_Icon.height",
            requiredIf: {
              predicate: @(variation) { return isNull(getObjectValueByDotSeparatedPathSafely(variation, "SVG_Icon.width")) },
              conditionDescription: "'SVG_Icon.width' icon is null"
            }
          },
          margin-left: { dotSeparatedPath: "SVG_Icon.spacing.left", required: true }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.SVG_Icon.customDeclarations)


    .Snackbar--YDF-Message

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          min-width: { dotSeparatedPath: "message.minimalWidth", required: false },
          max-width: { dotSeparatedPath: "message.maximalWidth", required: false },
          text: { dotSeparatedPath: "message.text", applier: @(textProperties) {
            applyTextGeometryWithoutExtraSpaceCausedByLineHeight({
              fontSize: textProperties.size,
              lineSpacing: textProperties.lineSpacing,
              lineHeight: textProperties.lineHeight,
              mustApplyNegativeMarginsToRootElement: true
            })
          }},
          verticalSymmetricMarginsAsTopPadding: {
            newName: "padding-top",
            dotSeparatedPath: "message.spacing.verticalSymmetric",
            required: false
          },
          verticalSymmetricMarginsAsBottomPadding: {
            newName: "padding-bottom",
            dotSeparatedPath: "message.spacing.verticalSymmetric",
            required: false
          },
          topPadding: {
            newName: "padding-top",
            dotSeparatedPath: "message.spacing.top",
            required: false,
            incompatibleWith: "message.spacing.verticalSymmetric"
          },
          bottomPadding: {
            newName: "padding-bottom",
            dotSeparatedPath: "message.spacing.bottom",
            required: false,
            incompatibleWith: "message.spacing.verticalSymmetric"
          },
          margin-left: { dotSeparatedPath: "message.spacing.left", required: true }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.message.customDeclarations)


    .Snackbar--YDF-DismissingButton

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          margin-left: { dotSeparatedPath: "dismissingButton.spacing.left", required: true },
          margin-right: { dotSeparatedPath: "dismissingButton.spacing.right", required: true }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.dismissingButton.customDeclarations)


    .Snackbar--YDF-DismissingButton-Icon

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          width: { dotSeparatedPath: "dismissingButton.SVG_Icon.width", required: false },
          height: {
            dotSeparatedPath: "dismissingButton.SVG_Icon.height",
            requiredIf: {
              predicate: @(variation) {
                return isNull(getObjectValueByDotSeparatedPathSafely(variation, "dismissingButton.SVG_Icon.width"))
              },
              conditionDescription: "'dismissingButton.SVG_Icon.width' icon is null"
            }
          }
        }
      })


  // ─── Decoration ────────────────────────────────────────────────────────────────────────────────────────────────────
  applyDecorativeVariation(themeName, variationName, variation)

    VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING = buildString(
      "Snackbar.${ themeName }Theme.${ variationName }Decoration",
      { themeName: themeName, variationName: variationName }
    )


    +provideDefaultSelectorWhenRootAndApply("." + Snackbar--YDF.CSS_NAMESPACE)

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          border-style: { dotSeparatedPath: "rootElement.borders.style", required: false },
          border-color: { dotSeparatedPath: "rootElement.borders.color", required: false },
          background-color: { dotSeparatedPath: "rootElement.background.color", required: false },
          background-image: { dotSeparatedPath: "rootElement.background.image", required: false },
          box-shadow: {
            dotSeparatedPath: "rootElement.shadow",
            required: false,
            applier: applyObjectTypeBoxShadowDefinition
          }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.rootElement.customDeclarations)


    .Snackbar--YDF-SVG_Icon

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          fill: { dotSeparatedPath: "SVG_Icon.color", required: false }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.SVG_Icon.customDeclarations)


    .Snackbar--YDF-Message

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          "font-weight": { dotSeparatedPath: "message.text.fontWeight", required: false },
          color: { dotSeparatedPath: "message.text.color", required: false }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.message.customDeclarations)


    DismissingButtonStyles(state)

      statePseudoClass = null

      if (state == "hoverState")

        statePseudoClass = ":hover"

      else if (state == "focusState")

        statePseudoClass = ":focus"

      else if (state == "activeState")

        statePseudoClass = ":active"


      .Snackbar--YDF-DismissingButton{statePseudoClass}

        validateAndAssignStoredInObjectCSS_Properties({
          targetObject: variation,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          assigments: {
            box-shadow: {
              dotSeparatedPath: "dismissingButton." + state + ".shadow",
              required: false,
              applier: applyObjectTypeBoxShadowDefinition
            }
          }
        })

        applyMixinStoredInObjectIfItIsNotNull(variation.dismissingButton[state].customDeclarations)


      SVG_IconStyles()

        validateAndAssignStoredInObjectCSS_Properties({
          targetObject: variation,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          assigments: {
            fill: { dotSeparatedPath: "dismissingButton." + state + ".iconColor", required: true }
          }
        })


      if (isNull(statePseudoClass))

        .Snackbar--YDF-DismissingButton-Icon

          SVG_IconStyles()

      else

        .Snackbar--YDF-DismissingButton{statePseudoClass} .Snackbar--YDF-DismissingButton-Icon

          SVG_IconStyles()


    for state in variation.dismissingButton

      DismissingButtonStyles(state)


  //- ━━━ Applying ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  applyBasicRules()

  if !options.themeIndependentStylesOnly

    applyComponentThemes({
      CSS_Namespace: Snackbar--YDF.CSS_NAMESPACE,
      themes: properties.themes,
      applyGeometricVariation: applyGeometricVariation,
      applyDecorativeVariation: applyDecorativeVariation
    })
