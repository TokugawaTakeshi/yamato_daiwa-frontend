@require "Themes/Regular/GeometricVariations/Badge-RegularTheme-RegularGeometry.styl"

@require "Themes/Regular/DecorativeVariations/Bright/Badge-RegularTheme-VeryCatchyBrightDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Bright/Badge-RegularTheme-CatchyBrightDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Bright/Badge-RegularTheme-ModestlyCatchyBrightDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Bright/Badge-RegularTheme-NeutralBrightDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Bright/Badge-RegularTheme-CalmingBrightDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Bright/Badge-RegularTheme-ModestlyCalmingBrightDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Bright/Badge-RegularTheme-AchromaticBrightDecoration.styl"

@require "Themes/Regular/DecorativeVariations/Pastel/Badge-RegularTheme-VeryCatchyPastelDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Pastel/Badge-RegularTheme-CatchyPastelDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Pastel/Badge-RegularTheme-ModestlyCatchyPastelDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Pastel/Badge-RegularTheme-NeutralPastelDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Pastel/Badge-RegularTheme-CalmingPastelDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Pastel/Badge-RegularTheme-ModestlyCalmingPastelDecoration.styl"
@require "Themes/Regular/DecorativeVariations/Pastel/Badge-RegularTheme-AchromaticPastelDecoration.styl"


Badge--YDF = {

  CSS_NAMESPACE: "Badge--YDF",

  defaultProperties: {

    themes: {
      regular: {

        componentIndependentCSS_Class: "RegularTheme--YDF"

        geometricVariations: {
          regular: Badge-RegularTheme-RegularGeometry--YDF
        },

        decorativeVariations: {

          veryCatchyBright: Badge-RegularTheme-VeryCatchyBrightDecoration--YDF,
          catchyBright: Badge-RegularTheme-CatchyBrightDecoration--YDF,
          modestlyCatchyBright: Badge-RegularTheme-ModestlyCatchyBrightDecoration--YDF,
          neutralBright: Badge-RegularTheme-NeutralBrightDecoration--YDF,
          modestlyCalmingBright: Badge-RegularTheme-ModestlyCalmingBrightDecoration--YDF,
          calmingBright: Badge-RegularTheme-CalmingBrightDecoration--YDF,
          achromaticBright: Badge-RegularTheme-AchromaticBrightDecoration--YDF,

          veryCatchyPastel: Badge-RegularTheme-VeryCatchyPastelDecoration--YDF,
          catchyPastel: Badge-RegularTheme-CatchyPastelDecoration--YDF,
          modestlyCatchyPastel: Badge-RegularTheme-ModestlyCatchyPastelDecoration--YDF,
          neutralPastel: Badge-RegularTheme-NeutralPastelDecoration--YDF,
          modestlyCalmingPastel: Badge-RegularTheme-ModestlyCalmingPastelDecoration--YDF,
          calmingPastel: Badge-RegularTheme-CalmingPastelDecoration--YDF,
          achromaticPastel: Badge-RegularTheme-AchromaticPastelDecoration--YDF

        }

      }
    }

  },

  defaultOptions: {
    themeIndependentStylesOnly: false,
    areThemesCSS_ClassesCommon: false,
    loadingPlaceholder: true,
    themeIndependentGeometricVariations: true,
    geometricModifiers: {
      pillShape: true,
      singleLine: true
    },
    decorativeModifiers: {
      bordersDisguising: true,
      noBackground: true
    }
  }

}


provideBadgeYDF_Component(
  preset = Badge--YDF.defaultProperties,
  overrides = {},
  options = Badge--YDF.defaultOptions,
  restParameters__MUST_NOT_BE...
)

  properties = deeplyCloneAndOverrideObject(preset, overrides)

  validateObjectTypeParameter({
    mixinOrFunctionName: "provideBadgeYDF_Component",
    targetParameterNumber: 3,
    targetParameter: options,
    schema: {
      themeIndependentStylesOnly: {
        type: DataTypes--YDF.boolean,
        defaultValue: Badge--YDF.defaultOptions.themeIndependentStylesOnly
      },
      areThemesCSS_ClassesCommon: {
        type: DataTypes--YDF.boolean,
        defaultValue: Badge--YDF.defaultOptions.areThemesCSS_ClassesCommon
      },
      loadingPlaceholder: {
        type: DataTypes--YDF.boolean,
        defaultValue: Badge--YDF.defaultOptions.loadingPlaceholder
      },
      themeIndependentGeometricVariations: {
        type: DataTypes--YDF.boolean,
        defaultValue: Badge--YDF.defaultOptions.themeIndependentGeometricVariations
      },
      geometricModifiers: {
        type: DataTypes--YDF.object,
        properties: {
          pillShape: {
            type: DataTypes--YDF.boolean,
            defaultValue: Badge--YDF.defaultOptions.geometricModifiers.pillShape
          },
          singleLine: {
            type: DataTypes--YDF.boolean,
            defaultValue: Badge--YDF.defaultOptions.geometricModifiers.singleLine
          }
        },
        defaultValue: Badge--YDF.defaultOptions.geometricModifiers
      },
      decorativeModifiers: {
        type: DataTypes--YDF.object,
        properties: {
          bordersDisguising: {
            type: DataTypes--YDF.boolean,
            defaultValue: Badge--YDF.defaultOptions.decorativeModifiers.bordersDisguising
          },
          noBackground: {
            type: DataTypes--YDF.boolean,
            defaultValue: Button--YDF.defaultOptions.decorativeModifiers.noBackground
          }
        },
        defaultValue: Badge--YDF.defaultOptions.decorativeModifiers
      }
    },
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })


  // ━━━ Methods ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  applyBasicRules()

    .Badge--YDF

      display inline-flex
      align-items center


    .Badge--YDF-SVG_Icon

      flex-shrink 0


    if options.loadingPlaceholder

      .Badge--YDF__LoadingPlaceholder

        display inline-block


  // ─── Geometry ──────────────────────────────────────────────────────────────────────────────────────────────────────
  applyGeometricVariation(themeName, variationName, variation)

    VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING = buildString(
      "Badge.${ themeName }Theme.${ variationName }Geometry",
      { themeName: themeName, variationName: variationName }
    )

    CONTEXT_SELECTOR = selector() == "&" ? null : selector()

    cachedValidReusables = extractAndValidateObjectProperties({
      targetObject: variation,
      targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
      extracts: {
        bordersSizing: { dotSeparatedPath: "rootElement.borders", required: false },
        keyLabelTextSize: { dotSeparatedPath: "keyLabel.text.size", required: true },
        valueLabelTextSize: { dotSeparatedPath: "valueLabel.text.size", required: true },
        valueLabelLineSpacing: { dotSeparatedPath: "valueLabel.text.lineSpacing", required: false },
        valueLabelLineHeight: { dotSeparatedPath: "valueLabel.text.lineHeight", mustBeInsteadOf: "valueLabel.text.lineSpacing" },
        valueLabelVerticalSymmetricSpacingAsTopSpacing: {
          newName: "valueLabelTopSpacing",
          dotSeparatedPath: "valueLabel.spacing.verticalSymmetric",
          required: false
        },
        valueLabelVerticalSymmetricSpacingAsBottomSpacing: {
          newName: "valueLabelBottomSpacing",
          dotSeparatedPath: "valueLabel.spacing.verticalSymmetric",
          required: false
        },
        valueLabelTopSpacing: {
          dotSeparatedPath: "valueLabel.spacing.top",
          required: false,
          incompatibleWith: "SVG_Icon.spacing.verticalSymmetric"
        },
        valueLabelBottomSpacing: {
          dotSeparatedPath: "valueLabel.spacing.bottom",
          required: false,
          incompatibleWith: "SVG_Icon.spacing.verticalSymmetric"
        }
      }
    })


    +provideDefaultSelectorWhenRootAndApply("." + Badge--YDF.CSS_NAMESPACE)

      BordersSizing(cachedValidReusables.bordersSizing)

      applyMixinStoredInObjectIfItIsNotNull(variation.rootElement.customDeclarations)


    if options.geometricModifiers.pillShape

      &.Badge--YDF__PillShapeGeometricModifier

        BORDER_RADIUS_TO_VALUE_TEXT_SIZE_RATIO = extractAndValidateObjectProperties({
          targetObject: variation,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          extracts: {
            borderRadiusToValueTextSizeRatio: {
              dotSeparatedPath: "rootElement.modifiers.pillShape.borderRadiusToValueTextSizeRatio", required: true
            }
          }
        }).borderRadiusToValueTextSizeRatio

        border-radius cachedValidReusables.valueLabelTextSize * BORDER_RADIUS_TO_VALUE_TEXT_SIZE_RATIO


    .Badge--YDF-SVG_Icon

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          width: { dotSeparatedPath: "SVG_Icon.width", required: false },
          height: {
            dotSeparatedPath: "SVG_Icon.height",
            requiredIf: {
              predicate: @(variation) { return isNull(getObjectValueByDotSeparatedPathSafely(variation, "SVG_Icon.width")) },
              conditionDescription: "'SVG_Icon.width' icon is null"
            }
          },
          verticalSymmetricMarginsAsTopMargin: {
            newName: "margin-top",
            dotSeparatedPath: "SVG_Icon.spacing.verticalSymmetric",
            required: false
          },
          verticalSymmetricMarginsAsBottomMargin: {
            newName: "margin-bottom",
            dotSeparatedPath: "SVG_Icon.spacing.verticalSymmetric",
            required: false
          },
          topMargin: {
            newName: "margin-top",
            dotSeparatedPath: "SVG_Icon.spacing.top",
            required: false,
            incompatibleWith: "SVG_Icon.spacing.verticalSymmetric"
          },
          bottomMargin: {
            newName: "margin-bottom",
            dotSeparatedPath: "SVG_Icon.spacing.bottom",
            required: false,
            incompatibleWith: "SVG_Icon.spacing.verticalSymmetric"
          },
          margin-left: { dotSeparatedPath: "SVG_Icon.spacing.left", required: true }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.SVG_Icon.customDeclarations)


    .Badge--YDF-Key

      // [ Approach ] The margins are reserved by `applyTextGeometryWithoutExtraSpaceCausedByLineHeight`.
      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          verticalSymmetricPaddingsAsTopPadding: {
            newName: "padding-top",
            dotSeparatedPath: "keyLabel.spacing.verticalSymmetric",
            required: false
          },
          verticalSymmetricPaddingsAsBottomPadding: {
            newName: "padding-bottom",
            dotSeparatedPath: "keyLabel.spacing.verticalSymmetric",
            required: false
          },
          topPadding: {
            newName: "padding-top",
            dotSeparatedPath: "keyLabel.spacing.top",
            required: false,
            incompatibleWith: "keyLabel.spacing.verticalSymmetric"
          },
          bottomPadding: {
            newName: "padding-bottom",
            dotSeparatedPath: "keyLabel.spacing.bottom",
            required: false,
            incompatibleWith: "keyLabel.spacing.verticalSymmetric"
          }
        }
      })

      MultilineKeyLabelStyles(mustSkipFontSizeApplying)

        applyTextGeometryWithoutExtraSpaceCausedByLineHeight(
          merge(
            extractAndValidateObjectProperties({
              targetObject: variation,
              targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
              extracts: {
                lineSpacing: { dotSeparatedPath: "keyLabel.text.lineSpacing", required: false },
                lineHeight: { dotSeparatedPath: "keyLabel.text.lineHeight", mustBeInsteadOf: "keyLabel.text.lineSpacing" }
              }
            }),
            {
              fontSize: cachedValidReusables.keyLabelTextSize,
              mustApplyNegativeMarginsToRootElement: true,
              mustSkipFontSizeApplying: mustSkipFontSizeApplying,
              mustAllowWordsBreakingAnywhere: isFalse(options.geometricModifiers.singleLine)
            }
          )
        )


      applyMixinStoredInObjectIfItIsNotNull(variation.keyLabel.customDeclarations)


      if options.geometricModifiers.singleLine

        font-size: cachedValidReusables.keyLabelTextSize


      else

        MultilineKeyLabelStyles(mustSkipFontSizeApplying: false)


      &:first-child

        validateAndAssignStoredInObjectCSS_Properties({
          targetObject: variation,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          assigments: {
            margin-left: { dotSeparatedPath: "keyLabel.spacing.leftWhenGoingFirst", required: true }
          }
        })


      if options.geometricModifiers.singleLine

        /{CONTEXT_SELECTOR}:not(.Badge--YDF__SingleLineGeometricModifier) .Badge--YDF-Key

          MultilineKeyLabelStyles(mustSkipFontSizeApplying: true)


    retireFrom({
      targetElementSelector: ".Badge--YDF-SVG_Icon",
      contextSelector: CONTEXT_SELECTOR,
      referenceElementSelector: ".Badge--YDF-Key",
      x: extractAndValidateObjectProperties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        extracts: {
          spacingAfterSVG_Icon: { dotSeparatedPath: "keyLabel.spacing.afterSVG_Icon", required: true },
        }
      }).spacingAfterSVG_Icon
    })


    .Badge--YDF-Value

      // [ Approach ] The margins are reserved by `applyTextGeometryWithoutExtraSpaceCausedByLineHeight`.
      applyIfNotNull({
        padding-top: cachedValidReusables.valueLabelTopSpacing,
        padding-bottom: cachedValidReusables.valueLabelBottomSpacing
      })

      MultilineValueLabelStyles()

        applyTextGeometryWithoutExtraSpaceCausedByLineHeight({
          fontSize: cachedValidReusables.valueLabelTextSize,
          lineSpacing: cachedValidReusables.valueLabelLineSpacing,
          lineHeight: cachedValidReusables.valueLabelLineHeight,
          mustApplyNegativeMarginsToRootElement: true,
          mustAllowWordsBreakingAnywhere: !options.geometricModifiers.singleLine
        })


      if !options.geometricModifiers.singleLine

        MultilineValueLabelStyles()


      applyMixinStoredInObjectIfItIsNotNull(variation.valueLabel.customDeclarations)


      &:first-child

        validateAndAssignStoredInObjectCSS_Properties({
          targetObject: variation,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          assigments: {
            margin-left: { dotSeparatedPath: "valueLabel.spacing.leftWhenGoingFirst", required: true }
          }
        })


      &:last-child

        validateAndAssignStoredInObjectCSS_Properties({
          targetObject: variation,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          assigments: {
            margin-right: { dotSeparatedPath: "valueLabel.spacing.right", required: true }
          }
        })


      if options.geometricModifiers.singleLine

        /{CONTEXT_SELECTOR}.Badge--YDF__SingleLineGeometricModifier .Badge--YDF-Value

          font-size: cachedValidReusables.valueLabelTextSize


        /{CONTEXT_SELECTOR}:not(.Badge--YDF__SingleLineGeometricModifier) .Badge--YDF-Value

          MultilineValueLabelStyles()


    retireFrom({
      definitions:\
          (".Badge--YDF-SVG_Icon" {
            x: extractAndValidateObjectProperties({
              targetObject: variation,
              targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
              extracts: { spacingAfterSVG_Icon: { dotSeparatedPath: "valueLabel.spacing.afterSVG_Icon", required: true } }
            }).spacingAfterSVG_Icon
          })\
          (".Badge--YDF-Key" {
            x: extractAndValidateObjectProperties({
              targetObject: variation,
              targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
              extracts: { spacingAfterKeyLabel: { dotSeparatedPath: "valueLabel.spacing.afterKeyLabel", required: true } }
            }).spacingAfterKeyLabel
          }),
      referenceElementSelector: ".Badge--YDF-Value",
      contextSelector: selector()
    })


    if options.loadingPlaceholder

      &.Badge--YDF__LoadingPlaceholder

        LoadingPlaceholder()

        validateAndAssignStoredInObjectCSS_Properties({
          targetObject: variation,
          targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
          assigments: {
            min-width: { dotSeparatedPath: "rootElement.loadingPlaceholder.minimalWidth", required: true }
          }
        })

        HEIGHT = computeTotalHeightByTextElementHeightSizingSpecification({
          type: TextElementHeightSizingTypes--YDF.natural,
          borders: cachedValidReusables.bordersSizing,
          paddings: {
            top: cachedValidReusables.valueLabelTopSpacing,
            bottom: cachedValidReusables.valueLabelBottomSpacing
          },
          fontSize: cachedValidReusables.valueLabelTextSize,
          lineHeight: 1
        })

        height HEIGHT


  applyThemeIndependentGeometricModifiers()

    if options.geometricModifiers.singleLine

      .Badge--YDF-Key

        /.Badge--YDF__SingleLineGeometricModifier &

          SingleLineTextElementOverflowSafety({ displayEllipsis: true })


        /:not(.Badge--YDF__SingleLineGeometricModifier) &

          word-break break-all


      .Badge--YDF-Value

        /.Badge--YDF__SingleLineGeometricModifier &

          SingleLineTextElementOverflowSafety({ displayEllipsis: true })


        /:not(.Badge--YDF__SingleLineGeometricModifier) &

          word-break break-all


  // ─── Decoration ────────────────────────────────────────────────────────────────────────────────────────────────────
  applyDecorativeVariation(themeName, variationName, variation)

    VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING = buildString(
      "Badge.${ themeName }Theme.${ variationName }Decoration",
      { themeName: themeName, variationName: variationName }
    )


    +provideDefaultSelectorWhenRootAndApply("." + Badge--YDF.CSS_NAMESPACE)

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          border-style: { dotSeparatedPath: "rootElement.borders.style", required: false },
          border-color: { dotSeparatedPath: "rootElement.borders.color", required: false },
          background-color: { dotSeparatedPath: "rootElement.background.color", required: false },
          background-image: { dotSeparatedPath: "rootElement.background.image", required: false }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.rootElement.customDeclarations)


    .Badge--YDF-SVG_Icon

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          fill: { dotSeparatedPath: "SVG_Icon.color", required: false }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.SVG_Icon.customDeclarations)


    .Badge--YDF-Key

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          font-weight: { dotSeparatedPath: "keyLabel.text.fontWeight", required: false },
          color: { dotSeparatedPath: "keyLabel.text.color", required: false }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.keyLabel.customDeclarations)


    .Badge--YDF-Value

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING,
        assigments: {
          font-weight: { dotSeparatedPath: "valueLabel.text.fontWeight", required: false },
          color: { dotSeparatedPath: "valueLabel.text.color", required: false }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.valueLabel.customDeclarations)


  applyThemeIndependentDecorativeModifiers()

    if options.decorativeModifiers.bordersDisguising

      .Badge--YDF__BordersDisguisingDecorativeModifier

        border-color transparent


    if options.decorativeModifiers.noBackground

      .Badge--YDF__NoBackgroundDecorativeModifier

        background none


  // ━━━ Applying ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  applyBasicRules()

  if !options.themeIndependentStylesOnly

    applyComponentThemes({
      CSS_Namespace: Badge--YDF.CSS_NAMESPACE,
      themes: properties.themes,
      areThemesCSS_ClassesCommon: options.areThemesCSS_ClassesCommon,
      themeIndependentGeometricVariations: options.themeIndependentGeometricVariations,
      applyGeometricVariation: applyGeometricVariation,
      applyDecorativeVariation: applyDecorativeVariation
    })

  applyThemeIndependentGeometricModifiers()
  applyThemeIndependentDecorativeModifiers()
