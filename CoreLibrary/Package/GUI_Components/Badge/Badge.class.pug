-

  class Badge__YDF {

    /**
     * @type { string }
     * @public
     * @readonly
     */
    static CSS_NAMESPACE = "Badge--YDF";


    /* ━━━ Theming ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */

    /**
     * @type { { [themeName: string]: string } }
     * @public
     * @description If you want to define new themes, do it only via `defineThemes` static method.
     */
    static Themes = { regular: "REGULAR" };

    /**
     * @param { Array<string> } themesNames
     * @return { typeof Badge__YDF }
     * @public
     */
    static defineThemes(themesNames) {
      return ComponentsAuxiliaries.defineThemes(themesNames, Badge__YDF);
    }

    /**
     * @type { boolean } [ areThemesCSS_ClassesCommon = ComponentsAuxiliaries.areComponentsThemesCommon ]
     * @private
     * */
    static areThemesCSS_ClassesCommon = ComponentsAuxiliaries.areComponentsThemesCommon;

    /**
     * @returns { typeof Badge__YDF }
     * @public
     * */
    static considerThemesAsCommon() {
      Badge__YDF.areThemesCSS_ClassesCommon = true;
      return Badge__YDF;
    }


    /* ─── Geometry ───────────────────────────────────────────────────────────────────────────────────────────────── */

    /**
     * @type { { [geometricVariationName: string]: string } }
     * @public
     * @description If you want to define new geometric variations, do it only via `defineGeometricVariations` static method.
     */
    static GeometricVariations = {
      regular: "REGULAR",
      small: "SMALL"
    };

    /**
     * @param { Array<string> } geometricVariationsNames
     * @return { typeof Badge__YDF }
     */
    static defineGeometricVariations(geometricVariationsNames) {
      return ComponentsAuxiliaries.defineGeometricVariations(geometricVariationsNames, Badge__YDF);
    }

    /**
     * @type {
     *   Readonly<{
     *     pillShape: string;
     *     singleLine: string;
     *   }>
     * }
     * @readonly
     */
    static GeometricModifiers = {
      pillShape: "PILL_SHAPE",
      singleLine: "SINGLE_LINE"
    };


    /* ─── Decoration ─────────────────────────────────────────────────────────────────────────────────────────────── */

    /**
     * @type { { [decorativeVariationsName: string]: string } }
     * @public
     * @description If you want to define new decorative variations, do it only via `defineDecorativeVariations` static method.
     */
    static DecorativeVariations = {
      veryCatchyBright: "VERY_CATCHY_BRIGHT",
      catchyBright: "CATCHY_BRIGHT",
      modestlyCatchyBright: "MODESTLY_CATCHY_BRIGHT",
      neutralBright: "NEUTRAL_BRIGHT",
      modestlyCalmingBright: "MODESTLY_CALMING_BRIGHT",
      calmingBright: "CALMING_BRIGHT",
      achromaticBright: "ACHROMATIC_BRIGHT",
      veryCatchyPastel: "VERY_CATCHY_PASTEL",
      catchyPastel: "CATCHY_PASTEL",
      modestlyCatchyPastel: "MODESTLY_CATCHY_PASTEL",
      neutralPastel: "NEUTRAL_PASTEL",
      modestlyCalmingPastel: "MODESTLY_CALMING_PASTEL",
      calmingPastel: "CALMING_PASTEL",
      achromaticPastel: "ACHROMATIC_PASTEL"
    };

    /**
     * @param { Array<string> } decorativeVariationsNames
     * @return { typeof Badge__YDF }
     */
    static defineDecorativeVariations(decorativeVariationsNames) {
      return ComponentsAuxiliaries.defineDecorativeVariations(decorativeVariationsNames, Badge__YDF);
    }

    /**
     * @type {
     *   Readonly<{
     *     bordersDisguising: string;
     *     noBackground: string;
     *   }>
     * }
     * @readonly
     */
    static DecorativeModifiers = {
      bordersDisguising: "BORDERS_DISGUISING",
      noBackground: "NO_BACKGROUND"
    };


    /* ━━━ Properties Specification ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */

    /**
     * @type { RawObjectDataProcessor.PropertiesSpecification }
     * @public
     * @readonly
     * */
    static propertiesSpecification = {

      keyLabel: {
        type: String,
        required: false
      },

      valueLabel: {
        type: String,
        required: true
      },

      theme: {
        type: String,
        defaultValue: Badge__YDF.Themes.regular,
        allowedAlternatives: Object.
            entries(Badge__YDF.Themes).
            map(([ key, value ]) => ({ key: `Badge__YDF.Themes.${ key }`, value }))
      },

      areThemesCSS_ClassesCommon: {
        type: Boolean,
        defaultValue: Badge__YDF.areThemesCSS_ClassesCommon
      },

      geometricVariation: {
        type: String,
        defaultValue: Badge__YDF.GeometricVariations.regular,
        allowedAlternatives: Object.
            entries(Badge__YDF.GeometricVariations).
            map(([ key, value ]) => ({ key: `Badge__YDF.GeometricVariations.${ key }`, value }))
      },

      geometricModifiers: {
        type: Array,
        defaultValue: [],
        element: {
          type: String,
          allowedAlternatives: Object.values(Badge__YDF.GeometricModifiers)
        }
      },

      decorativeVariation: {
        type: String,
        required: true,
        allowedAlternatives: Object.
            entries(Badge__YDF.DecorativeVariations).
            map(([ key, value ]) => ({ key: `Badge__YDF.DecorativeVariations.${ key }`, value }))
      },

      decorativeModifiers: {
        type: Array,
        defaultValue: [],
        element: {
          type: String,
          allowedAlternatives: Object.values(Badge__YDF.DecorativeModifiers)
        }
      },

      rootElementTag: {
        type: String,
        defaultValue: "span",
        minimalCharactersCount: 1
      }

    };

  }
