-

  class ${NAME}__YDF {

    /**
     * @type { string }
     * @public
     * @readonly
     */
    static CSS_NAMESPACE = "${NAME}--YDF";


    /* ━━━ Theming ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */

    /**
     * @type { { [themeName: string]: string } }
     * @public
     * @description If you want to define new themes, do it only via `defineThemes` static method.
     */
    static Themes = { regular: "REGULAR" };

    // == < If no children components: =================================================================================
    /**
     * @param { Array<string> } themesNames
     * @return { typeof ${NAME}__YDF }
     */
    static defineThemes(themesNames) {
      return ComponentsAuxiliaries.defineNewThemes(themesNames, ${NAME}__YDF);
    }
    // === < Or, if any children components: ===========================================================================
    /* [ Pitfall ] The classes of other components may not be declared yet thus initialization on demand required. */
    /**
     * @type { { [ childComponentName: string ]: { [ownThemeValue: string]: string } } | null }
     * @private
     * */
    static _selfAndChildrenComponentsThemesCorrespondence = null;

    /**
     * @type { { [ childComponentName: string ]: { [ownThemeValue: string]: string } } }
     * @public
     * */
    static get selfAndChildrenComponentsThemesCorrespondence() {
      return ${NAME}__YDF._selfAndChildrenComponentsThemesCorrespondence ?? (
        ${NAME}__YDF._selfAndChildrenComponentsThemesCorrespondence = {
          compoundControlShell: { [${NAME}__YDF.Themes.regular]: CompoundControlShell__YDF.Themes.regular },
          button: { [${NAME}__YDF.Themes.regular]: Button__YDF.Themes.regular }
        }
      );
    }

    /**
     * @param {
     *   { [ ownThemeKey: string ]: { [ childrenComponentKey: string ]: string; } }
     * } ownAndCorrespondingCompoundControlShellThemesDefinition
     * @returns { typeof ${NAME}__YDF }
     * @example
     * ${NAME}__YDF.defineThemes({
     *   redmond: {
     *     compoundControlShell: CompoundControlShell__YDF.Themes.redmond,
     *     button: Button__YDF.Themes.redmond
     *   },
     *   cupertino: {
     *     compoundControlShell: CompoundControlShell__YDF.Themes.cupertino,
     *     button: Button__YDF.Themes.cupertino
     *   }
     * });
     * @public
     */
    static defineThemes(ownAndCorrespondingCompoundControlShellThemesDefinition) {
      return ComponentsAuxiliaries.defineThemesAndSetCorrespondenceWithOnesOfChildrenComponents(
        ownAndCorrespondingCompoundControlShellThemesDefinition, ${NAME}__YDF
      );
    }
    // === > ===========================================================================================================
    /**
     * @type { boolean } [areThemesCSS_ClassesCommon=ComponentsAuxiliaries.areComponentsThemesCommon]
     * @private
     * */
    static areThemesCSS_ClassesCommon = ComponentsAuxiliaries.areComponentsThemesCommon;

    /**
     * @returns { typeof ${NAME}__YDF }
     * @public
     * */
    static considerThemesAsCommon() {
      ${NAME}__YDF.areThemesCSS_ClassesCommon = true;
      return ${NAME}__YDF;
    }


    /* ─── Geometry ───────────────────────────────────────────────────────────────────────────────────────────────── */

    /**
     * @type { { [geometricVariationName: string]: string } }
     * @public
     * @description If you want to define new geometric variations, do it only via `defineGeometricVariations` static method.
     */
    static GeometricVariations = {
      regular: "REGULAR",
      small: "SMALL"
    };

    // == < If no children components: =================================================================================
    /**
     * @param { Array<string> } geometricVariationsNames
     * @return { typeof ${NAME}__YDF }
     */
    static defineGeometricVariations(geometricVariationsNames) {
      return ComponentsAuxiliaries.defineGeometricVariations(geometricVariationsNames, ${NAME}__YDF);
    }
    // === < Or, if any children components: ===========================================================================
    /* [ Pitfall ] The classes of other components may not be declared yet thus initialization on demand required. */
    /** @type { { [ childComponentName: string ]: { [ownGeometricVariationValue: string]: string } } | null } */
    static _selfAndChildrenComponentsGeometricVariationsCorrespondence = null;

    /** @type { { [ childComponentName: string ]: { [ownGeometricVariationValue: string]: string } } } */
    static get selfAndChildrenComponentsGeometricVariationsCorrespondence() {
      return DropDownList__YDF._selfAndChildrenComponentsGeometricVariationsCorrespondence ?? (
        DropDownList__YDF._selfAndChildrenComponentsGeometricVariationsCorrespondence = {
          compoundControlShell: {
            [${NAME}__YDF.GeometricVariations.regular]: CompoundControlShell__YDF.GeometricVariations.regular,
            [${NAME}__YDF.GeometricVariations.small]: CompoundControlShell__YDF.GeometricVariations.small
          },
          button: {
            [${NAME}__YDF.GeometricVariations.regular]: Button__YDF.GeometricVariations.regular,
            [${NAME}__YDF.GeometricVariations.small]: Button__YDF.GeometricVariations.small
          }
        }
      );
    }

    static defineGeometricVariations(ownAndCorrespondingCompoundControlShellGeometricVariationsDefinition) {
      return ComponentsAuxiliaries.defineGeometricVariationsAndSetCorrespondenceWithOnesOfChildrenComponents(
        ownAndCorrespondingCompoundControlShellGeometricVariationsDefinition, ${NAME}__YDF
      );
    }
    // === > ===========================================================================================================

    /**
     * @type {
     *   Readonly<{
     *     bordersDisguising: string;
     *     noBackground: string;
     *   }>
     * }
     * @readonly
     */
    static GeometricModifiers = {
      pillShape: "PILL_SHAPE",
      squareShape: "SQUARE_SHAPE"
    };


    /* ─── Decoration ─────────────────────────────────────────────────────────────────────────────────────────────── */

    /**
     * @type { { [decorativeVariationsName: string]: string } }
     * @public
     * @description If you want to define new decorative variations, do it only via `defineDecorativeVariations` static method.
     */
    static DecorativeVariations = {
      regular: "REGULAR",
      accented: "ACCENTED",
      linkLike: "LINK_LIKE"
    };
    /* ...or one-liner for single decorative variation case: | TODO Delete this comment
    static DecorativeVariations = { regular: "REGULAR" };  */

    // == < If no children components: =================================================================================
    /**
     * @param { Array<string> } decorativeVariationsNames
     * @return { typeof ${NAME}__YDF }
     */
    static defineDecorativeVariations(decorativeVariationsNames) {
      return ComponentsAuxiliaries.defineDecorativeVariations(decorativeVariationsNames, Button__YDF);
    }
    // === < Or, if any children components: ===========================================================================
    /* [ Pitfall ] The classes of other components may not be declared yet, initialization on demand required. */
    /** @type { { [ childComponentName: string ]: { [ownDecorativeVariationValue: string]: string } } | null } */
    static _selfAndChildrenComponentsDecorativeVariationsCorrespondence = null;

    /** @type { { [ childComponentName: string ]: { [ownDecorativeVariationValue: string]: string } } } */
    static get selfAndChildrenComponentsDecorativeVariationsCorrespondence() {
      return DropDownList__YDF._selfAndChildrenComponentsDecorativeVariationsCorrespondence ?? (
        DropDownList__YDF._selfAndChildrenComponentsDecorativeVariationsCorrespondence = {
          compoundControlShell: {
            [DropDownList__YDF.DecorativeVariations.regular]: CompoundControlShell__YDF.DecorativeVariations.regular
          },
          button: {
            [DropDownList__YDF.DecorativeVariations.regular]: CompoundControlShell__YDF.DecorativeVariations.regular
          }
        }
      );
    }

    static defineDecorativeVariations(ownAndCorrespondingCompoundControlShellDecorativeVariationsDefinition) {
      return ComponentsAuxiliaries.defineDecorativeVariationsAndSetCorrespondenceWithOnesOfChildrenComponents(
        ownAndCorrespondingCompoundControlShellDecorativeVariationsDefinition, DropDownList__YDF
      );
    }
    // === > ===========================================================================================================

    /**
     * @type {
     *   Readonly<{
     *     bordersDisguising: string;
     *     noBackground: string;
     *   }>
     * }
     * @readonly
     */
    static DecorativeModifiers = {
      bordersDisguising: "BORDERS_DISGUISING",
      noBackground: "NO_BACKGROUND"
    };


    /* ━━━ Properties Specification ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */

    /**
     * @type { RawObjectDataProcessor.PropertiesSpecification }
     * @public
     * @readonly
     * */
    static propertiesSpecification = {

      HTML_Type: {
        type: String,
        required: false,
        allowedAlternatives: Object.values(${NAME}__YDF.HTML_Types)
      },

      label: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      accessibilityGuidance: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      externalLabelHTML_ID: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      guidance: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      placeholder: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      value: {
        preValidationModifications: rawValue => isNumber(rawValue) ? String(rawValue) : rawValue,
        type: String,
        required: false
      },

      disabled: {
        type: Boolean,
        required: false
      },

      readonly: {
        type: Boolean,
        required: false
      },

      required: {
        type: Boolean,
        required: false
      },

      mustDisplayAppropriateBadgeIfInputIsRequired: {
        type: Boolean,
        required: false
      },

      mustDisplayAppropriateBadgeIfInputIsOptional: {
        type: Boolean,
        required: false
      },

      mustAddInvisibleBadgeForHeightEqualizingWhenNoBadge: {
        type: Boolean,
        required: false
      },

      minimalCharactersCount: {
        type: Number,
        numbersSet: RawObjectDataProcessor.NumbersSets.nonNegativeInteger,
        required: false
      },

      maximalCharactersCount: {
        type: Number,
        numbersSet: RawObjectDataProcessor.NumbersSets.nonNegativeInteger,
        required: false,
        customValidators: {
          validationFunction: ({ currentPropertyValue: maximalCharactersCount, rawData__currentObjectDepth }) =>
              isUndefined(rawData__currentObjectDepth.minimalCharactersCount) ||
              (
                Number.isInteger(rawData__currentObjectDepth.minimalCharactersCount) &&
                maximalCharactersCount >= rawData__currentObjectDepth.minimalCharactersCount
              ),
          descriptionForLogging: "\"maximalCharactersCount\" could not be less than \"minimalCharactersCount\"."
        }
      },

      minimalNumericValue: {
        type: Number,
        numbersSet: RawObjectDataProcessor.NumbersSets.nonNegativeInteger,
        required: false
      },

      maximalNumericValue: {
        type: Number,
        numbersSet: RawObjectDataProcessor.NumbersSets.nonNegativeInteger,
        required: false,
        customValidators: {
          validationFunction: ({ currentPropertyValue: maximalNumericValue, rawData__currentObjectDepth }) =>
              isUndefined(rawData__currentObjectDepth.minimalNumericValue) ||
              (
                Number.isInteger(rawData__currentObjectDepth.minimalNumericValue) &&
                maximalNumericValue >= rawData__currentObjectDepth.minimalNumericValue
              ),
          descriptionForLogging: "\"maximalNumericValue\" could not be less than \"minimalNumericValue\"."
        }
      },

      // TODO If such property is required, replace it with more specific name, for example "inputOrTextAreaElementHTML_ID". | TODO Delete this comment
      coreElementHTML_ID: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      labelElementHTML_ID: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      theme: {
        type: String,
        defaultValue: ${NAME}__YDF.Themes.regular,
        allowedAlternatives: Object.
            entries(${NAME}__YDF.Themes).
            map(([ key, value ]) => ({ key: `${NAME}__YDF.Themes.$DS{ key }`, value }))
      },

      areThemesCSS_ClassesCommon: {
        type: Boolean,
        defaultValue: ${NAME}__YDF.areThemesCSS_ClassesCommon
      },

      geometricVariation: {
        type: String,
        defaultValue: ${NAME}__YDF.GeometricVariations.regular,
        allowedAlternatives: Object.
            entries(${NAME}__YDF.GeometricVariations).
            map(([ key, value ]) => ({ key: `${NAME}__YDF.GeometricVariations.$DS{ key }`, value }))
      },

      geometricModifiers: {
        type: Array,
        defaultValue: [],
        element: {
          type: String,
          allowedAlternatives: Object.values(${NAME}YDF.GeometricModifiers)
        }
      },

      decorativeVariation: {
        type: String,
        required: true,
        allowedAlternatives: Object.
            entries(${NAME}__YDF.DecorativeVariations).
            map(([ key, value ]) => ({ key: `${NAME}__YDF.DecorativeVariations.$DS{ key }`, value }))
      },

      decorativeModifiers: {
        type: Array,
        defaultValue: [],
        element: {
          type: String,
          allowedAlternatives: Object.values(${NAME}__YDF.DecorativeModifiers)
        }
      }

    };


    /* ━━━ State simulations specification ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */
    static statesSimulationsSpecification = {

      invalidInputHighlightingIfAnyValidationErrorsMessages: ComponentsAuxiliaries.
          validatableControlGeneralStatesSimulationsSpecification.invalidInputHighlightingIfAnyValidationErrorsMessages,

      validValueHighlightingIfNoValidationErrorsMessages: ComponentsAuxiliaries.
          validatableControlGeneralStatesSimulationsSpecification.validValueHighlightingIfNoValidationErrorsMessages,

      validationErrorsMessages: ComponentsAuxiliaries.validatableControlGeneralStatesSimulationsSpecification.
          validationErrorsMessages,

      asynchronousValidationsStatuses: ComponentsAuxiliaries.validatableControlGeneralStatesSimulationsSpecification.
          asynchronousValidationsStatuses

    };


    /* ━━━ Localization ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */
    /**
     * @type { ${NAME}Localization }
     * @public
     * @static
     * */
    static localization = ${NAME}YDF_ComponentLocalization__english; // TODO Change first letter to lowercase | TODO Delete this comment


    /* ━━━ ID Generating ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */
    /**
     * @type { number } Integers Only
     * @private
     * @static
     * */
    static counterForInstancesIDs_Generating = 0;

    /**
     * @returns { string } Generated ID
     * @public
     * @static
     * */
    static generateInstanceID() {
      ${NAME}__YDF.counterForInstancesIDs_Generating++;
      // TODO Change the part before `--` to SCREAMING_SNAKE_CASE | TODO Delete this comment
      return `${NAME}--YDF-${ ${NAME}__YDF.counterForInstancesIDs_Generating }`;
    }

  }
