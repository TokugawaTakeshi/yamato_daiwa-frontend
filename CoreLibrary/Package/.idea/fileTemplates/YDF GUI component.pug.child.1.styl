// TODO Import variations
@require "Themes/Regular/GeometricVariations/${NAME}-RegularTheme-RegularGeometry.styl"
@require "Themes/Regular/DecorativeVariations/${NAME}-RegularTheme-RegularDecoration.styl"


${NAME}--YDF = {

  componentIndependentCSS_Class: "RegularTheme--YDF",

  defaultProperties: {

    themes: {
      regular: {

        geometricVariations: {
          regular: ${NAME}-RegularTheme-RegularGeometry--YDF
        },

        decorativeVariations: {
          regular: ${NAME}-RegularTheme-RegularDecoration--YDF
        }

      }
    }
  },

  defaultOptions: {
    themeIndependentStylesOnly: false,
    areThemesCSS_ClassesCommon: false,
    loadingPlaceholder: true,
    themeIndependentGeometricVariations: true,
    geometricModifiers: {
      pillShape: true,
      squareShape: true,
      singleLine: true
    },
    decorativeModifiers: {
      bordersDisguising: true
    }
  }

}


provide${NAME}YDF_Component(
  preset = ${NAME}--YDF.defaultProperties,
  overridings = {},
  options = ${NAME}--YDF.defaultOptions,
  restParameters__MUST_NOT_BE...
)

  properties = deeplyCloneAndOverrideObject(preset, overridings)

  validateObjectTypeParameter({
    mixinOrFunctionName: "provide${NAME}YDF_Component",
    targetParameterNumber: 3,
    targetParameter: options,
    schema: {
      themeIndependentStylesOnly: {
        type: DataTypes.boolean,
        defaultValue: ${NAME}--YDF.defaultOptions.themeIndependentStylesOnly
      },
      areThemesCSS_ClassesCommon: {
        type: DataTypes.boolean,
        defaultValue: ${NAME}--YDF.defaultOptions.externalThemes
      },
      loadingPlaceholder: {
        type: DataTypes.boolean,
        defaultValue: ${NAME}--YDF.defaultOptions.loadingPlaceholder
      },
      themeIndependentGeometricVariations: {
        type: DataTypes.boolean,
        defaultValue: ${NAME}--YDF.defaultOptions.themeIndependentGeometricVariations
      },
      geometricModifiers: {
        type: DataTypes.object,
        properties: {
          pillShape: {
            type: DataTypes.boolean,
            defaultValue: ${NAME}--YDF.defaultOptions.geometricModifiers.pillShape
          },
          squareShape: {
            type: DataTypes.boolean,
            defaultValue: ${NAME}--YDF.defaultOptions.geometricModifiers.squareShape
          },
          singleLine: {
            type: DataTypes.boolean,
            defaultValue: ${NAME}--YDF.defaultOptions.geometricModifiers.singleLine
          }
        },
        defaultValue: ${NAME}--YDF.defaultOptions.geometricModifiers
      },
      decorativeModifiers: {
        type: DataTypes.object,
        properties: {
          bordersDisguising: {
            type: DataTypes.boolean,
            defaultValue: ${NAME}--YDF.defaultOptions.decorativeModifiers.bordersDisguising
          }
        },
        defaultValue: ${NAME}--YDF.defaultOptions.decorativeModifiers.bordersDisguising
      }
    },
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })


  // ━━━ Methods ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  applyBasicRules()

    .${NAME}--YDF

       // TODO Apply variation independent rules
       display flex


  // ─── Geometry ──────────────────────────────────────────────────────────────────────────────────────────────────────
  applyGeometricVariation(themeName, variationName, variation)

    VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING = buildString(
      "${NAME}.${DS}{ themeName }Theme.${DS}{ variationName }Geometry",
      { themeName: themeName, variationName: variationName }
    )

    CONTEXT_SELECTOR = selector() == "&" ? null : selector()

    +provideDefaultSelectorWhenRootAndApply(ROOT_ELEMENT_SELECTOR)

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_DATA_FOR_LOGGING,
        assigments: {
          min-width: {
            dotSeparatedPath: "rootElement.minimalWidth",
            required: false
          }
        }
      })

      applyMixinStoredInObjectIfItIsNotNull(variation.rootElement.customDeclarations)


    .${NAME}--YDF-ChildElement

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_DATA_FOR_LOGGING,
        assigments: {
          height: {
            dotSeparatedPath: "childElement.height",
            required: false
          }
        }
      })


  // ─── Decoration ────────────────────────────────────────────────────────────────────────────────────────────────────
  applyDecorativeVariation(themeName, variationName, variation)

    VARIATION_FULLY_QUALIFIED_NAME_FOR_LOGGING = buildString(
      "${NAME}.${DS}{ themeName }Theme.${DS}{ variationName }Decoration",
      { themeName: themeName, variationName: variationName }
    )

    CONTEXT_SELECTOR = selector() == "&" ? null : selector()

    +provideDefaultSelectorWhenRootAndApply(".${NAME}--YDF")

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_DATA_FOR_LOGGING,
        assigments: {
          background-color: { dotSeparatedPath: "rootElement.background.color", required: false }
        }
      })


    .${NAME}--YDF-ChildElement

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_DATA_FOR_LOGGING,
        assigments: {
          color: { dotSeparatedPath: "childElement.text.color", required: false }
        }
      })


  // ━━━ Applying ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  applyBasicRules()

  applyComponentThemes({
    CSS_Namespace: "${NAME}--YDF",
    themes: properties.themes,
    applyGeometricVariation: applyGeometricVariation,
    applyDecorativeVariation: applyDecorativeVariation
  })
