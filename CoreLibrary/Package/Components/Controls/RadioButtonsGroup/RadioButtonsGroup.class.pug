-

  class RadioButtonsGroup__YDF {

    static CSS_NAMESPACE = "RadioButtonsGroup--YDF";


    /* ━━━ Theming ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */
    static Themes = { regular: "REGULAR" };

    /* [ Pitfall ] The classes of other components may not be declared yet, initialization on demand required. */
    /** @type { { [ childComponentName: string ]: { [ownThemeValue: string]: string } } | null } */
    static _selfAndChildrenComponentsThemesCorrespondence = null;

    /** @type { { [ childComponentName: string ]: { [ownThemeValue: string]: string } } } */
    static get selfAndChildrenComponentsThemesCorrespondence() {
      return RadioButtonsGroup__YDF._selfAndChildrenComponentsThemesCorrespondence ?? (
        RadioButtonsGroup__YDF._selfAndChildrenComponentsThemesCorrespondence = {
          compoundControlShell: { [RadioButtonsGroup__YDF.Themes.regular]: CompoundControlShell__YDF.Themes.regular },
          radioButton: { [RadioButtonsGroup__YDF.Themes.regular]: RadioButton__YDF.Themes.regular }
        }
      );
    }

    /**
     * @param {
     *   { [ ownThemeKey: string ]: { [ childrenComponentKey: string ]: string; } }
     * } ownAndCorrespondingCompoundControlShellThemesDefinition
     * @example
     * RadioButtonsGroup__YDF.defineThemes({
     *   redmond: {
     *     compoundControlShell: CompoundControlShell__YDF.Themes.redmond,
     *     button: Button__YDF.Themes.redmond
     *   },
     *   cupertino: {
     *     compoundControlShell: CompoundControlShell__YDF.Themes.cupertino,
     *     button: Button__YDF.Themes.cupertino
     *   }
     * });
     */
    static defineThemes(ownAndCorrespondingCompoundControlShellThemesDefinition) {
      return ComponentsAuxiliaries.defineThemesAndSetCorrespondenceWithOnesOfChildrenComponents(
        ownAndCorrespondingCompoundControlShellThemesDefinition, RadioButtonsGroup__YDF
      );
    }

    static areThemesCSS_ClassesCommon = ComponentsAuxiliaries.areComponentsThemesCommon;

    static considerThemesAsCommon() {
      RadioButtonsGroup__YDF.areThemesCSS_ClassesCommon = true;
      return RadioButtonsGroup__YDF;
    }


    /* ─── Geometry ───────────────────────────────────────────────────────────────────────────────────────────────── */
    static GeometricVariations = {
      regular: "REGULAR",
      small: "SMALL"
    };

    /* [ Pitfall ] The classes of other components may not be declared yet, initialization on demand required. */
    /** @type { { [ childComponentName: string ]: { [ownGeometricVariationValue: string]: string } } | null } */
    static _selfAndChildrenComponentsGeometricVariationsCorrespondence = null;

    /** @type { { [ childComponentName: string ]: { [ownGeometricVariationValue: string]: string } } } */
    static get selfAndChildrenComponentsGeometricVariationsCorrespondence() {
      return RadioButtonsGroup__YDF._selfAndChildrenComponentsGeometricVariationsCorrespondence ?? (
        RadioButtonsGroup__YDF._selfAndChildrenComponentsGeometricVariationsCorrespondence = {
          compoundControlShell: {
            [RadioButtonsGroup__YDF.GeometricVariations.regular]: CompoundControlShell__YDF.GeometricVariations.regular,
            [RadioButtonsGroup__YDF.GeometricVariations.small]: CompoundControlShell__YDF.GeometricVariations.small
          },
          radioButton: {
            [RadioButtonsGroup__YDF.GeometricVariations.regular]: RadioButton__YDF.GeometricVariations.regular,
            [RadioButtonsGroup__YDF.GeometricVariations.small]: RadioButton__YDF.GeometricVariations.small
          }
        }
      );
    }

    static defineGeometricVariations(ownAndCorrespondingCompoundControlShellGeometricVariationsDefinition) {
      return ComponentsAuxiliaries.defineGeometricVariationsAndSetCorrespondenceWithOnesOfChildrenComponents(
        ownAndCorrespondingCompoundControlShellGeometricVariationsDefinition, RadioButtonsGroup__YDF
      );
    }


    /* ─── Decoration ─────────────────────────────────────────────────────────────────────────────────────────────── */
    static DecorativeVariations = { regular: "REGULAR" };

    /* [ Pitfall ] The classes of other components may not be declared yet, initialization on demand required. */
    /** @type { { [ childComponentName: string ]: { [ownDecorativeVariationValue: string]: string } } | null } */
    static _selfAndChildrenComponentsDecorativeVariationsCorrespondence = null;

    /** @type { { [ childComponentName: string ]: { [ownDecorativeVariationValue: string]: string } } } */
    static get selfAndChildrenComponentsDecorativeVariationsCorrespondence() {
      return RadioButtonsGroup__YDF._selfAndChildrenComponentsDecorativeVariationsCorrespondence ?? (
        RadioButtonsGroup__YDF._selfAndChildrenComponentsDecorativeVariationsCorrespondence = {
          compoundControlShell: {
            [RadioButtonsGroup__YDF.DecorativeVariations.regular]: CompoundControlShell__YDF.DecorativeVariations.regular
          },
          radioButton: {
            [RadioButtonsGroup__YDF.DecorativeVariations.regular]: RadioButton__YDF.DecorativeVariations.regular
          }
        }
      );
    }

    static defineDecorativeVariations(ownAndCorrespondingCompoundControlShellDecorativeVariationsDefinition) {
      return ComponentsAuxiliaries.defineDecorativeVariationsAndSetCorrespondenceWithOnesOfChildrenComponents(
        ownAndCorrespondingCompoundControlShellDecorativeVariationsDefinition, RadioButtonsGroup__YDF
      );
    }


    /* ━━━ Properties specification ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */
    static propertiesSpecification = {

      label: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      accessibilityGuidance: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      externalLabelHTML_ID: {
        type: String,
        requiredIf: {
          predicate: properties =>
              !isNonEmptyString(properties.label) &&
              !isNonEmptyString(properties.accessibilityGuidance),
          descriptionForLogging:
              "Neither \"label\" nor \"accessibilityGuidance\" has been specified with non-empty strings"
        },
        minimalCharactersCount: 1
      },

      guidance: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      selectingOptions: {

        type: Array,
        required: false,

        element: {
          type: Object,
          properties: {
            key: {
              type: RawObjectDataProcessor.ValuesTypesIDs.oneOf,
              required: true,
              alternatives: [
                {
                  type: String,
                  minimalCharactersCount: 1
                },
                {
                  type: Number,
                  numbersSet: RawObjectDataProcessor.NumbersSets.anyRealNumber
                }
              ]
            },
            label: {
              type: RawObjectDataProcessor.ValuesTypesIDs.oneOf,
              required: true,
              alternatives: [
                {
                  type: String,
                  minimalCharactersCount: 1
                },
                {
                  type: Number,
                  numbersSet: RawObjectDataProcessor.NumbersSets.anyRealNumber
                }
              ]
            }
          }
        }

      },

      initiallySelectedOptionKey: {
        type: RawObjectDataProcessor.ValuesTypesIDs.oneOf,
        required: false,
        alternatives: [
          {
            type: String,
            minimalCharactersCount: 1
          },
          {
            type: Number,
            numbersSet: RawObjectDataProcessor.NumbersSets.anyRealNumber
          }
        ]
      },

      radioButtonsHTML_Name: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      disabled: {
        type: Boolean,
        defaultValue: false
      },

      readonly: {
        type: Boolean,
        defaultValue: false
      },

      required: {
        type: Boolean,
        defaultValue: false
      },

      mustDisplayAppropriateBadgeIfInputIsRequired: {
        type: Boolean,
        defaultValue: false
      },

      mustDisplayAppropriateBadgeIfInputIsOptional: {
        type: Boolean,
        defaultValue: false
      },

      mustAddInvisibleBadgeForHeightEqualizingWhenNoBadge: {
        type: Boolean,
        defaultValue: false
      },

      labelElementHTML_ID: {
        type: String,
        required: false,
        minimalCharactersCount: 1
      },

      theme: {
        type: String,
        defaultValue: RadioButtonsGroup__YDF.Themes.regular,
        allowedAlternatives: Object.
            entries(RadioButtonsGroup__YDF.Themes).
            map(([ key, value ]) => ({ key: `RadioButtonsGroup__YDF.Themes.${ key }`, value }))
      },

      areThemesCSS_ClassesCommon: {
        type: Boolean,
        defaultValue: RadioButtonsGroup__YDF.areThemesCSS_ClassesCommon
      },

      geometricVariation: {
        type: String,
        defaultValue: RadioButtonsGroup__YDF.GeometricVariations.regular,
        allowedAlternatives: Object.
            entries(RadioButtonsGroup__YDF.GeometricVariations).
            map(([ key, value ]) => ({ key: `RadioButtonsGroup__YDF.GeometricVariations.${ key }`, value }))
      },

      decorativeVariation: {
        type: String,
        defaultValue: RadioButtonsGroup__YDF.DecorativeVariations.regular,
        allowedAlternatives: Object.
            entries(RadioButtonsGroup__YDF.DecorativeVariations).
            map(([ key, value ]) => ({ key: `RadioButtonsGroup__YDF.DecorativeVariations.${ key }`, value }))
      }

    };


    /* ━━━ State simulations specification ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */
    static statesSimulationsSpecification = {

      invalidInputHighlightingIfAnyValidationErrorsMessages: ComponentsAuxiliaries.
          validatableControlGeneralStatesSimulationsSpecification.invalidInputHighlightingIfAnyValidationErrorsMessages,

      validValueHighlightingIfNoValidationErrorsMessages: ComponentsAuxiliaries.
          validatableControlGeneralStatesSimulationsSpecification.validValueHighlightingIfNoValidationErrorsMessages,

      validationErrorsMessages: ComponentsAuxiliaries.validatableControlGeneralStatesSimulationsSpecification.
          validationErrorsMessages,

      asynchronousValidationsStatuses: ComponentsAuxiliaries.validatableControlGeneralStatesSimulationsSpecification.
          asynchronousValidationsStatuses

    };


    /* ━━━ Routines ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ */
    /* ─── ID generating ──────────────────────────────────────────────────────────────────────────────────────────── */
    static counterForID_Generating = 0;

    static generateComponentID() {
      RadioButtonsGroup__YDF.counterForID_Generating++;
      return `RADIO_BUTTONS_GROUP--YDF-${ RadioButtonsGroup__YDF.counterForID_Generating }`;
    }

  }
