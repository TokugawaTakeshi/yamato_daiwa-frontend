@require "Themes/Regular/GeometricVariations/TextBox-RegularGeometry.styl"
@require "Themes/Regular/GeometricVariations/TextBox-SmallGeometry.styl"
@require "Themes/Regular/DecorativeVariations/TextBox-RegularDecoration.styl"


TextBox--YDF = {

  defaultProperties: {

    themes: {
      regular: {

        geometricVariations: {
          regular: TextBox-RegularGeometry--YDF
        },

        decorativeVariations: {
          regular: TextBox-RegularDecoration--YDF
        }
      }
    }
  }
}


provideTextBoxYDF_Component(
  preset = TextBox--YDF.defaultProperties,
  overridings = {},
  options = {
    themeIndependentStylesOnly: false,
    externalThemes: false,
    loadingPlaceholder: true
  },
  restParameters__MUST_NOT_BE...
)

  properties = deeplyCloneAndOverrideObject(preset, overridings)

  validateObjectTypeParameter({
    mixinOrFunctionName: "provideTextBoxYDF_Component",
    targetParameterNumber: 3,
    targetParameter: options,
    schema: {
      themeIndependentStylesOnly: {
        type: DataTypes.boolean,
        required: true
      },
      externalThemes: {
        type: DataTypes.boolean,
        required: true
      },
      loadingPlaceholder: {
        type: DataTypes.boolean,
        required: true
      }
    },
    followingParametersWhichMustNotBe: restParameters__MUST_NOT_BE
  })


  // === Methods =======================================================================================================
  applyBasicRules()

    .TextBox--YDF-InputOrTextAreaElement

      TextBoxLikeElementsPrimer()

      width 100%


    input.TextBox--YDF-InputOrTextAreaElement

      line-height 1


  // --- Geometry ------------------------------------------------------------------------------------------------------
  applyGeometricVariation(themeName, variationName, variation)

    VARIATION_DATA_FOR_LOGGING = buildString(
      "TextBox.${ themeName }Theme.${ variationName }Geometry",
      {
        themeName: themeName,
        variationName: variationName
      }
    )

    ROOT_ELEMENT_SELECTOR = getCurrentSelectorSubstitutingRoot(".TextBox--YDF")

    +provideDefaultSelectorWhenRootAndApply(".TextBox--YDF")

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_DATA_FOR_LOGGING,
        assigments: {
          min-width: { dotSeparatedPath: "rootElement.minimalWidth", required: false }
        }
      })


    .TextBox--YDF-InputOrTextAreaElement

      extractedVariables = extractAndValidateObjectProperties({
        targetObject: variation,
        targetObjectName: VARIATION_DATA_FOR_LOGGING,
        extracts: {
          paddingsSpecification: { dotSeparatedPath: "inputOrTextAreaElement.paddings", required: false },
          bordersSpecification: { dotSeparatedPath: "inputOrTextAreaElement.borders", required: false }
        }
      })

      paddingsSpecification = extractedVariables.paddingsSpecification
      bordersSpecification = extractedVariables.bordersSpecification

      Paddings(paddingsSpecification)
      BordersSizing(bordersSpecification)


      /{ROOT_ELEMENT_SELECTOR} input.TextBox--YDF-InputOrTextAreaElement

        // [ CSS Theory ] In the "input" case, the height could not equals to sum of line height, vertical paddings and borders,
        //  so it must be manually fixed
        // https://stackoverflow.com/a/42888592/4818123
        TextElementHeightSizing({
          type: TextElementHeightSizingTypes--YDF.natural,
          //mustFixateHeight: true,
          //topBorderWidth: getFirstNonNullArrayElement(
          //  bordersSpecification.all bordersSpecification.verticalSymmetric bordersSpecification.top
          //),
          //topPadding: getFirstNonNullArrayElement(
          //  paddingsSpecification.all paddingsSpecification.verticalSymmetric paddingsSpecification.top
          //),
          fontSize: extractAndValidateObjectProperties({
            targetObject: variation,
            targetObjectName: VARIATION_DATA_FOR_LOGGING,
            extracts: {
              textSize: { dotSeparatedPath: "inputOrTextAreaElement.text.size", required: true }
            }
          }).textSize,
          lineHeight: 1
          //bottomPadding: getFirstNonNullArrayElement(
          //  paddingsSpecification.all paddingsSpecification.verticalSymmetric paddingsSpecification.bottom
          //),
          //bottomBorderWidth: getFirstNonNullArrayElement(
          //  bordersSpecification.all bordersSpecification.verticalSymmetric bordersSpecification.bottom
          //)
        })


    textarea.TextBox--YDF-InputOrTextAreaElement

      // [ CSS Theory ] In the "input" case, the height could not equals to sum of "line-height", vertical paddings and borders.
      // https://stackoverflow.com/a/42888592/4818123

      applyTextGeometryWithoutExtraSpaceCausedByLineHeight(
        merge(
          extractAndValidateObjectProperties({
            targetObject: variation,
            targetObjectName: VARIATION_DATA_FOR_LOGGING,
            extracts: {
              fontSize: { dotSeparatedPath: "inputOrTextAreaElement.text.size", required: true },
              lineSpacing: { dotSeparatedPath: "inputOrTextAreaElement.text.lineSpacing", required: false },
              lineHeight: { dotSeparatedPath: "inputOrTextAreaElement.text.lineHeight", mustBeInsteadOf: "inputOrTextAreaElement.text.lineSpacing" }
            }
          }),
          { mustAllowWordsBreakingAnywhere: true }
        )
      )


  // --- Decoration ----------------------------------------------------------------------------------------------------
  applyDecorativeVariation(themeName, variationName, variation)

    VARIATION_DATA_FOR_LOGGING = buildString(
      "TextBox.${themeName}Theme.${variationName}Decoration",
      {
        themeName: themeName,
        variationName: variationName
      }
    )

    ROOT_ELEMENT_SELECTOR = getCurrentSelectorSubstitutingRoot(".TextBox--YDF")


    .TextBox--YDF-InputOrTextAreaElement

      validateAndAssignStoredInObjectCSS_Properties({
        targetObject: variation,
        targetObjectName: VARIATION_DATA_FOR_LOGGING,
        assigments: {
          border-style: { dotSeparatedPath: "inputOrTextAreaElement.border.style", required: false },
          border-color: { dotSeparatedPath: "inputOrTextAreaElement.border.color", required: false },
          color: { dotSeparatedPath: "inputOrTextAreaElement.text.color", required: false }
        }
      })


      /{ROOT_ELEMENT_SELECTOR}.TextBox--YDF__InvalidInputState &

        border-color: JQueryUI_BaseTheme.error.borderColor
        background: JQueryUI_BaseTheme.error.background


  // === Applying ======================================================================================================
  applyBasicRules()

  if !options.themeIndependentStylesOnly

    applyComponentThemes({
      CSS_Namespace: "TextBox--YDF",
      themes: properties.themes,
      applyGeometricVariation: applyGeometricVariation,
      applyDecorativeVariation: applyDecorativeVariation
    })
