-

  class BadgeGalleryOptions {

    static mustVisuallyHideTopHeading = false;

    static visuallyHideTopHeadingIf(condition) {
      BadgeGalleryOptions.mustVisuallyHideTopHeading = condition;
      return BadgeGalleryOptions;
    }


    static mustVisuallyHideAllHeadings = false;

    static visuallyHideAllHeadings() {
      BadgeGalleryOptions.mustVisuallyHideAllHeadings = true;
      BadgeGalleryOptions.mustVisuallyHideTopHeading = true;
      return BadgeGalleryOptions;
    }


    static Partials = {
      minimal: "MINIMAL",
      keysAndValues: "KEYS_AND_VALUES",
      longLabels: "LONG_LABELS",
      iconsAndKeysAndValues: "ICONS_AND_KEYS_AND_VALUES",
      iconsAndValues: "ICONS_AND_VALUES",
      pillShapeGeometricModifier: "PILL_SHAPE_GEOMETRIC_MODIFIER",
      singleLineGeometricModifier: "SINGLE_LINE_GEOMETRIC_MODIFIER",
      bordersDisguisingDecorativeModifier: "BORDERS_DISGUISING_DECORATIVE_MODIFIER",
      noBackgroundDecorativeModifier: "NO_BACKGROUND_DECORATIVE_MODIFIER",
      loadingPlaceholder: "LOADING_PLACEHOLDER"
    };

    static partialsRenderingFlags =
        Object.values(BadgeGalleryOptions.Partials).
        reduce(
          (objectWorkpiece, partialValue) => {
            objectWorkpiece[partialValue] = true;
            return objectWorkpiece;
          },
          {}
        );

    static renderSinglePartial(targetPartialValue) {

      for (const [ partialKey, partialValue ] of Object.entries(BadgeGalleryOptions.Partials)) {
        BadgeGalleryOptions.partialsRenderingFlags[partialValue] =
            BadgeGalleryOptions.Partials[partialKey] === targetPartialValue;
      }

      return BadgeGalleryOptions;

    }

    static renderAdditionalThemes() {

      Badge__YDF.
          defineNewThemes([ "Cupertino" ]).
          defineNewGeometricVariations(["Small"]).
          defineNewDecorativeVariations(["Glamour"]);

      return BadgeGalleryOptions;

    }

    static get mustRenderGeometricModifiersSection() {
      return !!Object.entries(BadgeGalleryOptions.partialsRenderingFlags).
          filter(([partialKey]) => partialKey.includes("GEOMETRIC_MODIFIER")).
          find(([, mustRender]) => mustRender)
    }

    static get mustRenderDecorativeModifiersSection() {
      return !!Object.entries(BadgeGalleryOptions.partialsRenderingFlags).
          filter(([partialKey]) => partialKey.includes("DECORATIVE_MODIFIER")).
          find(([, mustRender]) => mustRender)
    }

  }
