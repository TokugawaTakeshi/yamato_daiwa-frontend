extends ../../../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../../../SharedAssets/Markup/SharedAssets.english.pug
  include ../../../../../SharedComponents/SharedComponents.english.pug


block append Metadata

  -

    RegularWebPageTemplate__YDF.configure({
      metadata: {
        title: buildHTML_PageTitle("RegularWebPageTemplate"),
        description:
            "\"RegularWebPageTemplate\" Pug template suggested by \"Yamato Daiwa Frontend\" library (abbreviation: " +
              "\"YDF\") allows to generate the valid HTML document just by inheriting by \"extends\" keyword, herewith " +
              "the output code generating could be flexibly customized."
      },
      stylesSheetsURIs: [
        "$CommonStyles",
        "$LayoutsStyles/TwoColumns/TwoColumnsLayout.css",
        "$PreMadesStyles",
        "@CustomizedExternalComponents"
      ]
    });

    RoutingEmulator.setCurrentRoute("coreLibrary.markup.pagesTemplates.RegularWebPage");

    LanguageDropDownList__YDF_DK.setLinks({
      japanese: routing.japanese.coreLibrary.$children.markup.$children.pagesTemplates.$children.RegularWebPage.$URI,
      russian: routing.russian.coreLibrary.$children.markup.$children.pagesTemplates.$children.RegularWebPage.$URI
    });

    const {
      $sectioning: localizedSectioning,
      $heading: topHeading
    } = routing.english.coreLibrary.$children.markup.$children.pagesTemplates.$children.RegularWebPage;


block append HeadScripts

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    //- ━━━ `RegularWebPageTemplate` ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    h1.Article-Heading1!= topHeading

    +PageNotReadyApology--YDPD({ currentState: PageNotReadyApology__YDPD.States.notCheckedByNativeSpeakers })

    p.Article-Paragraph.
      The main #[+Term--YDID Pug template] for generating of the #[+Keyword--YDID valid] #[+Term--YDID HTML5 pages]
        #[+Keyphrase--YDID recommended for most cases].

    ul.Article-UnorderedList

      li
        | It is assumed that this #[+Term--YDID template] will be
        |
        +Link--YDF({
          unendorsedExternalURI: sharedExternalLinks.pug.homePage.templateInheritance
        }) inherited
        |
        | with #[+ImportantEntity--YDID extends] #[+Term--YDID keyword].

      li
        +Link--YDF({ unendorsedExternalURI: sharedExternalLinks.pug.homePage.includes }) Includes
        |
        | the #[+ImportantEntity--YDID Functionality.pug] file with additional
        |
        +Link--YDF({
          unendorsedExternalURI: sharedExternalLinks.pug.homePage.inlineJavaScript
        }) JavaScript functionality for Pug
        |
        | (including
        |
        +Link--YDF({
          internalURI: localizedRouting.coreLibrary.$children.
              markup.$children.
              functionality.$children.
              inlineJavaScript.$children.
              YDEE_Integration.$URI
        }) integration with @yamato-daiwa/es-extensions
        | ), that is why
        |
        +Link--YDF({ unendorsedExternalURI: sharedExternalLinks.pug.homePage.includes }) including
        |
        | of this file repeatedly #[+Keyphrase--YDID will cause the error].

    p.Article-Paragraph.
      If #[+Keyword--YDID only] #[+Term--YDID inherit] the #[+Term__Contrast--YDID Pug file] from this #[+Term--YDID template]
        #[+Keyphrase--YDID but #[+Keyword--YDID without] adding any other code], then the output code
        #[+Keyword--YDID already] will represent the valid #[+Term--YDID HTML document]:

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.HTML }): :code_listing--yda
        <!DOCTYPE html>

          <html lang="en">

          <head>
            <title>Untitled</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
          </head>

          <body></body>

        </html>

    p.Article-Paragraph
      | Because the #[+ImportantEntity__Code--YDID lang] #[+Term--YDID attribute] is #[+Keyword--YDID required] for
      |   #[+ImportantEntity__Code--YDID html] #[+Term--YDID tag] and #[+ImportantEntity__Code--YDID title]
      |   #[+Term--YDID tag] is also #[+Keyword--YDID necessary], they has been generated according the default settings.
      | Most likely you want to change them, particularly if you page is non-English.
      | These and many other things could be done by
      |   #[+Link--YDF({ anchor: localizedSectioning.configurationClass.$anchor }) RegularWebPageTemplate__YDF],
      |   the #[+Term--YDID JavaScript class] for the configuring which could be accessed from
      |
      +Link--YDF({
        unendorsedExternalURI: sharedExternalLinks.pug.homePage.inlineJavaScript
      }) JavaScript block of Pug preprocessor
      | .


    //- ━━━ `RegularWebPageTemplate__YDF` Configuration Class ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      innerHTML: localizedSectioning.configurationClass.$heading,
      HTML_ID: localizedSectioning.configurationClass.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      Allows to configure the generating of the typical #[+Term--YDID HTML code].
      This #[+Term--YDID class] is available starting from the end of the
        #[+Link--YDF({ anchor: localizedSectioning.pugBlocks.$children.Functionality.$anchor }) Functionality]
        #[+Link--YDF({ unendorsedExternalURI: sharedExternalLinks.pug.homePage.block }) Pug block], but it
        is recommended to #[+Keyword--YDID access] to this #[+Term--YDID class] in
        #[+Link--YDF({ anchor: localizedSectioning.pugBlocks.$children.Metadata.$anchor }) Metadata] #[+Term--YDID block],
        because #[+Keyword--YDID majority] of settings either related with
        #[+Link--YDF({ unendorsedExternalURI: sharedExternalLinks.mdn.HTML.metaTags }) meta tags], or is the
        #[+Term--YDID metadata] at its core:

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug }): :code_listing--yda
        block append Metadata

          -

            RegularWebPageTemplate__YDF.configure({
              metadata: {
                locale: "en",
                title: "Produts List — \"Galore\" Online Store"
              }
            });

    p.Article-Paragraph.
      The settings could be specified by calling the #[+ImportantEntity__Code--YDID configure] #[+Keyword--YDID static]
        #[+Term--YDID method], the #[+Keyword--YDID only] #[+Term--YDID parameter] of which is a
        #[+Keyword--YDID multi-level] #[+Term--YDID configuration] #[+Term--YDID object]:

    dl.Article-DescriptionList

      dt metadata.locale
      dd.
        Used to fill the #[+Term--YDID attribute] #[+ImportantEntity__Code--YDID lang] of the #[+Term--YDID tag]
          #[+ImportantEntity__Code--YDID html].
        Since this #[+Term--YDID attribute] is #[+Keyword--YDID required]
          #[+Keyphrase--YDID for the #[+ImportantEntity__Code--YDID html] #[+Term--YDID tag]], there is the default
          value #[+ImportantEntity--YDID "en"], which #[+Keyword--YDID must] be replaced with another value
          #[+Keyphrase--YDID for non-English pages].
        It is noteworthy, but the value of the #[+Term--YDID attribute] #[+ImportantEntity__Code--YDID lang] is
          officially called #[+Term--YDID "language tag"], what is confusing, that is why this property has been named
          the #[+ImportantEntity__Code--YDID "locale"].

      dt metadata.title
      dd.
        Used to fill the #[+Term--YDID tag] #[+ImportantEntity__Code--YDID title].
        Since this #[+Term--YDID tag] is #[+Keyword--YDID required], there is a default value —
          #[+ImportantEntity--YDID "Untitled"].

      dt metadata.description
      dd.
        If defined, then the #[+Term--YDID tag] #[+ImportantEntity__Code--YDID meta] will be added with the
          #[+Term--YDID attributes] #[+ImportantEntity__Code--YDID name="description"] and
          #[+ImportantEntity__Code--YDID content], the last of which will be filled with the specified value.

      dt metadata.keywords
      dd.
        If defined, then the #[+Term--YDID tag] #[+ImportantEntity__Code--YDID meta] will be added with the
          #[+Term--YDID attributes] #[+ImportantEntity__Code--YDID name="keywords"] and
          #[+ImportantEntity__Code--YDID content], the last of which will be filled with the specified value.

      dt metadata.author
      dd.
        If defined, then the #[+Term--YDID tag] #[+ImportantEntity__Code--YDID meta] will be added with the
          #[+Term--YDID attributes] #[+ImportantEntity__Code--YDID name="author"] and
          #[+ImportantEntity__Code--YDID content], the last of which will be filled with the specified value.

      dt faviconURI
      dd.
        If defined, then #[+ImportantEntity--YDID 2] #[+Term--YDID tags] #[+ImportantEntity__Code--YDID link] will be
          added, herewith one of them will have the #[+ImportantEntity__Code--YDID rel="icon"] #[+Term--YDID attribute],
          and another one will have #[+ImportantEntity__Code--YDID rel="shortcut icon"], #[+Term--YDID attribute],
          and also #[+Keyword--YDID both] will have the #[+ImportantEntity__Code--YDID href] #[+Term--YDID attribute]
          filled with the specified value.
        This value #[+Keyword--YDID must] be a #[+Keyword--YDID valid] #[+ImportantEntity--YDID URI] referencing the
          icon file to be displayed on the browser tab.

      dt AMP_VersionURI
      dd.
        If defined, then the #[+Term--YDID tag] #[+ImportantEntity__Code--YDID link] will be added with the
          #[+Term--YDID attributes] #[+ImportantEntity__Code--YDID rel="amphtml"] and
          #[+ImportantEntity__Code--YDID href], the last of which will be filled with the specified value.
        This value #[+Keyword--YDID must] be a #[+Keyword--YDID valid] #[+ImportantEntity--YDID URI] referencing the
          #[+Term--YDID AMP version] of the #[+Keyword--YDID same] page.

      dt stylesSheetsURIs
      dd.
        If defined with the #[+Term--YDID array], then #[+Keyphrase--YDID for each] its #[+Term--YDID element] the
          #[+Term--YDID tag] #[+ImportantEntity__Code--YDID link] with #[+ImportantEntity__Code--YDID rel="stylesheet"]
          and #[+ImportantEntity__Code--YDID href] #[+Term--YDID attributes] will be added, herewith the
          #[+ImportantEntity__Code--YDID href] #[+Term--YDID attribute] will be filled by the #[+Term--YDID array element].
        #[+Keyword--YDID Each] of these #[+Term--YDID elements] #[+Keyword--YDID must] be the #[+Term--YDID string]
          and represent the #[+Keyword--YDID valid] #[+ImportantEntity--YDID URI] referencing the #[+Term--YDID CSS file].

      dt scripts.atEndOfHead
      dd

        p.Article-Paragraph.
          If defined with the #[+Term--YDID array], then #[+Keyphrase--YDID for each] its #[+Term--YDID element] the
            #[+Term--YDID tag] #[+ImportantEntity__Code--YDID script] with #[+ImportantEntity__Code--YDID src]
            #[+Term--YDID attribute] will be added to #[+Keyword--YDID end] of the #[+ImportantEntity__Code--YDID head]
            #[+Term--YDID tag], herewith the #[+ImportantEntity__Code--YDID src] #[+Term--YDID attribute] will be filled
            by the #[+Term--YDID array element].
          #[+Keyword--YDID Each] of these #[+Term--YDID elements] #[+Keyword--YDID must] be the #[+Term--YDID string]
            and represent the #[+Keyword--YDID valid] #[+ImportantEntity--YDID URI] referencing the
            #[+Term--YDID JavaScript file].

        ul.Article-UnorderedList

          li.
            #[+Keyword--YDID Generally] it is #[+Keyword--YDID not] recommended to add the scripts to the end of
              #[+Keyword__Contrast--YDID head] #[+Term--YDID tag] because without specific measures the rendering of
              the #[+Term--YDID HTML page] will be #[+Keyword--YDID suspended] until the script will be loaded.
            The exceptions are the cases such as the third-party scripts for the analytics.

          li.
            The #[+ImportantEntity__Code--YDID script] #[+Term--YDID tags] added by this way
              will&nbsp;#[+Keyword--YDID not]&nbsp;have #[+Keyword__Contrast--YDID any] #[+Term--YDID attributes]
              except #[+ImportantEntity__Code--YDID src].
            If you need any other #[+Term--YDID attributes], add the #[+ImportantEntity__Code--YDID script]
              #[+Term--YDID tag] manually using the #[+ImportantEntity__Code--YDID HeadScripts]
              #[+Link--YDF({ unendorsedExternalURI: sharedExternalLinks.pug.homePage.block }) Pug block].

      dt scripts.atEndOfBody
      dd

        p.Article-Paragraph.
          If defined with the #[+Term--YDID array], then #[+Keyphrase--YDID for each] its #[+Term--YDID element] the
            #[+Term--YDID tag] #[+ImportantEntity__Code--YDID script] with #[+ImportantEntity__Code--YDID src]
            #[+Term--YDID attribute] will be added to #[+Keyword--YDID end] of the #[+ImportantEntity__Code--YDID body]
            #[+Term--YDID tag], herewith the #[+ImportantEntity__Code--YDID src] #[+Term--YDID attribute] will be filled
             by the #[+Term--YDID array element].
          #[+Keyword--YDID Each] of these #[+Term--YDID elements] #[+Keyword--YDID must] be the #[+Term--YDID string]
            and represent the #[+Keyword--YDID valid] #[+ImportantEntity--YDID URI] referencing the
            #[+Term--YDID JavaScript file].

        ul.Article-UnorderedList

          li.
            This method of adding of the scripts is the #[+Keyword--YDID recommended] one because this way the loading
              of the scripts will&nbsp;#[+Keyword--YDID not]&nbsp;detain the page rendering.

          li.
            The #[+ImportantEntity__Code--YDID script] #[+Term--YDID tags] added by this way
              will&nbsp;#[+Keyword--YDID not]&nbsp;have #[+Keyword__Contrast--YDID any] #[+Term--YDID attributes]
              except #[+ImportantEntity__Code--YDID src].
            If you need any other #[+Term--YDID attributes], add the #[+ImportantEntity__Code--YDID script]
              #[+Term--YDID tag] manually using the #[+ImportantEntity__Code--YDID EndBodyScripts]
              #[+Link--YDF({ unendorsedExternalURI: sharedExternalLinks.pug.homePage.block }) Pug block].

    p.Article-Paragraph.
      The #[+ImportantEntity__Code--YDID configure] #[+Term--YDID method] #[+Keyword--YDID could] be called
        #[+Keyword__Contrast--YDID repeatedly], but because the #[+Keyword--YDID repeated] specifying of
        #[+Keyword--YDID same] properties will #[+Keyword--YDID overwrite] the previous values, the calling of this
        #[+Term--YDID method] repeatedly is meaningful #[+Keyword--YDID only] if specify the
        #[+Keyword--YDID non-repetitive] properties.
      For example, if your site or application has single natural language (assume that English), and there is the
        single author for all pages, it is meaningful to specify the respective settings in the separate file
        (e. g. #[+SecondaryEntity--YDID CommonMetadata.pug]):

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug }): :code_listing--yda
          -

            RegularWebPageTemplate__YDF.configure({
              metadata: {
                locale: "en",
                author: "Acme Corporation"
              }
            });

    p.Article-Paragraph.
      Then, this file could be included to the files of pages an specify #[+Keyword--YDID only] specific for certain
        page #[+Term--YDID metadata]:

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug }): :code_listing--yda
        block append Metadata

          include CommonMetadata.pug

          -

            RegularWebPageTemplate__YDF.configure({
              metadata: {
                title: "Services"
                // "locale" и "author" already has been set in "CommonMetadata.pug"
              }
            });


    //- ━━━ Pug Blocks ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.pugBlocks.$heading,
      HTML_ID: localizedSectioning.pugBlocks.$anchor
    }).Article-Heading2

    //- TODO YDA Bug： pug+blocks
    p.Article-Paragraph.
      The modification of #[+ImportantEntity--YDID Pug] templates is being executed via
        #[+Link--YDF({ unendorsedExternalURI: sharedExternalLinks.pug.homePage.block }) Pug blocks].
      In #[+ImportantEntity--YDID RegularWebPageTemplate] template, the following #[+Term--YDID Pug blocks] has been
        declared.


    //- ─── `Functionality` ────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      innerHTML: localizedSectioning.pugBlocks.$children.Functionality.$heading,
      HTML_ID: localizedSectioning.pugBlocks.$children.Functionality.$anchor
    }).Article-Heading3

    p.Article-Paragraph
      | Use this #[+Term--YDID block] if you want to write some functionality on
      |
      +Link--YDF({
        unendorsedExternalURI: sharedExternalLinks.pug.homePage.inlineJavaScript
      }) built-in JavaScript
      | .

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug }): :code_listing--yda
        extends ../../node_modules/@yamato-daiwa/frontend/PagesTemplates/RegularWebPage.pug


        block append Functionality

          -

            function sum(...summands) {
              return summands.reduce((interimSum, summand) => interimSum + summand, 0)
            }

    p.Article-Paragraph
      | Because the functionality of
      |
      +Link--YDF({
        internalURI: localizedRouting.coreLibrary.$children.
            markup.$children.
            functionality.$children.
            inlineJavaScript.$children.
            YDEE_Integration.$URI
      }) "Yamato Daiwa ECMAScript Extensions"
      |
      | library is being included to this #[+Term--YDID block], #[+Keyphrase--YDID starting from this block] you can
      |   use it
      |
      +Keyphrase--YDID.
        if specified the #[+ImportantEntity__Code--YDID append] #[+Term--YDID keyword] during referring to this
          #[+Term--YDID block]
      | :

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug }): :code_listing--yda
        extends ../../node_modules/@yamato-daiwa/frontend/PagesTemplates/RegularWebPage.pug


        block append Functionality

          -

            function formatPrice(amount) {
              return `${ separateEach3DigitsGroupWithComma(amount) }$`;
            }

    +AdmonitionBlock--YDF({
      SVG_Icon: true,
      geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
      decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.warning
    }).
      Do #[+Keyword--YDID not] add #[+Keyword__Contrast--YDID any] #[+Term--YDID markup] to this #[+Term--YDID block]
        because the #[+Term--YDID HTML code] will be generated #[+Keyword--YDID outside] of the #[+Term--YDID html]
        #[+Term--YDID tag] that will make the #[+Term--YDID HTML document] #[+Keyword--YDID invalid].


    //- ─── `Data` ─────────────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      innerHTML: localizedSectioning.pugBlocks.$children.Data.$heading,
      HTML_ID: localizedSectioning.pugBlocks.$children.Data.$anchor
    }).Article-Heading3

    p.Article-Paragraph.
      Use this #[+Term--YDID block] if you want to generate some data to use it for the generating of the
        #[+Term--YDID markup].

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug }): :code_listing--yda
        extends ../../node_modules/@yamato-daiwa/frontend/PagesTemplates/RegularWebPage.pug


        block append Data

          -

            const items = Array.from(new Array(16).keys()).map(
              index => ({
                ID: index,
                title: `Item ${ index + 1 }`
              })
            );

    +AdmonitionBlock--YDF({
      SVG_Icon: true,
      geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
      decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.warning
    }).
      Do #[+Keyword--YDID not] add #[+Keyword__Contrast--YDID any] #[+Term--YDID markup] to this #[+Term--YDID block]
        because the #[+Term--YDID HTML code] will be generated #[+Keyword--YDID outside] of the #[+Term--YDID html]
        #[+Term--YDID tag] that will make the #[+Term--YDID HTML document] #[+Keyword--YDID invalid].


    //- ─── `Requirements` ─────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      innerHTML: localizedSectioning.pugBlocks.$children.Requirements.$heading,
      HTML_ID: localizedSectioning.pugBlocks.$children.Requirements.$anchor
    }).Article-Heading3

    p.Article-Paragraph
      | Use this #[+Term--YDID block] for including of the #[+Term--YDID Pug files] containing the
      |   #[+Term--YDID Pug mixins] or
      |
      +Link--YDF({
        unendorsedExternalURI: sharedExternalLinks.pug.homePage.inlineJavaScript
      }) inner JavaScript code
      | , for which the #[+Keyword--YDID previous] #[+Term--YDID blocks] are #[+Keyword--YDID not]&nbsp;suited for some
      |   reason.

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug }): :code_listing--yda
        extends ../../node_modules/@yamato-daiwa/frontend/PagesTemplates/RegularWebPage.pug


        block append Requirements

          mixin ProductCard(product)
            .ProductCard
              h1= product.title
              p= product.description

    +AdmonitionBlock--YDF({
      SVG_Icon: true,
      geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
      decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.warning
    }).
      Do not add the #[+Term--YDID markup] #[+Keyphrase--YDID not wrapped by #[+Term--YDID Pug mixins]] to this
        #[+Term--YDID block] because the #[+Term--YDID HTML code] will be generated #[+Keyword--YDID outside] of the
        #[+Term--YDID html] #[+Term--YDID tag] that will make the #[+Term--YDID HTML document] #[+Keyword--YDID invalid].


    //- ─── `Metadata` ─────────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      innerHTML: localizedSectioning.pugBlocks.$children.Metadata.$heading,
      HTML_ID: localizedSectioning.pugBlocks.$children.Metadata.$anchor
    }).Article-Heading3

    p.Article-Paragraph.
      Use this #[+Term--YDID block] if you want to define the #[+Term--YDID metadata] of #[+Term__Contrast--YDID HTML page]
        via #[+Term--YDID JavaScript variables].
      In particular, this #[+Term--YDID block] is #[+Keyword--YDID exactly] where it is
        #[+Keyword__Contrast--YDID recommended] to call the
        #[+ImportantEntity__Code--YDID RegularWebPageTemplate__YDF.configure({})].

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug }): :code_listing--yda
        extends ../../node_modules/@yamato-daiwa/frontend/PagesTemplates/RegularWebPage.pug

        block append Metadata

          -

            RegularWebPageTemplate__YDF.configure({
              metadata: {
                locale: "en",
                author: "ACME Co., Ltd."
              }
            });

    +AdmonitionBlock--YDF({
      SVG_Icon: true,
      geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
      decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.warning
    }).
      Do #[+Keyword--YDID not] add #[+Keyword__Contrast--YDID any] #[+Term--YDID markup] to this #[+Term--YDID block]
        because the #[+Term--YDID HTML code] will be generated #[+Keyword--YDID outside] of the #[+Term--YDID html]
        #[+Term--YDID tag] that will make the #[+Term--YDID HTML document] #[+Keyword--YDID invalid].


    //- ─── `StatesSimulations` ────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      innerHTML: localizedSectioning.pugBlocks.$children.StatesSimulations.$heading,
      HTML_ID: localizedSectioning.pugBlocks.$children.StatesSimulations.$anchor
    }).Article-Heading3

    p.Article-Paragraph
      | If it is planned to create the dynamic page, then
      |   #[+Keyphrase--YDID on the stage of creating of the #[+Term--YDID markup] and #[+Term--YDID styles]] using the
      |
      +Link--YDF({
        unendorsedExternalURI: sharedExternalLinks.pug.homePage.conditionalRendering
      }) Pug conditional rendering
      |
      |   it is possible to check, does page displaying correctly with or without certain elements.
      | Specifically, various states could be displayed.
      | For example, if the dynamic data collections retrieved by #[+Term--YDID AJAX] must be displayed, the page
      |   will have the following states:

    ul.Article-UnorderedList
      li Data retrieving is process
      li Data retrieving error
      li No data
      li There is the data but no search results
      li The data has been successfully retrieved and displaying

    p.Article-Paragraph.
      All of this states could be defined via #[+Term--YDID boolean variables] (in below example it has been
        implemented by the #[+Term--YDID class] with the #[+Keyword--YDID object-type]
        #[+SecondaryEntity__Code--YDID statesSimulations] #[+Keyword--YDID static] #[+Term--YDID field] which
        #[+Term--YDID properties] are referring to specific states) and organize the conditional displaying:

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug }): :code_listing--yda
        extends ../../node_modules/@yamato-daiwa/frontend/PagesTemplates/RegularWebPage.pug

        block append Metadata

          -

            class ProductsListPage {

              static statesSimulations: {
                loading: false,
                loadingError: false,
                noData: false,
                noSearchingResults: false
              };

            }

        block append PageContent

          main

            h1 Товары

            if ProductsListPage.statesSimulations.loading

              //-
                Commonly for the loading state the component called "Loading Placeholder"
                  (AKA "Skeleton Loading" or "Content Placeholder") could be fine

            else if ProductsListPage.statesSimulations.loadingError

              //- Erorr message

            else if ProductsListPage.statesSimulations.noData

              //- The message about there is no goods or everything has been sold

            else if ProductsListPage.statesSimulations.noSearchingResults

              //- The message about no search request results

            else

              //- Goods list

    p.Article-Paragraph
      | To switch between the states, it is required to re-run the #[+ImportantEntity--YDID Pug].
      | However if you want to represent all of these states as #[+Keyword--YDID separate] pages to customer
      |   #[+Keyphrase--YDID before the implementation of #[+Term--YDID JavaScript dynamics] and server part] but also
      |   minimize the routines (particularly, #[+Keyword--YDID avoid] the #[+SecondaryEntity__Code--YDID manual]
      |   creating of the separate page #[+Keyphrase--YDID for each state]),
      |   consider the
      |
      +Link--YDF({
        internalURI: localizedRouting.coreLibrary.$children.markup.$children.pagesTemplates.
            $children.StaticPreviewAnywherePage.$URI,
      }) static preview concept
      |
      |   and the #[+Term--YDID project building tool]
      |
      +Link--YDF({
        endorsedExternalURI: sharedExternalLinks.YamatoDaiwaAutomation.top,
      }) Yamato Daiwa Automation
      |   (abbreviation: #[+ImportantEntity--YDID YDA]), which has the
      |
      +Link--YDF({
        endorsedExternalURI: sharedExternalLinks.YamatoDaiwaAutomation.functionality.staticPreview.
            resourcesPointersResolving,
      }) functionality designed exactly for such cases
      | .

    +AdmonitionBlock--YDF({
      SVG_Icon: true,
      geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
      decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.warning
    }).
      Do #[+Keyword--YDID not] add #[+Keyword__Contrast--YDID any] #[+Term--YDID markup] to this #[+Term--YDID block]
        because the #[+Term--YDID HTML code] will be generated #[+Keyword--YDID outside] of the #[+Term--YDID html]
        #[+Term--YDID tag] that will make the #[+Term--YDID HTML document] #[+Keyword--YDID invalid].


    //- ─── `HeadBegin` ────────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      innerHTML: localizedSectioning.pugBlocks.$children.HeadBegin.$heading,
      HTML_ID: localizedSectioning.pugBlocks.$children.HeadBegin.$anchor
    }).Article-Heading3

    +AdmonitionBlock--YDF({
      SVG_Icon: true,
      geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
      decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.guidance
    })
      | Starting from this #[+Term--YDID block], the content will be added #[+Keyword--YDID inside]
      |   #[+ImportantEntity__Code--YDID html] #[+Term--YDID tag].
      | #[+Keyword--YDID All] #[+Keyword__Contrast--YDID previous] #[+Term--YDID blocks] are intended to be used
      |   #[+Keyword--YDID only] for the declaring of
      |
      +Link--YDF({
        unendorsedExternalURI: sharedExternalLinks.pug.homePage.inlineJavaScript
      }) internal JavaScript code
      |
      | and #[+Term--YDID Pug mixin] what does&nbsp;#[+Keyword--YDID not]&nbsp;entail the output #[+Term--YDID HTML code].

    p.Article-Paragraph.
      Use this #[+Term--YDID block] if you want to add something to the #[+Keyword--YDID start] of the
        #[+ImportantEntity__Code--YDID head] #[+Term--YDID tag] (#[+Keyword--YDID before]
        #[+Keyword__Contrast--YDID other] #[+Keyword--YDID children] elements).

    p.Article-Paragraph.
      The sequence of #[+Keyword--YDID children] in relation to #[+ImportantEntity__Code--YDID head] elements is
        rarely matters (mainly it ths the sequence of the #[+Term--YDID styles] and #[+Term--YDID scripts]), so
        #[+Keyword--YDID usually] there is #[+Keyword--YDID no]&nbsp;need to add something precisely to the start thus
        this #[+Term--YDID block] will come in handy only in the rare occasions.

    +CodeViewer--YDF
      +CodeViewer-TabPanel--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug })

        +CodeViewer-PartialListing--YDF: :code_listing--yda
          extends ../../node_modules/@yamato-daiwa/frontend/PagesTemplates/RegularWebPage.pug

            // ...

          block append HeadBeging

            link(rel="dns-prefetch" href="//example.com")
        +CodeViewer-Explanation--YDF.
          For example, the #[+Term--YDID tag] #[+SecondaryEntity__Code--YDID link] has been added to the start of
            #[+ImportantEntity__Code--YDID head] tag, but there was no&nbsp;need to add the
            #[+SecondaryEntity__Code--YDID link] to exactly start of #[+ImportantEntity__Code--YDID head].

    +AdmonitionBlock--YDF({
      SVG_Icon: true,
      geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
      decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.warning
    }).
      Do not add to this #[+Term--YDID block] any #[+Term__Contrast--YDID markup] which must&nbsp;not&nbsp;be at
        the #[+ImportantEntity__Code--YDID head] #[+Term--YDID tag].


    //- ─── `Styles` ───────────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      innerHTML: localizedSectioning.pugBlocks.$children.Styles.$heading,
      HTML_ID: localizedSectioning.pugBlocks.$children.Styles.$anchor
    }).Article-Heading3

    p.Article-Paragraph.
      Use this #[+Term--YDID block] if for some reason it is not&nbsp;enough to specify the #[+Term--YDID styles] via
        (#[+ImportantEntity__Code--YDID RegularWebPageTemplate__YDF.configure({})]) or if you want to declare the
        styles directly in the #[+ImportantEntity__Code--YDID head] #[+Term--YDID tag].
      Particularly, because the #[+ImportantEntity__Code--YDID link] #[+Term--YDID tags] which will be generated
        according the configuration have #[+Keyword--YDID no]&nbsp;any #[+Term--YDID attributes] #[+Keyword--YDID except]
        #[+ImportantEntity__Code--YDID href] and #[+ImportantEntity__Code--YDID rel="stylesheet"], so if you need other
        #[+Term--YDID attributes], add the #[+ImportantEntity__Code--YDID link] #[+Term--YDID tags] inside
        #[+ImportantEntity__Code--YDID Styles] #[+Term--YDID block] manually:

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug }): :code_listing--yda
        extends ../../node_modules/@yamato-daiwa/frontend/PagesTemplates/RegularWebPage.pug

        block append Styles

          link(
            rel="stylesheet"
            href="/path/to/style.css"
            type="text/css"
            media="screen"
            crossorigin="anonymous"
            integrity="sha384-oqVuAfXRKap7fdgcCY5hULvJ0GhBGDq4IcF3J08z9QY9l03VvH3p0EOTr4N3kR0o"
          )

    p.Article-Paragraph.
      This way of #[+Term--YDID styles] specifying does&nbsp;#[+Keyword--YDID not]&nbsp;conflict with specifying of
        the #[+Term--YDID styles] via configuration, however for the correct #[+Term--YDID cascading of styles] it
        is required to respect the sequence in which #[+Term--YDID CSS rules] declared on the page.
      Because in the #[+ImportantEntity--YDID CSS], the priority depends on #[+Keyword--YDID multiple] factors
        it is impossible to say unequivocally that the #[+Term--YDID CSS rules] declaration sequence will change
        the displaying, however the sequence is the #[+Keyphrase--YDID one of] factors on which final displaying depends.

    ul.Article-UnorderedList

      li.
        Use #[+ImportantEntity__Code--YDID prepend] #[+Term--YDID keyword] when modifying the
          #[+ImportantEntity__Code--YDID Styles] #[+Term--YDID block] to add the #[+Term--YDID styles]
          #[+Keyword--YDID before] the ones specified via configuration.

      li.
        Use #[+ImportantEntity__Code--YDID append] #[+Term--YDID keyword] when modifying the
          #[+ImportantEntity__Code--YDID Styles] #[+Term--YDID block] to add the #[+Term--YDID styles]
          #[+Keyword--YDID after] the ones specified via configuration.

    +AdmonitionBlock--YDF({
      SVG_Icon: true,
      geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
      decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.warning
    }).
      Do not add to this #[+Term--YDID block] any #[+Term__Contrast--YDID markup] which must&nbsp;not&nbsp;be at
        the #[+ImportantEntity__Code--YDID head] #[+Term--YDID tag].


    //- ─── `HeadScripts` ──────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      innerHTML: localizedSectioning.pugBlocks.$children.HeadScripts.$heading,
      HTML_ID: localizedSectioning.pugBlocks.$children.HeadScripts.$anchor
    }).Article-Heading3

    p.Article-Paragraph.
      Use this #[+Term--YDID block] if for some reason it is not&nbsp;enough to specify the #[+Term--YDID scripts] via
        (#[+ImportantEntity__Code--YDID RegularWebPageTemplate__YDF.configure({})]) or if you want to declare the
        scripts directly in the #[+ImportantEntity__Code--YDID head] #[+Term--YDID tag].
      Particularly, because the #[+ImportantEntity__Code--YDID script] #[+Term--YDID tags] which will be generated
        according the configuration have #[+Keyword--YDID no]&nbsp;any #[+Term--YDID attributes] #[+Keyword--YDID except]
        #[+ImportantEntity__Code--YDID src], so if you need other #[+Term--YDID attributes], add the
        #[+ImportantEntity__Code--YDID script] #[+Term--YDID tags] inside #[+ImportantEntity__Code--YDID HeadScripts]
        #[+Term--YDID block] manually:

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug }): :code_listing--yda
        extends ../../node_modules/@yamato-daiwa/frontend/PagesTemplates/RegularWebPage.pug

        block append HeadScripts

          script(
            src="/path/to/index.js"
            type="module"
            async
            defer
            crossorigin="anonymous"
            integrity="sha384-oqVuAfXRKap7fdgcCY5hULvJ0GhBGDq4IcF3J08z9QY9l03VvH3p0EOTr4N3kR0o"
            referrerpolicy="no-referrer"
            nonce="randomString"
          )

    p.Article-Paragraph.
      #[+Keyword--YDID Basically] it is recommended to add the #[+Term--YDID scripts] to the #[+Keyword--YDID end] of
        #[+ImportantEntity__Code--YDID body] #[+Term--YDID tag], because the #[+Term--YDID scripts] defined previously
        could #[+Keyword--YDID slow down] the page #[+Term--YDID rendering].
      However, in some cases the #[+Term--YDID scripts] must be added exactly to
        #[+ImportantEntity__Code--YDID head] #[+Term--YDID tag], especially if the are the third-party scripts for the
        analytics such as the #[+SecondaryEntity--YDID Google Analytics]:

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug }): :code_listing--yda
        extends ../../node_modules/@yamato-daiwa/frontend/PagesTemplates/RegularWebPage.pug

        block append HeadScripts

          script(
            async
            src="https://www.googletagmanager.com/gtag/js?id=G-F3D8Is3NGR4S56G4EBS"
          )

          script.

            window.dataLayer = window.dataLayer || [];

            function gtag() {
              dataLayer.push(arguments);
            }

            gtag("js", new Date());
            gtag("config", "G-S3L0PQFKMV");

    p.Article-Paragraph.
      This way of #[+Term--YDID scripts] specifying does&nbsp;#[+Keyword--YDID not]&nbsp;conflict with specifying of
        the #[+Term--YDID scripts] via configuration, and
        #[+Keyphrase--YDID if the #[+Term--YDID scripts] independent of each other]
        (#[+Keyphrase--YDID in modern times] it is #[+Keyword--YDID usually] such as but&nbsp;not&nbsp;in legacy sites
        and web applications), these methods could be combined.

    ul.Article-UnorderedList

      li.
        Use #[+ImportantEntity__Code--YDID prepend] #[+Term--YDID keyword] when modifying the
          #[+ImportantEntity__Code--YDID HeadScripts] #[+Term--YDID block] to add the #[+Term--YDID scripts]
          #[+Keyword--YDID before] the ones specified via configuration.

      li.
        Use #[+ImportantEntity__Code--YDID append] #[+Term--YDID keyword] when modifying the
          #[+ImportantEntity__Code--YDID HeadScripts] #[+Term--YDID block] to add the #[+Term--YDID scripts]
          #[+Keyword--YDID after] the ones specified via configuration.

    +AdmonitionBlock--YDF({
      SVG_Icon: true,
      geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
      decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.warning
    }).
      Do not add to this #[+Term--YDID block] any #[+Term__Contrast--YDID markup] which must&nbsp;not&nbsp;be at
        the #[+ImportantEntity__Code--YDID head] #[+Term--YDID tag].


    //- ─── `PageContent` ──────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      innerHTML: localizedSectioning.pugBlocks.$children.PageContent.$heading,
      HTML_ID: localizedSectioning.pugBlocks.$children.PageContent.$anchor
    }).Article-Heading3

    +AdmonitionBlock--YDF({
      SVG_Icon: true,
      geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
      decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.guidance
    })
      | From this #[+Term--YDID block] the content will be added #[+Keyword--YDID inside] the
      |   #[+ImportantEntity__Code--YDID body] #[+Term--YDID тэга].

    p.Article-Paragraph.
      Add the #[+Keyword--YDID visible] content of this page to this #[+Term--YDID block].
      Herewith, the #[+ImportantEntity__Code--YDID body] will be the #[+Keyword--YDID direct] parent of the generated
        #[+Term--YDID HTML code].

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug }): :code_listing--yda
        extends ../../node_modules/@yamato-daiwa/frontend/PagesTemplates/RegularWebPage.pug

        block append PageContent

          header.TopPage-Header

            //- ...

          main

            //- ...

          footer

            //- ...


    //- ─── `EndBodyContent` ───────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      innerHTML: localizedSectioning.pugBlocks.$children.EndBodyContent.$heading,
      HTML_ID: localizedSectioning.pugBlocks.$children.EndBodyContent.$anchor
    }).Article-Heading3

    p.Article-Paragraph.
      According to some methodologies, the elements with the #[+Term--YDID fixed positioning] such as the
        #[+Term--YDID modal dialogs] should be placed #[+Keyword--YDID after] #[+Keyword__Contrast--YDID all]
        #[+Keyword--YDID other] elements, but of course, still #[+Keyword--YDID inside] the
        #[+ImportantEntity__Code--YDID body] #[+Term--YDID tag].
      If you are following this methodology, use #[+ImportantEntity__Code--YDID EndBodyContent] #[+Term--YDID block].
      The content of this #[+Term--YDID block] will be placed #[+Keyword--YDID direct] #[+Keyword__Contrast--YDID after]
        the content of #[+ImportantEntity__Code--YDID PageContent] #[+Term--YDID block].

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug }): :code_listing--yda
        extends ../../node_modules/@yamato-daiwa/frontend/PagesTemplates/RegularWebPage.pug

        block append PageContent

          //- ...

        block append EndBodyContent

          +ContactRequestPage-ModalDialog


    //- ─── `EndBodyScripts` ───────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      innerHTML: localizedSectioning.pugBlocks.$children.EndBodyScripts.$heading,
      HTML_ID: localizedSectioning.pugBlocks.$children.EndBodyScripts.$anchor
    }).Article-Heading3

    p.Article-Paragraph.
      Use this #[+Term--YDID block] if for some reason it is not&nbsp;enough to specify the #[+Term--YDID scripts] via
        (#[+ImportantEntity__Code--YDID RegularWebPageTemplate__YDF.configure({})]) or if you want to declare the
        scripts directly in the #[+ImportantEntity__Code--YDID body] #[+Term--YDID tag].
      Particularly, because the #[+ImportantEntity__Code--YDID script] #[+Term--YDID tags] which will be generated
        according the configuration have #[+Keyword--YDID no]&nbsp;any #[+Term--YDID attributes] #[+Keyword--YDID except]
        #[+ImportantEntity__Code--YDID src], so if you need other #[+Term--YDID attributes], add the
        #[+ImportantEntity__Code--YDID script] #[+Term--YDID tag] inside #[+ImportantEntity__Code--YDID EndBodyScripts]
        #[+Term--YDID block] manually:

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug }): :code_listing--yda
        extends ../../node_modules/@yamato-daiwa/frontend/PagesTemplates/RegularWebPage.pug

        block append PageContent

          // ...

        block append EndBodyScripts

          script(
            src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
            integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
            crossorigin="anonymous"
          )

    p.Article-Paragraph.
      This way of #[+Term--YDID scripts] specifying does&nbsp;#[+Keyword--YDID not]&nbsp;conflict with specifying of
        the #[+Term--YDID scripts] via configuration, and
        #[+Keyphrase--YDID if the #[+Term--YDID scripts] independent of each other]
        (#[+Keyphrase--YDID in modern times] it is #[+Keyword--YDID usually] such as but&nbsp;not&nbsp;in legacy sites
        and web applications), these methods could be combined.

    ul.Article-UnorderedList

      li.
        Use #[+ImportantEntity__Code--YDID prepend] #[+Term--YDID keyword] when modifying the
          #[+ImportantEntity__Code--YDID EndBodyScripts] #[+Term--YDID block] to add the #[+Term--YDID scripts]
          #[+Keyword--YDID before] the ones specified via configuration.

      li.
        Use #[+ImportantEntity__Code--YDID append] #[+Term--YDID keyword] when modifying the
          #[+ImportantEntity__Code--YDID EndBodyScripts] #[+Term--YDID block] to add the #[+Term--YDID scripts]
          #[+Keyword--YDID after] the ones specified via configuration.


    //- ━━━ Multi-level Inheritance ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.multiLevelInheritance.$heading,
      HTML_ID: localizedSectioning.multiLevelInheritance.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      If your project has multiple pages, herewith most of them has the common part (for example, shared header,
        footer and sidebar), then it is meaningful to extend #[+Term--YDID Pug files] of the pages from the
        #[+Keyword--YDID interim] #[+Term--YDID page templates] containing the shared #[+Term--YDID markup],
        #[+Keyword--YDID not]&nbsp;directly from the #[+ImportantEntity__Code--YDID RegularWebPageTemplate].
      Usually there are the main template, admin panel template, authentication template etc.

    +AdmonitionBlock--YDF({
      title: "Be Careful with Terms",
      SVG_Icon: true,
      geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
      decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.notice
    })

      p.Article-Paragraph.
        The files which intended to be extended for creating of the complete #[+Term--YDID HTML pages] are frequently
          being called #[+Term--YDID "layouts"].
        However, the #[+Term--YDID "layout"] term is #[+Keyword--YDID too] #[+Keyword--YDID wide] what could cause the
          confusion.

      p.Article-Paragraph.
        The #[+Term--YDID "layout"] term is frequently being used relation to any
          #[+Keyphrase--YDID structurally grouped] #[+Term--YDID combination] of the #[+Term--YDID elements]
          (#[+Keyword--YDID not]&nbsp;necessary the #[+Term--YDID HTML elements], it could be the
          #[+Term--YDID elements] from any technologies for the GUI development even if the ones not&nbsp;related
          directly with the web development such as #[+SecondaryEntity--YDID Windows Presentation Foundation] or
          #[+SecondaryEntity--YDID JavaFX]).
        To reduce the ambiguity, it is recommended to use the #[+Term--YDID "page layout"] term in relation to the files
          from which it is intended to extend the complete #[+Term--YDID HTML pages] instead of ambiguous "layout".

    p.Article-Paragraph.
      Below, the #[+Term--YDID page template] including single-column #[+Term--YDID page layout] has been represented.
      To embed the page-specific content to this #[+Term--YDID page layout], new
        #[+SecondaryEntity__Code--YDID SpecificContent] #[+Term--YDID pug block] has been defined:

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug }): :code_listing--yda
        extends ../../node_modules/@yamato-daiwa/frontend/PagesTemplates/RegularWebPage.pug

        block append PageContent

          .MainLayout

              .MainLayout-UpperFixedContentSlot

                +Header
                +NavigationBar


              main.MainLayout-SpecificContent

                block SpecificContent


              +Footer

    p.Article-Paragraph.
      Now, it is possible to extend other pages from this #[+Term--YDID page template]:

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Pug }): :code_listing--yda
        extends ../Layouts/OneColumnLayout.pug

        block append SpecificContent

          h1 Products
