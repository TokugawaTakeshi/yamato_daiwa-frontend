@using YamatoDaiwa.Frontend.Components.Controls.Validation
@using YamatoDaiwa.Frontend.Components.LoadingIndicator
@using YamatoDaiwa.Frontend.SVG_Icons.Checkmark
@using YamatoDaiwa.Frontend.SVG_Icons.MultiplicationSign


<div 
  class=@composeClassAttributeValueForRootElement(namespaceCSS_Class: "CompoundControlShell--YDF")
  @ref=@rootElement
>
  
  @* ━━━ Header ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ *@
  @if (mustDisplayHeader)
  {
    <div class="CompoundControlShell--YDF-Header">
    
      <label
        class="CompoundControlShell--YDF-Label"
        v-if=@(label is not null)
        for=@coreElementHTML_ID
        id=@labelElementHTML_ID
      >
        @label
      </label>    
   
      @if (mustDisplayRequiredInputBadge)
      {
        <span class="CompoundControlShell--YDF-Badge CompoundControlShell--YDF-Badge__Required">
          @localization.requirementBadges.required
        </span>  
      }
      
      else if (mustDisplayOptionalInputBadge)
      {
        <span class="CompoundControlShell--YDF-Badge CompoundControlShell--YDF-Badge__Optional">
          @localization.requirementBadges.optional
        </span>  
      }
      
      else if (mustAddInvisibleBadgeForHeightEqualizingWhenNoBadge)
      {
        <span class="CompoundControlShell--YDF-Badge CompoundControlShell--YDF-Badge__Invisible">
          @(required ? @localization.requirementBadges.required : @localization.requirementBadges.optional)
        </span>
      }
      
    </div>  
  }
  
  
  @* ━━━ Guidance ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ *@
  @if (formattedGuidance is not null)
  {
    <p class="CompoundControlShell--YDF-Guidance">
      @((MarkupString)formattedGuidance)
    </p>  
  }

  
  @* ━━━ Main slot ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ *@
  <div class="CompoundControlShell--YDF-MainSlotCustomizableWrapper @mainSlotSpaceSeparatedAdditionalCSS_Classes">
    @ChildContent
  </div>
  
  
  @* ━━━ (Non-asynchronous) validations ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ *@
  @if (invalidInputHighlightingIfAnyValidationErrorsMessages && validationErrorsMessages.Length > 0)
  {
    <ul class="CompoundControlShell--YDF-ValidationErrorsMessagesList">
  
      @foreach (string validationErrorMessage in validationErrorsMessages)
      {
        <li 
          class="CompoundControlShell--YDF-ValidationErrorMessage"
          @key=@($"VALIDATION_ERROR_MESSAGE-{ validationErrorMessage }")
        >
          @validationErrorMessage
        </li>  
      }
      
    </ul>  
  }
  
  
  @* ━━━ Asynchronous validations ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ *@
  @if (
    asynchronousChecksCheckStatus is {} definedAsynchronousChecksCheckStatus &&
    (
      definedAsynchronousChecksCheckStatus.HasAtLeastOneCheckNotFinishedYet ||
      definedAsynchronousChecksCheckStatus.HasAtLeastOneCheckErrorOccurred ||
      definedAsynchronousChecksCheckStatus.HasNoInvalidValuesBeenConfirmed  
    )
  )
  {
    
    <ul class="CompoundControlShell--YDF-AsynchronousValidationsStatusesList">
      
      @foreach (
        KeyValuePair<string, InputtedValueValidation.AsynchronousCheck.Status> asynchronousCheckStatus in 
            definedAsynchronousChecksCheckStatus.Checks)
      {
        
        @if (asynchronousCheckStatus.Value.IsPending)
        {
          
          <li class="CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item__InProgressState">
            
            <LoadingIndicator
              type="LoadingIndicator.Types.variableWidthArcSpinner"
              geometricVariation="LoadingIndicator.StandardGeometricVariations.small"
            />
            
          </li>    
          
        } else if (asynchronousCheckStatus.Value.HasValidValueBeenConfirmed)
        {
          
          <li class="CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item__SucceededAndValidState">
            <Checkmark__Circled__Filled rootElementModifierCSS_Class="CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item-Icon"/>
            <p class="CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item-Text">
              @asynchronousCheckStatus.Value.Message
            </p>
          </li>
          
        } else if (asynchronousCheckStatus.Value.HasErrorOccurred)
        {
          
          <li class="CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item__MalfunctionState">
            <MultiplicationSignIcon__Boxed__Filled rootElementModifierCSS_Class="CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item-Icon" />
            <p class="CompoundControlShell--YDF-AsynchronousValidationsStatusesList-Item-Text">
              @asynchronousCheckStatus.Value.Message
            </p>
          </li>
          
        }
        
      }
      
    </ul>  
    
  }

</div>